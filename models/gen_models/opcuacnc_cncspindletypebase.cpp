/******************************************************************************
** opcuacnc_cncspindletypebase.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#include "opcuacnc_cncspindletypebase.h"
#include "opcuacnc_cncspindletype.h"
#include "uagenericnodes.h"
#include "nodemanagerroot.h"
#include "methodhandleuanode.h"
#include "opcuacnc_nodemanagercnc.h"

#include "instancefactory.h"
#include "opcuacnc_cncpositionvariabletype.h"
#include "opcuacnc_instancefactory_cnc.h"
// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

bool CncSpindleTypeBase::s_typeNodesCreated = false;
OpcUa::DataItemType* CncSpindleTypeBase::s_pActChuckPowerStatus = NULL;
OpcUa::DataItemType* CncSpindleTypeBase::s_pActGear = NULL;
OpcUa::AnalogItemType* CncSpindleTypeBase::s_pActOverride = NULL;
OpcUa::AnalogItemType* CncSpindleTypeBase::s_pActSpeed = NULL;
OpcUa::DataItemType* CncSpindleTypeBase::s_pActStatus = NULL;
OpcUa::DataItemType* CncSpindleTypeBase::s_pActTurnDirection = NULL;
OpcUaCnc::CncPositionVariableType* CncSpindleTypeBase::s_pAnglePos = NULL;
OpcUa::DataItemType* CncSpindleTypeBase::s_pCmdGear = NULL;
OpcUa::AnalogItemType* CncSpindleTypeBase::s_pCmdOverride = NULL;
OpcUa::AnalogItemType* CncSpindleTypeBase::s_pCmdSpeed = NULL;

/** Constructs an CncSpindleType object using an instance declaration node as base
*/
CncSpindleTypeBase::CncSpindleTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUaCnc::CncDriveType(nodeId, pInstanceDeclarationObject, pNodeConfig, pSharedMutex)
{
    initialize();
}

/** Constructs an CncSpindleType object
*/
CncSpindleTypeBase::CncSpindleTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUaCnc::CncDriveType(nodeId, name, browseNameNameSpaceIndex, pNodeConfig, pSharedMutex)
{
    initialize();
}

/**  Constructs an instance of the class CncSpindleTypeBase with all components
*/
CncSpindleTypeBase::CncSpindleTypeBase(
    UaBase::Object*    pBaseNode,    //!< [in] The "tree" of nodes that specifies the attributes of the instance and its children
    XmlUaNodeFactoryManager* pFactory, //!< [in] The factory to create the children
    NodeManagerConfig* pNodeConfig,  //!< [in] Interface pointer to the NodeManagerConfig interface used to add and delete node and references in the address space
    UaMutexRefCounted* pSharedMutex) //!< [in] Shared mutex object used to synchronize access to the variable. Can be NULL if no shared mutex is provided
: OpcUaCnc::CncDriveType(pBaseNode, pFactory, pNodeConfig, pSharedMutex)
{
    UaStatus      addStatus;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }

    m_pActChuckPowerStatus = NULL;
    m_pActGear = NULL;
    m_pActOverride = NULL;
    m_pActSpeed = NULL;
    m_pActStatus = NULL;
    m_pActTurnDirection = NULL;
    m_pAnglePos = NULL;
    m_pCmdGear = NULL;
    m_pCmdOverride = NULL;
    m_pCmdSpeed = NULL;

    std::list<UaBase::BaseNode*> lstReferencedNodes = pBaseNode->hierarchicallyReferencedNodes();
    for (std::list<UaBase::BaseNode*>::const_iterator it = lstReferencedNodes.begin(); it != lstReferencedNodes.end(); it++)
    {
        UaBase::BaseNode *pChild = *it;
        if (pChild->browseName() == UaQualifiedName("ActChuckPowerStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActChuckPowerStatus)
            {
                m_pActChuckPowerStatus = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActChuckPowerStatus, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActChuckPowerStatus->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActGear", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActGear)
            {
                m_pActGear = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActGear, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActGear->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActOverride)
            {
                m_pActOverride = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActOverride, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActOverride->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActSpeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActSpeed)
            {
                m_pActSpeed = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActSpeed, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActSpeed->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActStatus)
            {
                m_pActStatus = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActStatus, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActStatus->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActTurnDirection", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActTurnDirection)
            {
                m_pActTurnDirection = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActTurnDirection, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActTurnDirection->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("AnglePos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pAnglePos)
            {
                m_pAnglePos = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pAnglePos, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pAnglePos->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CmdGear", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCmdGear)
            {
                m_pCmdGear = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCmdGear, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pCmdGear->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CmdOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCmdOverride)
            {
                m_pCmdOverride = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCmdOverride, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pCmdOverride->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CmdSpeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCmdSpeed)
            {
                m_pCmdSpeed = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCmdSpeed, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pCmdSpeed->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
    }
    UA_ASSERT(m_pActChuckPowerStatus);
    UA_ASSERT(m_pActGear);
    UA_ASSERT(m_pActOverride);
    UA_ASSERT(m_pActSpeed);
    UA_ASSERT(m_pActStatus);
    UA_ASSERT(m_pActTurnDirection);
    UA_ASSERT(m_pAnglePos);
    UA_ASSERT(m_pCmdGear);
    UA_ASSERT(m_pCmdOverride);
    UA_ASSERT(m_pCmdSpeed);
}

/** Initialize the object with all member nodes
*/
void CncSpindleTypeBase::initialize()
{
    UaStatus      addStatus;
    UaVariant     defaultValue;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }
    // Mandatory variable ActChuckPowerStatus
    m_pActChuckPowerStatus = new OpcUa::DataItemType(this, s_pActChuckPowerStatus, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActChuckPowerStatus, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActGear
    m_pActGear = new OpcUa::DataItemType(this, s_pActGear, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActGear, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActOverride
    m_pActOverride = new OpcUa::AnalogItemType(this, s_pActOverride, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActOverride, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActSpeed
    m_pActSpeed = new OpcUa::AnalogItemType(this, s_pActSpeed, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActSpeed, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActStatus
    m_pActStatus = new OpcUa::DataItemType(this, s_pActStatus, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActStatus, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pActStatus->setDataType(UaNodeId(OpcUaCncId_CncSpindleStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable ActTurnDirection
    m_pActTurnDirection = new OpcUa::DataItemType(this, s_pActTurnDirection, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActTurnDirection, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pActTurnDirection->setDataType(UaNodeId(OpcUaCncId_CncSpindleTurnDirection, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable AnglePos
    m_pAnglePos = new OpcUaCnc::CncPositionVariableType(this, s_pAnglePos, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pAnglePos, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pAnglePos->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable CmdGear
    m_pCmdGear = new OpcUa::DataItemType(this, s_pCmdGear, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCmdGear, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable CmdOverride
    m_pCmdOverride = new OpcUa::AnalogItemType(this, s_pCmdOverride, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCmdOverride, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable CmdSpeed
    m_pCmdSpeed = new OpcUa::AnalogItemType(this, s_pCmdSpeed, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCmdSpeed, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());


}

/** Destruction
*/
CncSpindleTypeBase::~CncSpindleTypeBase()
{
}

/** Create the related type nodes
*/
void CncSpindleTypeBase::createTypes()
{
    if ( s_typeNodesCreated == false )
    {
        s_typeNodesCreated = true;

        // Check if supertype is already created
        OpcUaCnc::CncDriveType::createTypes();

        UaStatus      addStatus;
        UaVariant     defaultValue;
        NodeManagerRoot* pNodeManagerRoot = NodeManagerRoot::CreateRootNodeManager();
        OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
        OpcUa_Int16 nsSuperTypeIdx = OpcUaCnc::NodeManagerCNC::getTypeNamespace();
        NodeManagerConfig* pTypeNodeConfig = pNodeManagerRoot->getNodeManagerByNamespace(nsTypeIdx)->getNodeManagerConfig();

        OpcUa::GenericObjectType* pObjectType;
        pObjectType = new OpcUa::GenericObjectType(
            UaNodeId(OpcUaCncId_CncSpindleType, nsTypeIdx),
            UaQualifiedName("CncSpindleType", nsTypeIdx),
            UaLocalizedText("", "CncSpindleType"),
            UaLocalizedText("", ""),
            OpcUa_False,
            &CncSpindleType::clearStaticMembers);
        pTypeNodeConfig->addNodeAndReference(UaNodeId(OpcUaCncId_CncDriveType, nsSuperTypeIdx), pObjectType, OpcUaId_HasSubtype);

        // Mandatory variable ActChuckPowerStatus
        defaultValue.setBool(OpcUa_False);
        s_pActChuckPowerStatus = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncSpindleType_ActChuckPowerStatus, nsTypeIdx), "ActChuckPowerStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActChuckPowerStatus->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActChuckPowerStatus->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActChuckPowerStatus, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActGear
        defaultValue.setUInt32(0);
        s_pActGear = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncSpindleType_ActGear, nsTypeIdx), "ActGear", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActGear->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActGear->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActGear, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActOverride
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_ActOverride, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActOverride"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_ActOverride_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActOverride = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActOverride, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActOverride->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActSpeed
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_ActSpeed, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActSpeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActSpeed"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_ActSpeed_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActSpeed = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActSpeed, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActSpeed->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActStatus
        defaultValue.setInt32((OpcUa_Int32) (OpcUaCnc::CncSpindleStatus)0);
        s_pActStatus = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncSpindleType_ActStatus, nsTypeIdx), "ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActStatus->setDataType(UaNodeId(OpcUaCncId_CncSpindleStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
        s_pActStatus->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActStatus->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActStatus, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActTurnDirection
        defaultValue.setInt32((OpcUa_Int32) (OpcUaCnc::CncSpindleTurnDirection)0);
        s_pActTurnDirection = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncSpindleType_ActTurnDirection, nsTypeIdx), "ActTurnDirection", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActTurnDirection->setDataType(UaNodeId(OpcUaCncId_CncSpindleTurnDirection, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
        s_pActTurnDirection->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActTurnDirection->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActTurnDirection, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable AnglePos
        OpcUaCnc::CncPositionType valAnglePos;
        valAnglePos.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_AnglePos, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("AnglePos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "AnglePos"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_AnglePos_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_AnglePos_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_AnglePos_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_AnglePos_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_AnglePos_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pAnglePos = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pAnglePos, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pAnglePos->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable CmdGear
        defaultValue.setUInt32(0);
        s_pCmdGear = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncSpindleType_CmdGear, nsTypeIdx), "CmdGear", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 3, pTypeNodeConfig);
        s_pCmdGear->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pCmdGear->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCmdGear, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable CmdOverride
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_CmdOverride, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("CmdOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "CmdOverride"));
            pChild->setAccessLevel(3);
            pChild->setUserAccessLevel(3);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_CmdOverride_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pCmdOverride = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCmdOverride, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pCmdOverride->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable CmdSpeed
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_CmdSpeed, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("CmdSpeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "CmdSpeed"));
            pChild->setAccessLevel(3);
            pChild->setUserAccessLevel(3);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncSpindleType_CmdSpeed_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pCmdSpeed = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCmdSpeed, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pCmdSpeed->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

    }
}

/** Clear the static members of the class
*/
void CncSpindleTypeBase::clearStaticMembers()
{
    s_typeNodesCreated = false;

    s_pActChuckPowerStatus = NULL;
    s_pActGear = NULL;
    s_pActOverride = NULL;
    s_pActSpeed = NULL;
    s_pActStatus = NULL;
    s_pActTurnDirection = NULL;
    s_pAnglePos = NULL;
    s_pCmdGear = NULL;
    s_pCmdOverride = NULL;
    s_pCmdSpeed = NULL;
}

/** Returns the type definition NodeId for the CncSpindleType
*/
UaNodeId CncSpindleTypeBase::typeDefinitionId() const
{
    UaNodeId ret(OpcUaCncId_CncSpindleType, NodeManagerCNC::getTypeNamespace());
    return ret;
}

/**
 *  Sets the ActChuckPowerStatus value
 */
void CncSpindleTypeBase::setActChuckPowerStatus(OpcUa_Boolean ActChuckPowerStatus)
{
    UaVariant value;
    value.setBool(ActChuckPowerStatus);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActChuckPowerStatus->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActChuckPowerStatus
 */
OpcUa_Boolean CncSpindleTypeBase::getActChuckPowerStatus() const
{
    UaVariant defaultValue;
    OpcUa_Boolean ret = OpcUa_False;
    UaDataValue dataValue(m_pActChuckPowerStatus->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toBool(ret);
    return ret;
}

/**
 *  Sets the ActGear value
 */
void CncSpindleTypeBase::setActGear(OpcUa_UInt32 ActGear)
{
    UaVariant value;
    value.setUInt32(ActGear);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActGear->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActGear
 */
OpcUa_UInt32 CncSpindleTypeBase::getActGear() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pActGear->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/**
 *  Sets the ActOverride value
 */
void CncSpindleTypeBase::setActOverride(OpcUa_Double ActOverride)
{
    UaVariant value;
    value.setDouble(ActOverride);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActOverride->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActOverride
 */
OpcUa_Double CncSpindleTypeBase::getActOverride() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActOverride->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActSpeed value
 */
void CncSpindleTypeBase::setActSpeed(OpcUa_Double ActSpeed)
{
    UaVariant value;
    value.setDouble(ActSpeed);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActSpeed->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActSpeed
 */
OpcUa_Double CncSpindleTypeBase::getActSpeed() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActSpeed->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActStatus value
 */
void CncSpindleTypeBase::setActStatus(OpcUaCnc::CncSpindleStatus ActStatus)
{
    UaVariant value;
    value.setInt32(ActStatus);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActStatus->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActStatus
 */
OpcUaCnc::CncSpindleStatus CncSpindleTypeBase::getActStatus() const
{
    UaVariant defaultValue;
    OpcUaCnc::CncSpindleStatus ret = (OpcUaCnc::CncSpindleStatus)0;
    UaDataValue dataValue(m_pActStatus->value(NULL));
    defaultValue = *dataValue.value();
    OpcUa_Int32 i = (OpcUa_Int32) (OpcUaCnc::CncSpindleStatus)0;
    defaultValue.toInt32(i);
    ret = (OpcUaCnc::CncSpindleStatus) i;
    return ret;
}

/**
 *  Sets the ActTurnDirection value
 */
void CncSpindleTypeBase::setActTurnDirection(OpcUaCnc::CncSpindleTurnDirection ActTurnDirection)
{
    UaVariant value;
    value.setInt32(ActTurnDirection);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActTurnDirection->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActTurnDirection
 */
OpcUaCnc::CncSpindleTurnDirection CncSpindleTypeBase::getActTurnDirection() const
{
    UaVariant defaultValue;
    OpcUaCnc::CncSpindleTurnDirection ret = (OpcUaCnc::CncSpindleTurnDirection)0;
    UaDataValue dataValue(m_pActTurnDirection->value(NULL));
    defaultValue = *dataValue.value();
    OpcUa_Int32 i = (OpcUa_Int32) (OpcUaCnc::CncSpindleTurnDirection)0;
    defaultValue.toInt32(i);
    ret = (OpcUaCnc::CncSpindleTurnDirection) i;
    return ret;
}

/**
 *  Sets the AnglePos value
 */
void CncSpindleTypeBase::setAnglePos(const OpcUaCnc::CncPositionType& AnglePos)
{
    UaDataValue dataValue;
    AnglePos.toDataValue(dataValue, OpcUa_True);
    m_pAnglePos->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of AnglePos
 */
OpcUaCnc::CncPositionType CncSpindleTypeBase::getAnglePos() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pAnglePos->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the CmdGear value
 */
void CncSpindleTypeBase::setCmdGear(OpcUa_UInt32 CmdGear)
{
    UaVariant value;
    value.setUInt32(CmdGear);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pCmdGear->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of CmdGear
 */
OpcUa_UInt32 CncSpindleTypeBase::getCmdGear() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pCmdGear->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/**
 *  Sets the CmdOverride value
 */
void CncSpindleTypeBase::setCmdOverride(OpcUa_Double CmdOverride)
{
    UaVariant value;
    value.setDouble(CmdOverride);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pCmdOverride->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of CmdOverride
 */
OpcUa_Double CncSpindleTypeBase::getCmdOverride() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pCmdOverride->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the CmdSpeed value
 */
void CncSpindleTypeBase::setCmdSpeed(OpcUa_Double CmdSpeed)
{
    UaVariant value;
    value.setDouble(CmdSpeed);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pCmdSpeed->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of CmdSpeed
 */
OpcUa_Double CncSpindleTypeBase::getCmdSpeed() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pCmdSpeed->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/** Returns the ActChuckPowerStatus node.
 */
OpcUa::DataItemType* CncSpindleTypeBase::getActChuckPowerStatusNode()
{
    return m_pActChuckPowerStatus;
}

/** Returns the ActChuckPowerStatus node.
 */
const OpcUa::DataItemType* CncSpindleTypeBase::getActChuckPowerStatusNode() const
{
    return m_pActChuckPowerStatus;
}

/** Returns the ActGear node.
 */
OpcUa::DataItemType* CncSpindleTypeBase::getActGearNode()
{
    return m_pActGear;
}

/** Returns the ActGear node.
 */
const OpcUa::DataItemType* CncSpindleTypeBase::getActGearNode() const
{
    return m_pActGear;
}

/** Returns the ActOverride node.
 */
OpcUa::AnalogItemType* CncSpindleTypeBase::getActOverrideNode()
{
    return m_pActOverride;
}

/** Returns the ActOverride node.
 */
const OpcUa::AnalogItemType* CncSpindleTypeBase::getActOverrideNode() const
{
    return m_pActOverride;
}

/** Returns the ActSpeed node.
 */
OpcUa::AnalogItemType* CncSpindleTypeBase::getActSpeedNode()
{
    return m_pActSpeed;
}

/** Returns the ActSpeed node.
 */
const OpcUa::AnalogItemType* CncSpindleTypeBase::getActSpeedNode() const
{
    return m_pActSpeed;
}

/** Returns the ActStatus node.
 */
OpcUa::DataItemType* CncSpindleTypeBase::getActStatusNode()
{
    return m_pActStatus;
}

/** Returns the ActStatus node.
 */
const OpcUa::DataItemType* CncSpindleTypeBase::getActStatusNode() const
{
    return m_pActStatus;
}

/** Returns the ActTurnDirection node.
 */
OpcUa::DataItemType* CncSpindleTypeBase::getActTurnDirectionNode()
{
    return m_pActTurnDirection;
}

/** Returns the ActTurnDirection node.
 */
const OpcUa::DataItemType* CncSpindleTypeBase::getActTurnDirectionNode() const
{
    return m_pActTurnDirection;
}

/** Returns the AnglePos node.
 */
OpcUaCnc::CncPositionVariableType* CncSpindleTypeBase::getAnglePosNode()
{
    return m_pAnglePos;
}

/** Returns the AnglePos node.
 */
const OpcUaCnc::CncPositionVariableType* CncSpindleTypeBase::getAnglePosNode() const
{
    return m_pAnglePos;
}

/** Returns the CmdGear node.
 */
OpcUa::DataItemType* CncSpindleTypeBase::getCmdGearNode()
{
    return m_pCmdGear;
}

/** Returns the CmdGear node.
 */
const OpcUa::DataItemType* CncSpindleTypeBase::getCmdGearNode() const
{
    return m_pCmdGear;
}

/** Returns the CmdOverride node.
 */
OpcUa::AnalogItemType* CncSpindleTypeBase::getCmdOverrideNode()
{
    return m_pCmdOverride;
}

/** Returns the CmdOverride node.
 */
const OpcUa::AnalogItemType* CncSpindleTypeBase::getCmdOverrideNode() const
{
    return m_pCmdOverride;
}

/** Returns the CmdSpeed node.
 */
OpcUa::AnalogItemType* CncSpindleTypeBase::getCmdSpeedNode()
{
    return m_pCmdSpeed;
}

/** Returns the CmdSpeed node.
 */
const OpcUa::AnalogItemType* CncSpindleTypeBase::getCmdSpeedNode() const
{
    return m_pCmdSpeed;
}


/** Applies the NodeAccessInfo set at the CncSpindleTypeBase and its children. */
void CncSpindleTypeBase::useAccessInfoFromType()
{
    OpcUaCnc::CncDriveType::useAccessInfoFromType();

    // instance node
    OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
    UaNode *pTypeNode = NodeManagerRoot::CreateRootNodeManager()->getNode(UaNodeId(OpcUaCncId_CncSpindleType, nsTypeIdx));
    if (pTypeNode)
    {
        useAccessInfoFrom(pTypeNode);
        pTypeNode->releaseReference();
    }

    // children
    m_pActChuckPowerStatus->useAccessInfoFromInstance(s_pActChuckPowerStatus);
    m_pActGear->useAccessInfoFromInstance(s_pActGear);
    m_pActOverride->useAccessInfoFromInstance(s_pActOverride);
    m_pActSpeed->useAccessInfoFromInstance(s_pActSpeed);
    m_pActStatus->useAccessInfoFromInstance(s_pActStatus);
    m_pActTurnDirection->useAccessInfoFromInstance(s_pActTurnDirection);
    m_pAnglePos->useAccessInfoFromInstance(s_pAnglePos);
    m_pCmdGear->useAccessInfoFromInstance(s_pCmdGear);
    m_pCmdOverride->useAccessInfoFromInstance(s_pCmdOverride);
    m_pCmdSpeed->useAccessInfoFromInstance(s_pCmdSpeed);
}

/** Uses the NodeAccessInfo of pOther and its children. */
void CncSpindleTypeBase::useAccessInfoFromInstance(CncSpindleTypeBase *pOther)
{
    OpcUaCnc::CncDriveType::useAccessInfoFromInstance(pOther);

    // children
    m_pActChuckPowerStatus->useAccessInfoFromInstance(pOther->m_pActChuckPowerStatus);
    m_pActGear->useAccessInfoFromInstance(pOther->m_pActGear);
    m_pActOverride->useAccessInfoFromInstance(pOther->m_pActOverride);
    m_pActSpeed->useAccessInfoFromInstance(pOther->m_pActSpeed);
    m_pActStatus->useAccessInfoFromInstance(pOther->m_pActStatus);
    m_pActTurnDirection->useAccessInfoFromInstance(pOther->m_pActTurnDirection);
    m_pAnglePos->useAccessInfoFromInstance(pOther->m_pAnglePos);
    m_pCmdGear->useAccessInfoFromInstance(pOther->m_pCmdGear);
    m_pCmdOverride->useAccessInfoFromInstance(pOther->m_pCmdOverride);
    m_pCmdSpeed->useAccessInfoFromInstance(pOther->m_pCmdSpeed);
}

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/


