/******************************************************************************
** opcuacnc_instancefactory_cnc.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/


#include "opcuacnc_instancefactory_cnc.h"
#include "opcuacnc_identifiers.h"
#include "opcuacnc_cncpositionvariabletype.h"
#include "opcuacnc_cncalarmtype.h"
#include "opcuacnc_cncmessagetype.h"
#include "opcuacnc_cncaxislisttype.h"
#include "opcuacnc_cncchannellisttype.h"
#include "opcuacnc_cnccomponenttype.h"
#include "opcuacnc_cncchanneltype.h"
#include "opcuacnc_cncdrivetype.h"
#include "opcuacnc_cncaxistype.h"
#include "opcuacnc_cncspindletype.h"
#include "opcuacnc_cncinterfacetype.h"
#include "opcuacnc_cncspindlelisttype.h"
#include "opcuacnc_datatypes.h"
#include "opcuacnc_cncpositiontype.h"


namespace OpcUaCnc
{

InstanceFactoryCNC::InstanceFactoryCNC(OpcUa_UInt16 namespaceIndex)
: XmlUaNodeFactoryNamespace(namespaceIndex)
{
}

OpcUa::BaseVariableType* InstanceFactoryCNC::createVariable(
    UaBase::Variable *pVariable,
    XmlUaNodeFactoryManager *pFactory,
    NodeManagerConfig* pNodeConfig,
    UaMutexRefCounted* pSharedMutex)
{
    UA_ASSERT(pVariable->typeDefinitionId().namespaceIndex() == namespaceIndex());
    if (pVariable->typeDefinitionId().namespaceIndex() == namespaceIndex())
    {
        switch (pVariable->typeDefinitionId().identifierNumeric())
        {
        case OpcUaCncId_CncPositionVariableType:
            return new OpcUaCnc::CncPositionVariableType(pVariable, pFactory, pNodeConfig, pSharedMutex);
        default:
            UA_ASSERT(false);
            return createGenericVariable(pVariable, pFactory, pNodeConfig, pSharedMutex);
        }
    }
    return NULL;
}

OpcUa::BaseObjectType* InstanceFactoryCNC::createObject(
    UaBase::Object *pObject,
    XmlUaNodeFactoryManager *pFactory,
    NodeManagerConfig* pNodeConfig,
    UaMutexRefCounted* pSharedMutex)
{
    UA_ASSERT(pObject->typeDefinitionId().namespaceIndex() == namespaceIndex());
    if (pObject->typeDefinitionId().namespaceIndex() == namespaceIndex())
    {
        switch (pObject->typeDefinitionId().identifierNumeric())
        {
        case OpcUaCncId_CncAlarmType:
            return new OpcUaCnc::CncAlarmType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncMessageType:
            return new OpcUaCnc::CncMessageType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncAxisListType:
            return new OpcUaCnc::CncAxisListType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncChannelListType:
            return new OpcUaCnc::CncChannelListType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncComponentType:
            return new OpcUaCnc::CncComponentType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncChannelType:
            return new OpcUaCnc::CncChannelType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncDriveType:
            return new OpcUaCnc::CncDriveType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncAxisType:
            return new OpcUaCnc::CncAxisType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncSpindleType:
            return new OpcUaCnc::CncSpindleType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncInterfaceType:
            return new OpcUaCnc::CncInterfaceType(pObject, pFactory, pNodeConfig, pSharedMutex);
        case OpcUaCncId_CncSpindleListType:
            return new OpcUaCnc::CncSpindleListType(pObject, pFactory, pNodeConfig, pSharedMutex);
        default:
            UA_ASSERT(false);
            return createGenericObject(pObject, pFactory, pNodeConfig, pSharedMutex);
        }
    }
    return NULL;
}

/**Returns default values for all data types provided by the Namespace http://opcfoundation.org/UA/CNC/ */
UaVariant InstanceFactoryCNC::defaultValue(const UaNodeId &dataTypeId, OpcUa_Int32 valueRank) const
{
    UA_ASSERT(dataTypeId.namespaceIndex() == namespaceIndex());
    UaVariant value;
    if (dataTypeId.namespaceIndex() == namespaceIndex())
    {
        if (valueRank == -1)
        {
            switch (dataTypeId.identifierNumeric())
            {
            case OpcUaCncId_CncAxisStatus:
                value.setInt32((OpcUa_Int32)CncAxisStatus_InPosition);
                break;
            case OpcUaCncId_CncChannelProgramStatus:
                value.setInt32((OpcUa_Int32)CncChannelProgramStatus_Stopped);
                break;
            case OpcUaCncId_CncChannelStatus:
                value.setInt32((OpcUa_Int32)CncChannelStatus_Active);
                break;
            case OpcUaCncId_CncOperationMode:
                value.setInt32((OpcUa_Int32)CncOperationMode_Manual);
                break;
            case OpcUaCncId_CncSpindleStatus:
                value.setInt32((OpcUa_Int32)CncSpindleStatus_Stopped);
                break;
            case OpcUaCncId_CncSpindleTurnDirection:
                value.setInt32((OpcUa_Int32)CncSpindleTurnDirection_None);
                break;
            case OpcUaCncId_CncPositionType:
            {
                CncPositionType tmp;
                tmp.toVariant(value);
                break;
            }
            default:
                UA_ASSERT(false);
                break;
            }
        }
        else if (valueRank == 1)
        {
            switch (dataTypeId.identifierNumeric())
            {
            case OpcUaCncId_CncAxisStatus:
                {
                    UaInt32Array int32Array;
                    value.setInt32Array(int32Array, OpcUa_True);
                }
                break;
            case OpcUaCncId_CncChannelProgramStatus:
                {
                    UaInt32Array int32Array;
                    value.setInt32Array(int32Array, OpcUa_True);
                }
                break;
            case OpcUaCncId_CncChannelStatus:
                {
                    UaInt32Array int32Array;
                    value.setInt32Array(int32Array, OpcUa_True);
                }
                break;
            case OpcUaCncId_CncOperationMode:
                {
                    UaInt32Array int32Array;
                    value.setInt32Array(int32Array, OpcUa_True);
                }
                break;
            case OpcUaCncId_CncSpindleStatus:
                {
                    UaInt32Array int32Array;
                    value.setInt32Array(int32Array, OpcUa_True);
                }
                break;
            case OpcUaCncId_CncSpindleTurnDirection:
                {
                    UaInt32Array int32Array;
                    value.setInt32Array(int32Array, OpcUa_True);
                }
                break;
            case OpcUaCncId_CncPositionType:
            {
                CncPositionTypes tmp;
                tmp.toVariant(value);
                break;
            }
            default:
                UA_ASSERT(false);
                break;
            }
        }
    }
    return value;
}

};
