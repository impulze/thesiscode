/******************************************************************************
** opcuacnc_cncdrivetypebase.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#include "opcuacnc_cncdrivetypebase.h"
#include "opcuacnc_cncdrivetype.h"
#include "uagenericnodes.h"
#include "nodemanagerroot.h"
#include "methodhandleuanode.h"
#include "opcuacnc_nodemanagercnc.h"

#include "instancefactory.h"
// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

bool CncDriveTypeBase::s_typeNodesCreated = false;
OpcUa::DataItemType* CncDriveTypeBase::s_pActChannel = NULL;
OpcUa::AnalogItemType* CncDriveTypeBase::s_pActLoad = NULL;
OpcUa::AnalogItemType* CncDriveTypeBase::s_pActPower = NULL;
OpcUa::AnalogItemType* CncDriveTypeBase::s_pActTorque = NULL;
OpcUa::AnalogItemType* CncDriveTypeBase::s_pCmdTorque = NULL;
OpcUa::DataItemType* CncDriveTypeBase::s_pIsInactive = NULL;
OpcUa::DataItemType* CncDriveTypeBase::s_pIsVirtual = NULL;

/** Constructs an CncDriveType object using an instance declaration node as base
*/
CncDriveTypeBase::CncDriveTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUaCnc::CncComponentType(nodeId, pInstanceDeclarationObject, pNodeConfig, pSharedMutex)
{
    initialize();
}

/** Constructs an CncDriveType object
*/
CncDriveTypeBase::CncDriveTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUaCnc::CncComponentType(nodeId, name, browseNameNameSpaceIndex, pNodeConfig, pSharedMutex)
{
    initialize();
}

/**  Constructs an instance of the class CncDriveTypeBase with all components
*/
CncDriveTypeBase::CncDriveTypeBase(
    UaBase::Object*    pBaseNode,    //!< [in] The "tree" of nodes that specifies the attributes of the instance and its children
    XmlUaNodeFactoryManager* pFactory, //!< [in] The factory to create the children
    NodeManagerConfig* pNodeConfig,  //!< [in] Interface pointer to the NodeManagerConfig interface used to add and delete node and references in the address space
    UaMutexRefCounted* pSharedMutex) //!< [in] Shared mutex object used to synchronize access to the variable. Can be NULL if no shared mutex is provided
: OpcUaCnc::CncComponentType(pBaseNode, pFactory, pNodeConfig, pSharedMutex)
{
    UaStatus      addStatus;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }

    m_pActChannel = NULL;
    m_pActLoad = NULL;
    m_pActPower = NULL;
    m_pActTorque = NULL;
    m_pCmdTorque = NULL;
    m_pIsInactive = NULL;
    m_pIsVirtual = NULL;

    std::list<UaBase::BaseNode*> lstReferencedNodes = pBaseNode->hierarchicallyReferencedNodes();
    for (std::list<UaBase::BaseNode*>::const_iterator it = lstReferencedNodes.begin(); it != lstReferencedNodes.end(); it++)
    {
        UaBase::BaseNode *pChild = *it;
        if (pChild->browseName() == UaQualifiedName("ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActChannel)
            {
                m_pActChannel = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActChannel, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActChannel->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActLoad)
            {
                m_pActLoad = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActLoad, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActLoad->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActPower)
            {
                m_pActPower = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActPower, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActPower->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActTorque)
            {
                m_pActTorque = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActTorque, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActTorque->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCmdTorque)
            {
                m_pCmdTorque = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCmdTorque, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pCmdTorque->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pIsInactive)
            {
                m_pIsInactive = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pIsInactive, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pIsInactive->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pIsVirtual)
            {
                m_pIsVirtual = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pIsVirtual, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pIsVirtual->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
    }
    UA_ASSERT(m_pActChannel);
    UA_ASSERT(m_pActLoad);
    UA_ASSERT(m_pActPower);
    UA_ASSERT(m_pActTorque);
    UA_ASSERT(m_pCmdTorque);
    UA_ASSERT(m_pIsInactive);
    UA_ASSERT(m_pIsVirtual);
}

/** Initialize the object with all member nodes
*/
void CncDriveTypeBase::initialize()
{
    UaStatus      addStatus;
    UaVariant     defaultValue;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }
    // Mandatory variable ActChannel
    m_pActChannel = new OpcUa::DataItemType(this, s_pActChannel, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActChannel, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActLoad
    m_pActLoad = new OpcUa::AnalogItemType(this, s_pActLoad, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActLoad, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActPower
    m_pActPower = new OpcUa::AnalogItemType(this, s_pActPower, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActPower, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActTorque
    m_pActTorque = new OpcUa::AnalogItemType(this, s_pActTorque, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActTorque, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable CmdTorque
    m_pCmdTorque = new OpcUa::AnalogItemType(this, s_pCmdTorque, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCmdTorque, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable IsInactive
    m_pIsInactive = new OpcUa::DataItemType(this, s_pIsInactive, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pIsInactive, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable IsVirtual
    m_pIsVirtual = new OpcUa::DataItemType(this, s_pIsVirtual, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pIsVirtual, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());


}

/** Destruction
*/
CncDriveTypeBase::~CncDriveTypeBase()
{
}

/** Create the related type nodes
*/
void CncDriveTypeBase::createTypes()
{
    if ( s_typeNodesCreated == false )
    {
        s_typeNodesCreated = true;

        // Check if supertype is already created
        OpcUaCnc::CncComponentType::createTypes();

        UaStatus      addStatus;
        UaVariant     defaultValue;
        NodeManagerRoot* pNodeManagerRoot = NodeManagerRoot::CreateRootNodeManager();
        OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
        OpcUa_Int16 nsSuperTypeIdx = OpcUaCnc::NodeManagerCNC::getTypeNamespace();
        NodeManagerConfig* pTypeNodeConfig = pNodeManagerRoot->getNodeManagerByNamespace(nsTypeIdx)->getNodeManagerConfig();

        OpcUa::GenericObjectType* pObjectType;
        pObjectType = new OpcUa::GenericObjectType(
            UaNodeId(OpcUaCncId_CncDriveType, nsTypeIdx),
            UaQualifiedName("CncDriveType", nsTypeIdx),
            UaLocalizedText("", "CncDriveType"),
            UaLocalizedText("", ""),
            OpcUa_True,
            &CncDriveType::clearStaticMembers);
        pTypeNodeConfig->addNodeAndReference(UaNodeId(OpcUaCncId_CncComponentType, nsSuperTypeIdx), pObjectType, OpcUaId_HasSubtype);

        // Mandatory variable ActChannel
        defaultValue.setNodeId(UaNodeId());
        s_pActChannel = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncDriveType_ActChannel, nsTypeIdx), "ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActChannel->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActChannel->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActChannel, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActLoad
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_ActLoad, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActLoad"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_ActLoad_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActLoad = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActLoad, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActLoad->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActPower
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_ActPower, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActPower"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_ActPower_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActPower = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActPower, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActPower->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActTorque
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_ActTorque, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActTorque"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_ActTorque_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActTorque = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActTorque, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActTorque->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable CmdTorque
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_CmdTorque, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "CmdTorque"));
            pChild->setAccessLevel(3);
            pChild->setUserAccessLevel(3);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncDriveType_CmdTorque_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pCmdTorque = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCmdTorque, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pCmdTorque->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable IsInactive
        defaultValue.setBool(OpcUa_False);
        s_pIsInactive = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncDriveType_IsInactive, nsTypeIdx), "IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pIsInactive->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pIsInactive->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pIsInactive, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable IsVirtual
        defaultValue.setBool(OpcUa_False);
        s_pIsVirtual = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncDriveType_IsVirtual, nsTypeIdx), "IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pIsVirtual->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pIsVirtual->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pIsVirtual, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

    }
}

/** Clear the static members of the class
*/
void CncDriveTypeBase::clearStaticMembers()
{
    s_typeNodesCreated = false;

    s_pActChannel = NULL;
    s_pActLoad = NULL;
    s_pActPower = NULL;
    s_pActTorque = NULL;
    s_pCmdTorque = NULL;
    s_pIsInactive = NULL;
    s_pIsVirtual = NULL;
}

/** Returns the type definition NodeId for the CncDriveType
*/
UaNodeId CncDriveTypeBase::typeDefinitionId() const
{
    UaNodeId ret(OpcUaCncId_CncDriveType, NodeManagerCNC::getTypeNamespace());
    return ret;
}

/**
 *  Sets the ActChannel value
 */
void CncDriveTypeBase::setActChannel(const UaNodeId& ActChannel)
{
    UaVariant value;
    value.setNodeId(ActChannel);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActChannel->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActChannel
 */
UaNodeId CncDriveTypeBase::getActChannel() const
{
    UaVariant defaultValue;
    UaNodeId ret;
    UaDataValue dataValue(m_pActChannel->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toNodeId(ret);
    return ret;
}

/**
 *  Sets the ActLoad value
 */
void CncDriveTypeBase::setActLoad(OpcUa_Double ActLoad)
{
    UaVariant value;
    value.setDouble(ActLoad);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActLoad->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActLoad
 */
OpcUa_Double CncDriveTypeBase::getActLoad() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActLoad->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActPower value
 */
void CncDriveTypeBase::setActPower(OpcUa_Double ActPower)
{
    UaVariant value;
    value.setDouble(ActPower);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActPower->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActPower
 */
OpcUa_Double CncDriveTypeBase::getActPower() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActPower->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActTorque value
 */
void CncDriveTypeBase::setActTorque(OpcUa_Double ActTorque)
{
    UaVariant value;
    value.setDouble(ActTorque);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActTorque->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActTorque
 */
OpcUa_Double CncDriveTypeBase::getActTorque() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActTorque->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the CmdTorque value
 */
void CncDriveTypeBase::setCmdTorque(OpcUa_Double CmdTorque)
{
    UaVariant value;
    value.setDouble(CmdTorque);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pCmdTorque->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of CmdTorque
 */
OpcUa_Double CncDriveTypeBase::getCmdTorque() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pCmdTorque->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the IsInactive value
 */
void CncDriveTypeBase::setIsInactive(OpcUa_Boolean IsInactive)
{
    UaVariant value;
    value.setBool(IsInactive);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pIsInactive->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of IsInactive
 */
OpcUa_Boolean CncDriveTypeBase::getIsInactive() const
{
    UaVariant defaultValue;
    OpcUa_Boolean ret = OpcUa_False;
    UaDataValue dataValue(m_pIsInactive->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toBool(ret);
    return ret;
}

/**
 *  Sets the IsVirtual value
 */
void CncDriveTypeBase::setIsVirtual(OpcUa_Boolean IsVirtual)
{
    UaVariant value;
    value.setBool(IsVirtual);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pIsVirtual->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of IsVirtual
 */
OpcUa_Boolean CncDriveTypeBase::getIsVirtual() const
{
    UaVariant defaultValue;
    OpcUa_Boolean ret = OpcUa_False;
    UaDataValue dataValue(m_pIsVirtual->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toBool(ret);
    return ret;
}

/** Returns the ActChannel node.
 */
OpcUa::DataItemType* CncDriveTypeBase::getActChannelNode()
{
    return m_pActChannel;
}

/** Returns the ActChannel node.
 */
const OpcUa::DataItemType* CncDriveTypeBase::getActChannelNode() const
{
    return m_pActChannel;
}

/** Returns the ActLoad node.
 */
OpcUa::AnalogItemType* CncDriveTypeBase::getActLoadNode()
{
    return m_pActLoad;
}

/** Returns the ActLoad node.
 */
const OpcUa::AnalogItemType* CncDriveTypeBase::getActLoadNode() const
{
    return m_pActLoad;
}

/** Returns the ActPower node.
 */
OpcUa::AnalogItemType* CncDriveTypeBase::getActPowerNode()
{
    return m_pActPower;
}

/** Returns the ActPower node.
 */
const OpcUa::AnalogItemType* CncDriveTypeBase::getActPowerNode() const
{
    return m_pActPower;
}

/** Returns the ActTorque node.
 */
OpcUa::AnalogItemType* CncDriveTypeBase::getActTorqueNode()
{
    return m_pActTorque;
}

/** Returns the ActTorque node.
 */
const OpcUa::AnalogItemType* CncDriveTypeBase::getActTorqueNode() const
{
    return m_pActTorque;
}

/** Returns the CmdTorque node.
 */
OpcUa::AnalogItemType* CncDriveTypeBase::getCmdTorqueNode()
{
    return m_pCmdTorque;
}

/** Returns the CmdTorque node.
 */
const OpcUa::AnalogItemType* CncDriveTypeBase::getCmdTorqueNode() const
{
    return m_pCmdTorque;
}

/** Returns the IsInactive node.
 */
OpcUa::DataItemType* CncDriveTypeBase::getIsInactiveNode()
{
    return m_pIsInactive;
}

/** Returns the IsInactive node.
 */
const OpcUa::DataItemType* CncDriveTypeBase::getIsInactiveNode() const
{
    return m_pIsInactive;
}

/** Returns the IsVirtual node.
 */
OpcUa::DataItemType* CncDriveTypeBase::getIsVirtualNode()
{
    return m_pIsVirtual;
}

/** Returns the IsVirtual node.
 */
const OpcUa::DataItemType* CncDriveTypeBase::getIsVirtualNode() const
{
    return m_pIsVirtual;
}


/** Applies the NodeAccessInfo set at the CncDriveTypeBase and its children. */
void CncDriveTypeBase::useAccessInfoFromType()
{
    OpcUaCnc::CncComponentType::useAccessInfoFromType();

    // instance node
    OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
    UaNode *pTypeNode = NodeManagerRoot::CreateRootNodeManager()->getNode(UaNodeId(OpcUaCncId_CncDriveType, nsTypeIdx));
    if (pTypeNode)
    {
        useAccessInfoFrom(pTypeNode);
        pTypeNode->releaseReference();
    }

    // children
    m_pActChannel->useAccessInfoFromInstance(s_pActChannel);
    m_pActLoad->useAccessInfoFromInstance(s_pActLoad);
    m_pActPower->useAccessInfoFromInstance(s_pActPower);
    m_pActTorque->useAccessInfoFromInstance(s_pActTorque);
    m_pCmdTorque->useAccessInfoFromInstance(s_pCmdTorque);
    m_pIsInactive->useAccessInfoFromInstance(s_pIsInactive);
    m_pIsVirtual->useAccessInfoFromInstance(s_pIsVirtual);
}

/** Uses the NodeAccessInfo of pOther and its children. */
void CncDriveTypeBase::useAccessInfoFromInstance(CncDriveTypeBase *pOther)
{
    OpcUaCnc::CncComponentType::useAccessInfoFromInstance(pOther);

    // children
    m_pActChannel->useAccessInfoFromInstance(pOther->m_pActChannel);
    m_pActLoad->useAccessInfoFromInstance(pOther->m_pActLoad);
    m_pActPower->useAccessInfoFromInstance(pOther->m_pActPower);
    m_pActTorque->useAccessInfoFromInstance(pOther->m_pActTorque);
    m_pCmdTorque->useAccessInfoFromInstance(pOther->m_pCmdTorque);
    m_pIsInactive->useAccessInfoFromInstance(pOther->m_pIsInactive);
    m_pIsVirtual->useAccessInfoFromInstance(pOther->m_pIsVirtual);
}

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/


