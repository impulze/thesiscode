/******************************************************************************
** opcuacnc_cncchanneltypebase.h
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#ifndef __OPCUACNC_CNCCHANNELTYPEBASE_H__
#define __OPCUACNC_CNCCHANNELTYPEBASE_H__

#include "opcuacnc_cnccomponenttype.h"
#include "opcuacnc_datatypes.h"
#include "basenodes.h"
#include "opcua_analogitemtype.h"
#include "opcua_basedatavariabletype.h"
#include "opcua_dataitemtype.h"
#include "opcua_propertytype.h"
#include "opcuacnc_cncpositiontype.h"
#include "opcuacnc_identifiers.h"
#include "opcuacnc_instancefactory_cnc.h"
#include "uaeuinformation.h"
#include "uarange.h"

// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

class CncAxisType;
class CncPositionVariableType;
class CncSpindleType;

/** Generated base class for a CncChannelType.
 *
 *  This class contains the generated base code for the object type CncChannelType
 *  representing an OPC UA ObjectType. This class is used to create the object type and to
 *  create and represent instances of the object type in the server address space.
 *
 *  **Object members of the CncChannelType:**
 *
 *  Browse Name    | TypeDefinition | Modelling Rule      | See Also
 *  ---------------|----------------|---------------------|---------
 *  \<CncAxis\>    | CncAxisType    | OptionalPlaceholder | &nbsp;
 *  \<CncSpindle\> | CncSpindleType | OptionalPlaceholder | &nbsp;
 *
 *  **Variable members of the CncChannelType:**
 *
 *  Browse Name              | DataType                | TypeDefinition          | Modelling Rule | See Also
 *  -------------------------|-------------------------|-------------------------|----------------|-------------------------------------------------------------------
 *  ActFeedrate              | Double                  | AnalogItemType          | Mandatory      | \ref getActFeedrate, \ref setActFeedrate
 *  ActGFunctions            | UInt32                  | DataItemType            | Mandatory      | \ref getActGFunctions, \ref setActGFunctions
 *  ActJogIncrement          | Double                  | AnalogItemType          | Mandatory      | \ref getActJogIncrement, \ref setActJogIncrement
 *  ActMainProgramFile       | String                  | DataItemType            | Mandatory      | \ref getActMainProgramFile, \ref setActMainProgramFile
 *  ActMainProgramFileOffset | UInt32                  | DataItemType            | Mandatory      | \ref getActMainProgramFileOffset, \ref setActMainProgramFileOffset
 *  ActMainProgramLine       | String                  | DataItemType            | Mandatory      | \ref getActMainProgramLine, \ref setActMainProgramLine
 *  ActMainProgramName       | String                  | DataItemType            | Mandatory      | \ref getActMainProgramName, \ref setActMainProgramName
 *  ActMFunctions            | UInt32                  | DataItemType            | Mandatory      | \ref getActMFunctions, \ref setActMFunctions
 *  ActModalOffsetFunction   | UInt32                  | DataItemType            | Mandatory      | \ref getActModalOffsetFunction, \ref setActModalOffsetFunction
 *  ActOperationMode         | CncOperationMode        | DataItemType            | Mandatory      | \ref getActOperationMode, \ref setActOperationMode
 *  ActOverride              | Double                  | AnalogItemType          | Mandatory      | \ref getActOverride, \ref setActOverride
 *  ActProgramBlock          | String                  | DataItemType            | Mandatory      | \ref getActProgramBlock, \ref setActProgramBlock
 *  ActProgramFile           | String                  | DataItemType            | Mandatory      | \ref getActProgramFile, \ref setActProgramFile
 *  ActProgramFileOffset     | UInt32                  | DataItemType            | Mandatory      | \ref getActProgramFileOffset, \ref setActProgramFileOffset
 *  ActProgramLine           | String                  | DataItemType            | Mandatory      | \ref getActProgramLine, \ref setActProgramLine
 *  ActProgramName           | String                  | DataItemType            | Mandatory      | \ref getActProgramName, \ref setActProgramName
 *  ActProgramStatus         | CncChannelProgramStatus | DataItemType            | Mandatory      | \ref getActProgramStatus, \ref setActProgramStatus
 *  ActStatus                | CncChannelStatus        | DataItemType            | Mandatory      | \ref getActStatus, \ref setActStatus
 *  BlockMode                | Boolean                 | DataItemType            | Mandatory      | \ref getBlockMode, \ref setBlockMode
 *  CmdFeedrate              | Double                  | AnalogItemType          | Mandatory      | \ref getCmdFeedrate, \ref setCmdFeedrate
 *  CmdOverride              | Double                  | AnalogItemType          | Mandatory      | \ref getCmdOverride, \ref setCmdOverride
 *  DryRunFeed               | Double                  | AnalogItemType          | Mandatory      | \ref getDryRunFeed, \ref setDryRunFeed
 *  FeedHold                 | Double                  | DataItemType            | Mandatory      | \ref getFeedHold, \ref setFeedHold
 *  Id                       | UInt32                  | DataItemType            | Mandatory      | \ref getId, \ref setId
 *  PosTcpBcsA               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpBcsA, \ref setPosTcpBcsA
 *  PosTcpBcsB               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpBcsB, \ref setPosTcpBcsB
 *  PosTcpBcsC               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpBcsC, \ref setPosTcpBcsC
 *  PosTcpBcsX               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpBcsX, \ref setPosTcpBcsX
 *  PosTcpBcsY               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpBcsY, \ref setPosTcpBcsY
 *  PosTcpBcsZ               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpBcsZ, \ref setPosTcpBcsZ
 *  PosTcpWcsA               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpWcsA, \ref setPosTcpWcsA
 *  PosTcpWcsB               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpWcsB, \ref setPosTcpWcsB
 *  PosTcpWcsC               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpWcsC, \ref setPosTcpWcsC
 *  PosTcpWcsX               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpWcsX, \ref setPosTcpWcsX
 *  PosTcpWcsY               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpWcsY, \ref setPosTcpWcsY
 *  PosTcpWcsZ               | CncPositionType         | CncPositionVariableType | Mandatory      | \ref getPosTcpWcsZ, \ref setPosTcpWcsZ
 *  ToolId                   | UInt32                  | DataItemType            | Mandatory      | \ref getToolId, \ref setToolId
 *
 */
class UAMODELS_EXPORT CncChannelTypeBase:
    public OpcUaCnc::CncComponentType
{
    UA_DISABLE_COPY(CncChannelTypeBase);
protected:
    virtual ~CncChannelTypeBase();
public:
    // construction / destruction
    CncChannelTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex = NULL);
    CncChannelTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex = NULL);
    CncChannelTypeBase(
        UaBase::Object*    pBaseNode,
        XmlUaNodeFactoryManager*   pFactory,
        NodeManagerConfig* pNodeConfig,
        UaMutexRefCounted* pSharedMutex = NULL);
    static void createTypes();
    static void clearStaticMembers();

    virtual UaNodeId       typeDefinitionId() const;


    virtual void setActFeedrate(OpcUa_Double ActFeedrate);
    virtual OpcUa_Double getActFeedrate() const;

    virtual void setActGFunctions(const UaUInt32Array& ActGFunctions);
    virtual void getActGFunctions(UaUInt32Array& ActGFunctions) const;

    virtual void setActJogIncrement(OpcUa_Double ActJogIncrement);
    virtual OpcUa_Double getActJogIncrement() const;

    virtual void setActMainProgramFile(const UaString& ActMainProgramFile);
    virtual UaString getActMainProgramFile() const;

    virtual void setActMainProgramFileOffset(OpcUa_UInt32 ActMainProgramFileOffset);
    virtual OpcUa_UInt32 getActMainProgramFileOffset() const;

    virtual void setActMainProgramLine(const UaString& ActMainProgramLine);
    virtual UaString getActMainProgramLine() const;

    virtual void setActMainProgramName(const UaString& ActMainProgramName);
    virtual UaString getActMainProgramName() const;

    virtual void setActMFunctions(const UaUInt32Array& ActMFunctions);
    virtual void getActMFunctions(UaUInt32Array& ActMFunctions) const;

    virtual void setActModalOffsetFunction(OpcUa_UInt32 ActModalOffsetFunction);
    virtual OpcUa_UInt32 getActModalOffsetFunction() const;

    virtual void setActOperationMode(OpcUaCnc::CncOperationMode ActOperationMode);
    virtual OpcUaCnc::CncOperationMode getActOperationMode() const;

    virtual void setActOverride(OpcUa_Double ActOverride);
    virtual OpcUa_Double getActOverride() const;

    virtual void setActProgramBlock(const UaString& ActProgramBlock);
    virtual UaString getActProgramBlock() const;

    virtual void setActProgramFile(const UaString& ActProgramFile);
    virtual UaString getActProgramFile() const;

    virtual void setActProgramFileOffset(OpcUa_UInt32 ActProgramFileOffset);
    virtual OpcUa_UInt32 getActProgramFileOffset() const;

    virtual void setActProgramLine(const UaString& ActProgramLine);
    virtual UaString getActProgramLine() const;

    virtual void setActProgramName(const UaString& ActProgramName);
    virtual UaString getActProgramName() const;

    virtual void setActProgramStatus(OpcUaCnc::CncChannelProgramStatus ActProgramStatus);
    virtual OpcUaCnc::CncChannelProgramStatus getActProgramStatus() const;

    virtual void setActStatus(OpcUaCnc::CncChannelStatus ActStatus);
    virtual OpcUaCnc::CncChannelStatus getActStatus() const;

    virtual void setBlockMode(OpcUa_Boolean BlockMode);
    virtual OpcUa_Boolean getBlockMode() const;

    virtual void setCmdFeedrate(OpcUa_Double CmdFeedrate);
    virtual OpcUa_Double getCmdFeedrate() const;

    virtual void setCmdOverride(OpcUa_Double CmdOverride);
    virtual OpcUa_Double getCmdOverride() const;

    virtual void setDryRunFeed(OpcUa_Double DryRunFeed);
    virtual OpcUa_Double getDryRunFeed() const;

    virtual void setFeedHold(OpcUa_Double FeedHold);
    virtual OpcUa_Double getFeedHold() const;

    virtual void setId(OpcUa_UInt32 Id);
    virtual OpcUa_UInt32 getId() const;

    virtual void setPosTcpBcsA(const OpcUaCnc::CncPositionType& PosTcpBcsA);
    virtual OpcUaCnc::CncPositionType getPosTcpBcsA() const;

    virtual void setPosTcpBcsB(const OpcUaCnc::CncPositionType& PosTcpBcsB);
    virtual OpcUaCnc::CncPositionType getPosTcpBcsB() const;

    virtual void setPosTcpBcsC(const OpcUaCnc::CncPositionType& PosTcpBcsC);
    virtual OpcUaCnc::CncPositionType getPosTcpBcsC() const;

    virtual void setPosTcpBcsX(const OpcUaCnc::CncPositionType& PosTcpBcsX);
    virtual OpcUaCnc::CncPositionType getPosTcpBcsX() const;

    virtual void setPosTcpBcsY(const OpcUaCnc::CncPositionType& PosTcpBcsY);
    virtual OpcUaCnc::CncPositionType getPosTcpBcsY() const;

    virtual void setPosTcpBcsZ(const OpcUaCnc::CncPositionType& PosTcpBcsZ);
    virtual OpcUaCnc::CncPositionType getPosTcpBcsZ() const;

    virtual void setPosTcpWcsA(const OpcUaCnc::CncPositionType& PosTcpWcsA);
    virtual OpcUaCnc::CncPositionType getPosTcpWcsA() const;

    virtual void setPosTcpWcsB(const OpcUaCnc::CncPositionType& PosTcpWcsB);
    virtual OpcUaCnc::CncPositionType getPosTcpWcsB() const;

    virtual void setPosTcpWcsC(const OpcUaCnc::CncPositionType& PosTcpWcsC);
    virtual OpcUaCnc::CncPositionType getPosTcpWcsC() const;

    virtual void setPosTcpWcsX(const OpcUaCnc::CncPositionType& PosTcpWcsX);
    virtual OpcUaCnc::CncPositionType getPosTcpWcsX() const;

    virtual void setPosTcpWcsY(const OpcUaCnc::CncPositionType& PosTcpWcsY);
    virtual OpcUaCnc::CncPositionType getPosTcpWcsY() const;

    virtual void setPosTcpWcsZ(const OpcUaCnc::CncPositionType& PosTcpWcsZ);
    virtual OpcUaCnc::CncPositionType getPosTcpWcsZ() const;

    virtual void setToolId(OpcUa_UInt32 ToolId);
    virtual OpcUa_UInt32 getToolId() const;

    virtual OpcUa::AnalogItemType* getActFeedrateNode();
    virtual const OpcUa::AnalogItemType* getActFeedrateNode() const;
    virtual OpcUa::DataItemType* getActGFunctionsNode();
    virtual const OpcUa::DataItemType* getActGFunctionsNode() const;
    virtual OpcUa::AnalogItemType* getActJogIncrementNode();
    virtual const OpcUa::AnalogItemType* getActJogIncrementNode() const;
    virtual OpcUa::DataItemType* getActMainProgramFileNode();
    virtual const OpcUa::DataItemType* getActMainProgramFileNode() const;
    virtual OpcUa::DataItemType* getActMainProgramFileOffsetNode();
    virtual const OpcUa::DataItemType* getActMainProgramFileOffsetNode() const;
    virtual OpcUa::DataItemType* getActMainProgramLineNode();
    virtual const OpcUa::DataItemType* getActMainProgramLineNode() const;
    virtual OpcUa::DataItemType* getActMainProgramNameNode();
    virtual const OpcUa::DataItemType* getActMainProgramNameNode() const;
    virtual OpcUa::DataItemType* getActMFunctionsNode();
    virtual const OpcUa::DataItemType* getActMFunctionsNode() const;
    virtual OpcUa::DataItemType* getActModalOffsetFunctionNode();
    virtual const OpcUa::DataItemType* getActModalOffsetFunctionNode() const;
    virtual OpcUa::DataItemType* getActOperationModeNode();
    virtual const OpcUa::DataItemType* getActOperationModeNode() const;
    virtual OpcUa::AnalogItemType* getActOverrideNode();
    virtual const OpcUa::AnalogItemType* getActOverrideNode() const;
    virtual OpcUa::DataItemType* getActProgramBlockNode();
    virtual const OpcUa::DataItemType* getActProgramBlockNode() const;
    virtual OpcUa::DataItemType* getActProgramFileNode();
    virtual const OpcUa::DataItemType* getActProgramFileNode() const;
    virtual OpcUa::DataItemType* getActProgramFileOffsetNode();
    virtual const OpcUa::DataItemType* getActProgramFileOffsetNode() const;
    virtual OpcUa::DataItemType* getActProgramLineNode();
    virtual const OpcUa::DataItemType* getActProgramLineNode() const;
    virtual OpcUa::DataItemType* getActProgramNameNode();
    virtual const OpcUa::DataItemType* getActProgramNameNode() const;
    virtual OpcUa::DataItemType* getActProgramStatusNode();
    virtual const OpcUa::DataItemType* getActProgramStatusNode() const;
    virtual OpcUa::DataItemType* getActStatusNode();
    virtual const OpcUa::DataItemType* getActStatusNode() const;
    virtual OpcUa::DataItemType* getBlockModeNode();
    virtual const OpcUa::DataItemType* getBlockModeNode() const;
    virtual OpcUa::AnalogItemType* getCmdFeedrateNode();
    virtual const OpcUa::AnalogItemType* getCmdFeedrateNode() const;
    virtual OpcUa::AnalogItemType* getCmdOverrideNode();
    virtual const OpcUa::AnalogItemType* getCmdOverrideNode() const;
    virtual OpcUa::AnalogItemType* getDryRunFeedNode();
    virtual const OpcUa::AnalogItemType* getDryRunFeedNode() const;
    virtual OpcUa::DataItemType* getFeedHoldNode();
    virtual const OpcUa::DataItemType* getFeedHoldNode() const;
    virtual OpcUa::DataItemType* getIdNode();
    virtual const OpcUa::DataItemType* getIdNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpBcsANode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpBcsANode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpBcsBNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpBcsBNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpBcsCNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpBcsCNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpBcsXNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpBcsXNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpBcsYNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpBcsYNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpBcsZNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpBcsZNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpWcsANode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpWcsANode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpWcsBNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpWcsBNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpWcsCNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpWcsCNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpWcsXNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpWcsXNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpWcsYNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpWcsYNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosTcpWcsZNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosTcpWcsZNode() const;
    virtual OpcUa::DataItemType* getToolIdNode();
    virtual const OpcUa::DataItemType* getToolIdNode() const;

// Add placeholders
    virtual UaStatus addCncAxis(OpcUaCnc::CncAxisType *pCncAxis);
    virtual UaStatus addCncSpindle(OpcUaCnc::CncSpindleType *pCncSpindle);

    // NodeAccessInfo management
    virtual void useAccessInfoFromType();
    void useAccessInfoFromInstance(CncChannelTypeBase *pInstance);

protected:
    // Object nodes
    // Object CncAxis
    static OpcUaCnc::CncAxisType*  s_pCncAxis;
    // Object CncSpindle
    static OpcUaCnc::CncSpindleType*  s_pCncSpindle;

    // Variable nodes
    // Variable ActFeedrate
    static OpcUa::AnalogItemType*  s_pActFeedrate;
    OpcUa::AnalogItemType*  m_pActFeedrate;
    // Variable ActGFunctions
    static OpcUa::DataItemType*  s_pActGFunctions;
    OpcUa::DataItemType*  m_pActGFunctions;
    // Variable ActJogIncrement
    static OpcUa::AnalogItemType*  s_pActJogIncrement;
    OpcUa::AnalogItemType*  m_pActJogIncrement;
    // Variable ActMainProgramFile
    static OpcUa::DataItemType*  s_pActMainProgramFile;
    OpcUa::DataItemType*  m_pActMainProgramFile;
    // Variable ActMainProgramFileOffset
    static OpcUa::DataItemType*  s_pActMainProgramFileOffset;
    OpcUa::DataItemType*  m_pActMainProgramFileOffset;
    // Variable ActMainProgramLine
    static OpcUa::DataItemType*  s_pActMainProgramLine;
    OpcUa::DataItemType*  m_pActMainProgramLine;
    // Variable ActMainProgramName
    static OpcUa::DataItemType*  s_pActMainProgramName;
    OpcUa::DataItemType*  m_pActMainProgramName;
    // Variable ActMFunctions
    static OpcUa::DataItemType*  s_pActMFunctions;
    OpcUa::DataItemType*  m_pActMFunctions;
    // Variable ActModalOffsetFunction
    static OpcUa::DataItemType*  s_pActModalOffsetFunction;
    OpcUa::DataItemType*  m_pActModalOffsetFunction;
    // Variable ActOperationMode
    static OpcUa::DataItemType*  s_pActOperationMode;
    OpcUa::DataItemType*  m_pActOperationMode;
    // Variable ActOverride
    static OpcUa::AnalogItemType*  s_pActOverride;
    OpcUa::AnalogItemType*  m_pActOverride;
    // Variable ActProgramBlock
    static OpcUa::DataItemType*  s_pActProgramBlock;
    OpcUa::DataItemType*  m_pActProgramBlock;
    // Variable ActProgramFile
    static OpcUa::DataItemType*  s_pActProgramFile;
    OpcUa::DataItemType*  m_pActProgramFile;
    // Variable ActProgramFileOffset
    static OpcUa::DataItemType*  s_pActProgramFileOffset;
    OpcUa::DataItemType*  m_pActProgramFileOffset;
    // Variable ActProgramLine
    static OpcUa::DataItemType*  s_pActProgramLine;
    OpcUa::DataItemType*  m_pActProgramLine;
    // Variable ActProgramName
    static OpcUa::DataItemType*  s_pActProgramName;
    OpcUa::DataItemType*  m_pActProgramName;
    // Variable ActProgramStatus
    static OpcUa::DataItemType*  s_pActProgramStatus;
    OpcUa::DataItemType*  m_pActProgramStatus;
    // Variable ActStatus
    static OpcUa::DataItemType*  s_pActStatus;
    OpcUa::DataItemType*  m_pActStatus;
    // Variable BlockMode
    static OpcUa::DataItemType*  s_pBlockMode;
    OpcUa::DataItemType*  m_pBlockMode;
    // Variable CmdFeedrate
    static OpcUa::AnalogItemType*  s_pCmdFeedrate;
    OpcUa::AnalogItemType*  m_pCmdFeedrate;
    // Variable CmdOverride
    static OpcUa::AnalogItemType*  s_pCmdOverride;
    OpcUa::AnalogItemType*  m_pCmdOverride;
    // Variable DryRunFeed
    static OpcUa::AnalogItemType*  s_pDryRunFeed;
    OpcUa::AnalogItemType*  m_pDryRunFeed;
    // Variable FeedHold
    static OpcUa::DataItemType*  s_pFeedHold;
    OpcUa::DataItemType*  m_pFeedHold;
    // Variable Id
    static OpcUa::DataItemType*  s_pId;
    OpcUa::DataItemType*  m_pId;
    // Variable PosTcpBcsA
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpBcsA;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpBcsA;
    // Variable PosTcpBcsB
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpBcsB;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpBcsB;
    // Variable PosTcpBcsC
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpBcsC;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpBcsC;
    // Variable PosTcpBcsX
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpBcsX;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpBcsX;
    // Variable PosTcpBcsY
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpBcsY;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpBcsY;
    // Variable PosTcpBcsZ
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpBcsZ;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpBcsZ;
    // Variable PosTcpWcsA
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpWcsA;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpWcsA;
    // Variable PosTcpWcsB
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpWcsB;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpWcsB;
    // Variable PosTcpWcsC
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpWcsC;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpWcsC;
    // Variable PosTcpWcsX
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpWcsX;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpWcsX;
    // Variable PosTcpWcsY
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpWcsY;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpWcsY;
    // Variable PosTcpWcsZ
    static OpcUaCnc::CncPositionVariableType*  s_pPosTcpWcsZ;
    OpcUaCnc::CncPositionVariableType*  m_pPosTcpWcsZ;
    // Variable ToolId
    static OpcUa::DataItemType*  s_pToolId;
    OpcUa::DataItemType*  m_pToolId;



private:
    void initialize();

private:
    static bool s_typeNodesCreated;
};

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/

#endif // #ifndef __OPCUACNCCNCCHANNELTYPEBASE_H__


