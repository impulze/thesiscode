/******************************************************************************
** opcuacnc_cncdrivetypebase.h
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#ifndef __OPCUACNC_CNCDRIVETYPEBASE_H__
#define __OPCUACNC_CNCDRIVETYPEBASE_H__

#include "opcuacnc_cnccomponenttype.h"
#include "opcuacnc_datatypes.h"
#include "basenodes.h"
#include "opcua_analogitemtype.h"
#include "opcua_dataitemtype.h"
#include "opcua_propertytype.h"
#include "opcuacnc_identifiers.h"
#include "opcuacnc_instancefactory_cnc.h"
#include "uarange.h"

// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {


/** Generated base class for a CncDriveType.
 *
 *  This class contains the generated base code for the object type CncDriveType
 *  representing an OPC UA ObjectType. This class is used to create the object type and to
 *  create and represent instances of the object type in the server address space.
 *
 *  **Variable members of the CncDriveType:**
 *
 *  Browse Name | DataType | TypeDefinition | Modelling Rule | See Also
 *  ------------|----------|----------------|----------------|---------------------------------------
 *  ActChannel  | NodeId   | DataItemType   | Mandatory      | \ref getActChannel, \ref setActChannel
 *  ActLoad     | Double   | AnalogItemType | Mandatory      | \ref getActLoad, \ref setActLoad
 *  ActPower    | Double   | AnalogItemType | Mandatory      | \ref getActPower, \ref setActPower
 *  ActTorque   | Double   | AnalogItemType | Mandatory      | \ref getActTorque, \ref setActTorque
 *  CmdTorque   | Double   | AnalogItemType | Mandatory      | \ref getCmdTorque, \ref setCmdTorque
 *  IsInactive  | Boolean  | DataItemType   | Mandatory      | \ref getIsInactive, \ref setIsInactive
 *  IsVirtual   | Boolean  | DataItemType   | Mandatory      | \ref getIsVirtual, \ref setIsVirtual
 *
 */
class UAMODELS_EXPORT CncDriveTypeBase:
    public OpcUaCnc::CncComponentType
{
    UA_DISABLE_COPY(CncDriveTypeBase);
protected:
    virtual ~CncDriveTypeBase();
public:
    // construction / destruction
    CncDriveTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex = NULL);
    CncDriveTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex = NULL);
    CncDriveTypeBase(
        UaBase::Object*    pBaseNode,
        XmlUaNodeFactoryManager*   pFactory,
        NodeManagerConfig* pNodeConfig,
        UaMutexRefCounted* pSharedMutex = NULL);
    static void createTypes();
    static void clearStaticMembers();

    virtual UaNodeId       typeDefinitionId() const;


    virtual void setActChannel(const UaNodeId& ActChannel);
    virtual UaNodeId getActChannel() const;

    virtual void setActLoad(OpcUa_Double ActLoad);
    virtual OpcUa_Double getActLoad() const;

    virtual void setActPower(OpcUa_Double ActPower);
    virtual OpcUa_Double getActPower() const;

    virtual void setActTorque(OpcUa_Double ActTorque);
    virtual OpcUa_Double getActTorque() const;

    virtual void setCmdTorque(OpcUa_Double CmdTorque);
    virtual OpcUa_Double getCmdTorque() const;

    virtual void setIsInactive(OpcUa_Boolean IsInactive);
    virtual OpcUa_Boolean getIsInactive() const;

    virtual void setIsVirtual(OpcUa_Boolean IsVirtual);
    virtual OpcUa_Boolean getIsVirtual() const;

    virtual OpcUa::DataItemType* getActChannelNode();
    virtual const OpcUa::DataItemType* getActChannelNode() const;
    virtual OpcUa::AnalogItemType* getActLoadNode();
    virtual const OpcUa::AnalogItemType* getActLoadNode() const;
    virtual OpcUa::AnalogItemType* getActPowerNode();
    virtual const OpcUa::AnalogItemType* getActPowerNode() const;
    virtual OpcUa::AnalogItemType* getActTorqueNode();
    virtual const OpcUa::AnalogItemType* getActTorqueNode() const;
    virtual OpcUa::AnalogItemType* getCmdTorqueNode();
    virtual const OpcUa::AnalogItemType* getCmdTorqueNode() const;
    virtual OpcUa::DataItemType* getIsInactiveNode();
    virtual const OpcUa::DataItemType* getIsInactiveNode() const;
    virtual OpcUa::DataItemType* getIsVirtualNode();
    virtual const OpcUa::DataItemType* getIsVirtualNode() const;

    // NodeAccessInfo management
    virtual void useAccessInfoFromType();
    void useAccessInfoFromInstance(CncDriveTypeBase *pInstance);

protected:
    // Variable nodes
    // Variable ActChannel
    static OpcUa::DataItemType*  s_pActChannel;
    OpcUa::DataItemType*  m_pActChannel;
    // Variable ActLoad
    static OpcUa::AnalogItemType*  s_pActLoad;
    OpcUa::AnalogItemType*  m_pActLoad;
    // Variable ActPower
    static OpcUa::AnalogItemType*  s_pActPower;
    OpcUa::AnalogItemType*  m_pActPower;
    // Variable ActTorque
    static OpcUa::AnalogItemType*  s_pActTorque;
    OpcUa::AnalogItemType*  m_pActTorque;
    // Variable CmdTorque
    static OpcUa::AnalogItemType*  s_pCmdTorque;
    OpcUa::AnalogItemType*  m_pCmdTorque;
    // Variable IsInactive
    static OpcUa::DataItemType*  s_pIsInactive;
    OpcUa::DataItemType*  m_pIsInactive;
    // Variable IsVirtual
    static OpcUa::DataItemType*  s_pIsVirtual;
    OpcUa::DataItemType*  m_pIsVirtual;



private:
    void initialize();

private:
    static bool s_typeNodesCreated;
};

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/

#endif // #ifndef __OPCUACNCCNCDRIVETYPEBASE_H__


