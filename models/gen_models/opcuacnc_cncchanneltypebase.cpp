/******************************************************************************
** opcuacnc_cncchanneltypebase.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#include "opcuacnc_cncchanneltypebase.h"
#include "opcuacnc_cncchanneltype.h"
#include "uagenericnodes.h"
#include "nodemanagerroot.h"
#include "methodhandleuanode.h"
#include "opcuacnc_nodemanagercnc.h"

#include "instancefactory.h"
#include "opcuacnc_cncaxistype.h"
#include "opcuacnc_cncpositionvariabletype.h"
#include "opcuacnc_cncspindletype.h"
#include "opcuacnc_instancefactory_cnc.h"
// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

bool CncChannelTypeBase::s_typeNodesCreated = false;
OpcUaCnc::CncAxisType* CncChannelTypeBase::s_pCncAxis = NULL;
OpcUaCnc::CncSpindleType* CncChannelTypeBase::s_pCncSpindle = NULL;
OpcUa::AnalogItemType* CncChannelTypeBase::s_pActFeedrate = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActGFunctions = NULL;
OpcUa::AnalogItemType* CncChannelTypeBase::s_pActJogIncrement = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActMainProgramFile = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActMainProgramFileOffset = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActMainProgramLine = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActMainProgramName = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActMFunctions = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActModalOffsetFunction = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActOperationMode = NULL;
OpcUa::AnalogItemType* CncChannelTypeBase::s_pActOverride = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActProgramBlock = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActProgramFile = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActProgramFileOffset = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActProgramLine = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActProgramName = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActProgramStatus = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pActStatus = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pBlockMode = NULL;
OpcUa::AnalogItemType* CncChannelTypeBase::s_pCmdFeedrate = NULL;
OpcUa::AnalogItemType* CncChannelTypeBase::s_pCmdOverride = NULL;
OpcUa::AnalogItemType* CncChannelTypeBase::s_pDryRunFeed = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pFeedHold = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pId = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpBcsA = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpBcsB = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpBcsC = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpBcsX = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpBcsY = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpBcsZ = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpWcsA = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpWcsB = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpWcsC = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpWcsX = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpWcsY = NULL;
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::s_pPosTcpWcsZ = NULL;
OpcUa::DataItemType* CncChannelTypeBase::s_pToolId = NULL;

/** Constructs an CncChannelType object using an instance declaration node as base
*/
CncChannelTypeBase::CncChannelTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUaCnc::CncComponentType(nodeId, pInstanceDeclarationObject, pNodeConfig, pSharedMutex)
{
    initialize();
}

/** Constructs an CncChannelType object
*/
CncChannelTypeBase::CncChannelTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUaCnc::CncComponentType(nodeId, name, browseNameNameSpaceIndex, pNodeConfig, pSharedMutex)
{
    initialize();
}

/**  Constructs an instance of the class CncChannelTypeBase with all components
*/
CncChannelTypeBase::CncChannelTypeBase(
    UaBase::Object*    pBaseNode,    //!< [in] The "tree" of nodes that specifies the attributes of the instance and its children
    XmlUaNodeFactoryManager* pFactory, //!< [in] The factory to create the children
    NodeManagerConfig* pNodeConfig,  //!< [in] Interface pointer to the NodeManagerConfig interface used to add and delete node and references in the address space
    UaMutexRefCounted* pSharedMutex) //!< [in] Shared mutex object used to synchronize access to the variable. Can be NULL if no shared mutex is provided
: OpcUaCnc::CncComponentType(pBaseNode, pFactory, pNodeConfig, pSharedMutex)
{
    UaStatus      addStatus;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }

    m_pActFeedrate = NULL;
    m_pActGFunctions = NULL;
    m_pActJogIncrement = NULL;
    m_pActMainProgramFile = NULL;
    m_pActMainProgramFileOffset = NULL;
    m_pActMainProgramLine = NULL;
    m_pActMainProgramName = NULL;
    m_pActMFunctions = NULL;
    m_pActModalOffsetFunction = NULL;
    m_pActOperationMode = NULL;
    m_pActOverride = NULL;
    m_pActProgramBlock = NULL;
    m_pActProgramFile = NULL;
    m_pActProgramFileOffset = NULL;
    m_pActProgramLine = NULL;
    m_pActProgramName = NULL;
    m_pActProgramStatus = NULL;
    m_pActStatus = NULL;
    m_pBlockMode = NULL;
    m_pCmdFeedrate = NULL;
    m_pCmdOverride = NULL;
    m_pDryRunFeed = NULL;
    m_pFeedHold = NULL;
    m_pId = NULL;
    m_pPosTcpBcsA = NULL;
    m_pPosTcpBcsB = NULL;
    m_pPosTcpBcsC = NULL;
    m_pPosTcpBcsX = NULL;
    m_pPosTcpBcsY = NULL;
    m_pPosTcpBcsZ = NULL;
    m_pPosTcpWcsA = NULL;
    m_pPosTcpWcsB = NULL;
    m_pPosTcpWcsC = NULL;
    m_pPosTcpWcsX = NULL;
    m_pPosTcpWcsY = NULL;
    m_pPosTcpWcsZ = NULL;
    m_pToolId = NULL;

    std::list<UaBase::BaseNode*> lstReferencedNodes = pBaseNode->hierarchicallyReferencedNodes();
    for (std::list<UaBase::BaseNode*>::const_iterator it = lstReferencedNodes.begin(); it != lstReferencedNodes.end(); it++)
    {
        UaBase::BaseNode *pChild = *it;
        if (pChild->browseName() == UaQualifiedName("ActFeedrate", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActFeedrate)
            {
                m_pActFeedrate = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActFeedrate, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActFeedrate->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActGFunctions", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActGFunctions)
            {
                m_pActGFunctions = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActGFunctions, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActGFunctions->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActJogIncrement", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActJogIncrement)
            {
                m_pActJogIncrement = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActJogIncrement, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActJogIncrement->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActMainProgramFile", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActMainProgramFile)
            {
                m_pActMainProgramFile = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActMainProgramFile, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActMainProgramFile->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActMainProgramFileOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActMainProgramFileOffset)
            {
                m_pActMainProgramFileOffset = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActMainProgramFileOffset, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActMainProgramFileOffset->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActMainProgramLine", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActMainProgramLine)
            {
                m_pActMainProgramLine = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActMainProgramLine, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActMainProgramLine->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActMainProgramName", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActMainProgramName)
            {
                m_pActMainProgramName = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActMainProgramName, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActMainProgramName->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActMFunctions", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActMFunctions)
            {
                m_pActMFunctions = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActMFunctions, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActMFunctions->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActModalOffsetFunction", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActModalOffsetFunction)
            {
                m_pActModalOffsetFunction = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActModalOffsetFunction, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActModalOffsetFunction->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActOperationMode", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActOperationMode)
            {
                m_pActOperationMode = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActOperationMode, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActOperationMode->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActOverride)
            {
                m_pActOverride = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActOverride, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActOverride->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActProgramBlock", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActProgramBlock)
            {
                m_pActProgramBlock = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActProgramBlock, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActProgramBlock->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActProgramFile", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActProgramFile)
            {
                m_pActProgramFile = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActProgramFile, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActProgramFile->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActProgramFileOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActProgramFileOffset)
            {
                m_pActProgramFileOffset = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActProgramFileOffset, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActProgramFileOffset->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActProgramLine", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActProgramLine)
            {
                m_pActProgramLine = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActProgramLine, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActProgramLine->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActProgramName", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActProgramName)
            {
                m_pActProgramName = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActProgramName, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActProgramName->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActProgramStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActProgramStatus)
            {
                m_pActProgramStatus = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActProgramStatus, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActProgramStatus->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pActStatus)
            {
                m_pActStatus = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pActStatus, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pActStatus->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("BlockMode", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pBlockMode)
            {
                m_pBlockMode = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pBlockMode, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pBlockMode->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CmdFeedrate", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCmdFeedrate)
            {
                m_pCmdFeedrate = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCmdFeedrate, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pCmdFeedrate->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CmdOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCmdOverride)
            {
                m_pCmdOverride = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCmdOverride, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pCmdOverride->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("DryRunFeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pDryRunFeed)
            {
                m_pDryRunFeed = (OpcUa::AnalogItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pDryRunFeed, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pDryRunFeed->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("FeedHold", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pFeedHold)
            {
                m_pFeedHold = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pFeedHold, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pFeedHold->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("Id", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pId)
            {
                m_pId = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pId, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pId->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpBcsA", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpBcsA)
            {
                m_pPosTcpBcsA = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsA, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpBcsA->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpBcsB", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpBcsB)
            {
                m_pPosTcpBcsB = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsB, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpBcsB->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpBcsC", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpBcsC)
            {
                m_pPosTcpBcsC = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsC, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpBcsC->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpBcsX", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpBcsX)
            {
                m_pPosTcpBcsX = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsX, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpBcsX->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpBcsY", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpBcsY)
            {
                m_pPosTcpBcsY = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsY, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpBcsY->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpBcsZ", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpBcsZ)
            {
                m_pPosTcpBcsZ = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsZ, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpBcsZ->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpWcsA", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpWcsA)
            {
                m_pPosTcpWcsA = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsA, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpWcsA->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpWcsB", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpWcsB)
            {
                m_pPosTcpWcsB = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsB, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpWcsB->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpWcsC", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpWcsC)
            {
                m_pPosTcpWcsC = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsC, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpWcsC->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpWcsX", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpWcsX)
            {
                m_pPosTcpWcsX = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsX, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpWcsX->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpWcsY", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpWcsY)
            {
                m_pPosTcpWcsY = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsY, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpWcsY->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("PosTcpWcsZ", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pPosTcpWcsZ)
            {
                m_pPosTcpWcsZ = (OpcUaCnc::CncPositionVariableType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsZ, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pPosTcpWcsZ->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("ToolId", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pToolId)
            {
                m_pToolId = (OpcUa::DataItemType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pToolId, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pToolId->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
    }
    UA_ASSERT(m_pActFeedrate);
    UA_ASSERT(m_pActGFunctions);
    UA_ASSERT(m_pActJogIncrement);
    UA_ASSERT(m_pActMainProgramFile);
    UA_ASSERT(m_pActMainProgramFileOffset);
    UA_ASSERT(m_pActMainProgramLine);
    UA_ASSERT(m_pActMainProgramName);
    UA_ASSERT(m_pActMFunctions);
    UA_ASSERT(m_pActModalOffsetFunction);
    UA_ASSERT(m_pActOperationMode);
    UA_ASSERT(m_pActOverride);
    UA_ASSERT(m_pActProgramBlock);
    UA_ASSERT(m_pActProgramFile);
    UA_ASSERT(m_pActProgramFileOffset);
    UA_ASSERT(m_pActProgramLine);
    UA_ASSERT(m_pActProgramName);
    UA_ASSERT(m_pActProgramStatus);
    UA_ASSERT(m_pActStatus);
    UA_ASSERT(m_pBlockMode);
    UA_ASSERT(m_pCmdFeedrate);
    UA_ASSERT(m_pCmdOverride);
    UA_ASSERT(m_pDryRunFeed);
    UA_ASSERT(m_pFeedHold);
    UA_ASSERT(m_pId);
    UA_ASSERT(m_pPosTcpBcsA);
    UA_ASSERT(m_pPosTcpBcsB);
    UA_ASSERT(m_pPosTcpBcsC);
    UA_ASSERT(m_pPosTcpBcsX);
    UA_ASSERT(m_pPosTcpBcsY);
    UA_ASSERT(m_pPosTcpBcsZ);
    UA_ASSERT(m_pPosTcpWcsA);
    UA_ASSERT(m_pPosTcpWcsB);
    UA_ASSERT(m_pPosTcpWcsC);
    UA_ASSERT(m_pPosTcpWcsX);
    UA_ASSERT(m_pPosTcpWcsY);
    UA_ASSERT(m_pPosTcpWcsZ);
    UA_ASSERT(m_pToolId);
}

/** Initialize the object with all member nodes
*/
void CncChannelTypeBase::initialize()
{
    OpcUa_Int16 nsIdx = m_pNodeConfig->getNameSpaceIndex();
    UaStatus      addStatus;
    UaVariant     defaultValue;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }
    // Mandatory variable ActFeedrate
    m_pActFeedrate = new OpcUa::AnalogItemType(this, s_pActFeedrate, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActFeedrate, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActGFunctions
    m_pActGFunctions = new OpcUa::DataItemType(this, s_pActGFunctions, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActGFunctions, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActJogIncrement
    m_pActJogIncrement = new OpcUa::AnalogItemType(this, s_pActJogIncrement, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActJogIncrement, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActMainProgramFile
    m_pActMainProgramFile = new OpcUa::DataItemType(this, s_pActMainProgramFile, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActMainProgramFile, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActMainProgramFileOffset
    m_pActMainProgramFileOffset = new OpcUa::DataItemType(this, s_pActMainProgramFileOffset, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActMainProgramFileOffset, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActMainProgramLine
    m_pActMainProgramLine = new OpcUa::DataItemType(this, s_pActMainProgramLine, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActMainProgramLine, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActMainProgramName
    m_pActMainProgramName = new OpcUa::DataItemType(this, s_pActMainProgramName, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActMainProgramName, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActMFunctions
    m_pActMFunctions = new OpcUa::DataItemType(this, s_pActMFunctions, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActMFunctions, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActModalOffsetFunction
    m_pActModalOffsetFunction = new OpcUa::DataItemType(this, s_pActModalOffsetFunction, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActModalOffsetFunction, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActOperationMode
    m_pActOperationMode = new OpcUa::DataItemType(this, s_pActOperationMode, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActOperationMode, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pActOperationMode->setDataType(UaNodeId(OpcUaCncId_CncOperationMode, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable ActOverride
    m_pActOverride = new OpcUa::AnalogItemType(this, s_pActOverride, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActOverride, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActProgramBlock
    m_pActProgramBlock = new OpcUa::DataItemType(this, s_pActProgramBlock, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActProgramBlock, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActProgramFile
    m_pActProgramFile = new OpcUa::DataItemType(this, s_pActProgramFile, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActProgramFile, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActProgramFileOffset
    m_pActProgramFileOffset = new OpcUa::DataItemType(this, s_pActProgramFileOffset, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActProgramFileOffset, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActProgramLine
    m_pActProgramLine = new OpcUa::DataItemType(this, s_pActProgramLine, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActProgramLine, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActProgramName
    m_pActProgramName = new OpcUa::DataItemType(this, s_pActProgramName, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActProgramName, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable ActProgramStatus
    m_pActProgramStatus = new OpcUa::DataItemType(this, s_pActProgramStatus, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActProgramStatus, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pActProgramStatus->setDataType(UaNodeId(OpcUaCncId_CncChannelProgramStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable ActStatus
    m_pActStatus = new OpcUa::DataItemType(this, s_pActStatus, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pActStatus, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pActStatus->setDataType(UaNodeId(OpcUaCncId_CncChannelStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable BlockMode
    m_pBlockMode = new OpcUa::DataItemType(this, s_pBlockMode, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pBlockMode, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable CmdFeedrate
    m_pCmdFeedrate = new OpcUa::AnalogItemType(this, s_pCmdFeedrate, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCmdFeedrate, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable CmdOverride
    m_pCmdOverride = new OpcUa::AnalogItemType(this, s_pCmdOverride, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCmdOverride, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable DryRunFeed
    m_pDryRunFeed = new OpcUa::AnalogItemType(this, s_pDryRunFeed, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pDryRunFeed, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable FeedHold
    m_pFeedHold = new OpcUa::DataItemType(this, s_pFeedHold, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pFeedHold, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable Id
    m_pId = new OpcUa::DataItemType(this, s_pId, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pId, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable PosTcpBcsA
    m_pPosTcpBcsA = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpBcsA, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsA, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpBcsA->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpBcsB
    m_pPosTcpBcsB = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpBcsB, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsB, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpBcsB->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpBcsC
    m_pPosTcpBcsC = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpBcsC, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsC, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpBcsC->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpBcsX
    m_pPosTcpBcsX = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpBcsX, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsX, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpBcsX->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpBcsY
    m_pPosTcpBcsY = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpBcsY, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsY, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpBcsY->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpBcsZ
    m_pPosTcpBcsZ = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpBcsZ, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpBcsZ, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpBcsZ->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpWcsA
    m_pPosTcpWcsA = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpWcsA, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsA, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpWcsA->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpWcsB
    m_pPosTcpWcsB = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpWcsB, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsB, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpWcsB->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpWcsC
    m_pPosTcpWcsC = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpWcsC, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsC, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpWcsC->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpWcsX
    m_pPosTcpWcsX = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpWcsX, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsX, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpWcsX->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpWcsY
    m_pPosTcpWcsY = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpWcsY, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsY, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpWcsY->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable PosTcpWcsZ
    m_pPosTcpWcsZ = new OpcUaCnc::CncPositionVariableType(this, s_pPosTcpWcsZ, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pPosTcpWcsZ, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    m_pPosTcpWcsZ->setDataType(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));

    // Mandatory variable ToolId
    m_pToolId = new OpcUa::DataItemType(this, s_pToolId, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pToolId, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());


    addStatus = m_pNodeConfig->addUaReference(this->nodeId(), UaNodeId(OpcUaCncId_CncMessageType, nsIdx), OpcUaId_GeneratesEvent);
    UA_ASSERT(addStatus.isGood());
    addStatus = m_pNodeConfig->addUaReference(this->nodeId(), OpcUaId_GeneralModelChangeEventType, OpcUaId_GeneratesEvent);
    UA_ASSERT(addStatus.isGood());
}

/** Destruction
*/
CncChannelTypeBase::~CncChannelTypeBase()
{
}

/** Create the related type nodes
*/
void CncChannelTypeBase::createTypes()
{
    if ( s_typeNodesCreated == false )
    {
        s_typeNodesCreated = true;

        // Check if supertype is already created
        OpcUaCnc::CncComponentType::createTypes();

        UaStatus      addStatus;
        UaVariant     defaultValue;
        NodeManagerRoot* pNodeManagerRoot = NodeManagerRoot::CreateRootNodeManager();
        OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
        OpcUa_Int16 nsSuperTypeIdx = OpcUaCnc::NodeManagerCNC::getTypeNamespace();
        NodeManagerConfig* pTypeNodeConfig = pNodeManagerRoot->getNodeManagerByNamespace(nsTypeIdx)->getNodeManagerConfig();

        OpcUa::GenericObjectType* pObjectType;
        pObjectType = new OpcUa::GenericObjectType(
            UaNodeId(OpcUaCncId_CncChannelType, nsTypeIdx),
            UaQualifiedName("CncChannelType", nsTypeIdx),
            UaLocalizedText("", "CncChannelType"),
            UaLocalizedText("", ""),
            OpcUa_False,
            &CncChannelType::clearStaticMembers);
        pTypeNodeConfig->addNodeAndReference(UaNodeId(OpcUaCncId_CncComponentType, nsSuperTypeIdx), pObjectType, OpcUaId_HasSubtype);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Object *pChild = new UaBase::Object(UaNodeId(OpcUaCncId_CncChannelType_CncAxis, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("<CncAxis>", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "<CncAxis>"));
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActChannel, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActChannel"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_NodeId);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActLoad, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActLoad"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActLoad_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActPower, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPower"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActPower_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActStatus, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActStatus"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(UaNodeId(OpcUaCncId_CncAxisStatus, nsTypeIdx));
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActTorque, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActTorque"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ActTorque_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_CmdTorque, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdTorque"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_CmdTorque_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_IsInactive, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "IsInactive"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_IsReferenced, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("IsReferenced", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "IsReferenced"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_IsRotational, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("IsRotational", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "IsRotational"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_IsVirtual, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "IsVirtual"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosDirect, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("PosDirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "PosDirect"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, nsTypeIdx));
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosDirect_ActPos, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "ActPos"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosDirect_CmdPos, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "CmdPos"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(3);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(3);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosDirect_EngineeringUnits, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_EUInformation);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosDirect_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosDirect_RemDist, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "RemDist"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosIndirect, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("PosIndirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "PosIndirect"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, nsTypeIdx));
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosIndirect_ActPos, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "ActPos"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosIndirect_CmdPos, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "CmdPos"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(3);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(3);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosIndirect_EngineeringUnits, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_EUInformation);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosIndirect_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_PosIndirect_RemDist, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "RemDist"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ZeroOffset, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ZeroOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ZeroOffset"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncAxis_ZeroOffset_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
            }

            XmlUaNodeFactoryManager factory;
        OpcUaCnc::InstanceFactoryCNC factoryCNC(OpcUaCnc::NodeManagerCNC::getTypeNamespace());
        factory.addNamespace(&factoryCNC);

            s_pCncAxis = new OpcUaCnc::CncAxisType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCncAxis, OpcUaId_Organizes);
            UA_ASSERT(addStatus.isGood());
            s_pCncAxis->setModellingRuleId(OpcUaId_ModellingRule_OptionalPlaceholder);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Object *pChild = new UaBase::Object(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("<CncSpindle>", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "<CncSpindle>"));
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActChannel, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActChannel"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_NodeId);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActChuckPowerStatus, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActChuckPowerStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActChuckPowerStatus"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActGear, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActGear", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActGear"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_UInt32);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActLoad, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActLoad"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActLoad_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActOverride, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActOverride"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActOverride_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActPower, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPower"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActPower_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActSpeed, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActSpeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActSpeed"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActSpeed_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActStatus, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActStatus"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(UaNodeId(OpcUaCncId_CncSpindleStatus, nsTypeIdx));
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActTorque, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActTorque"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActTorque_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_ActTurnDirection, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActTurnDirection", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActTurnDirection"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(UaNodeId(OpcUaCncId_CncSpindleTurnDirection, nsTypeIdx));
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_AnglePos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("AnglePos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "AnglePos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, nsTypeIdx));
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_AnglePos_ActPos, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "ActPos"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_AnglePos_CmdPos, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "CmdPos"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(3);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(3);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_AnglePos_EngineeringUnits, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_EUInformation);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_AnglePos_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_AnglePos_RemDist, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                    pChild3->setDisplayName(UaLocalizedText("", "RemDist"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Double);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                    reference.setReferenceTypeId(OpcUaId_HasComponent);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdGear, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdGear", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdGear"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_UInt32);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdOverride, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdOverride"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdOverride_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdSpeed, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdSpeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdSpeed"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdSpeed_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdTorque, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdTorque"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_AnalogItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                {
                    UaBase::BaseNode *pChild3;
                    pChild3 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_CmdTorque_EURange, nsTypeIdx));
                    lstBaseNodes.push_back(pChild3);;
                    pChild3->setBrowseName(UaQualifiedName("EURange", 0));
                    pChild3->setDisplayName(UaLocalizedText("", "EURange"));
                    ((UaBase::Variable*)pChild3)->setAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setUserAccessLevel(1);
                    ((UaBase::Variable*)pChild3)->setValueRank(-1);
                    ((UaBase::Variable*)pChild3)->setDataTypeId(OpcUaId_Range);
                    ((UaBase::Variable*)pChild3)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                    ((UaBase::Variable*)pChild3)->setTypeDefinitionId(OpcUaId_PropertyType);
                    reference.setReferenceTypeId(OpcUaId_HasProperty);
                    reference.setSourceNode(pChild2);
                    reference.setTargetNode(pChild3);
                    pChild2->addFullReference(reference);
                    pChild3->addFullReference(reference);
                    pChild3->setParentNodeId(pChild2->nodeId());
                }
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_IsInactive, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "IsInactive"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CncSpindle_IsVirtual, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "IsVirtual"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Boolean);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_DataItemType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
        OpcUaCnc::InstanceFactoryCNC factoryCNC(OpcUaCnc::NodeManagerCNC::getTypeNamespace());
        factory.addNamespace(&factoryCNC);

            s_pCncSpindle = new OpcUaCnc::CncSpindleType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCncSpindle, OpcUaId_Organizes);
            UA_ASSERT(addStatus.isGood());
            s_pCncSpindle->setModellingRuleId(OpcUaId_ModellingRule_OptionalPlaceholder);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }


        // Mandatory variable ActFeedrate
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_ActFeedrate, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActFeedrate", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActFeedrate"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_ActFeedrate_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActFeedrate = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActFeedrate, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActFeedrate->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActGFunctions
        UaUInt32Array valActGFunctions;
        defaultValue.setUInt32Array(valActGFunctions);
        s_pActGFunctions = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActGFunctions, nsTypeIdx), "ActGFunctions", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActGFunctions->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActGFunctions->setValueRank(1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActGFunctions, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActJogIncrement
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_ActJogIncrement, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActJogIncrement", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActJogIncrement"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_ActJogIncrement_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActJogIncrement = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActJogIncrement, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActJogIncrement->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActMainProgramFile
        defaultValue.setString("");
        s_pActMainProgramFile = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActMainProgramFile, nsTypeIdx), "ActMainProgramFile", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActMainProgramFile->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActMainProgramFile->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActMainProgramFile, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActMainProgramFileOffset
        defaultValue.setUInt32(0);
        s_pActMainProgramFileOffset = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActMainProgramFileOffset, nsTypeIdx), "ActMainProgramFileOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActMainProgramFileOffset->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActMainProgramFileOffset->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActMainProgramFileOffset, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActMainProgramLine
        defaultValue.setString("");
        s_pActMainProgramLine = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActMainProgramLine, nsTypeIdx), "ActMainProgramLine", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActMainProgramLine->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActMainProgramLine->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActMainProgramLine, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActMainProgramName
        defaultValue.setString("");
        s_pActMainProgramName = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActMainProgramName, nsTypeIdx), "ActMainProgramName", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActMainProgramName->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActMainProgramName->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActMainProgramName, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActMFunctions
        UaUInt32Array valActMFunctions;
        defaultValue.setUInt32Array(valActMFunctions);
        s_pActMFunctions = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActMFunctions, nsTypeIdx), "ActMFunctions", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActMFunctions->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActMFunctions->setValueRank(1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActMFunctions, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActModalOffsetFunction
        defaultValue.setUInt32(0);
        s_pActModalOffsetFunction = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActModalOffsetFunction, nsTypeIdx), "ActModalOffsetFunction", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActModalOffsetFunction->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActModalOffsetFunction->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActModalOffsetFunction, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActOperationMode
        defaultValue.setInt32((OpcUa_Int32) (OpcUaCnc::CncOperationMode)0);
        s_pActOperationMode = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActOperationMode, nsTypeIdx), "ActOperationMode", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActOperationMode->setDataType(UaNodeId(OpcUaCncId_CncOperationMode, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
        s_pActOperationMode->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActOperationMode->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActOperationMode, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActOverride
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_ActOverride, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("ActOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "ActOverride"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_ActOverride_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pActOverride = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActOverride, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pActOverride->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ActProgramBlock
        defaultValue.setString("");
        s_pActProgramBlock = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActProgramBlock, nsTypeIdx), "ActProgramBlock", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActProgramBlock->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActProgramBlock->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActProgramBlock, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActProgramFile
        defaultValue.setString("");
        s_pActProgramFile = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActProgramFile, nsTypeIdx), "ActProgramFile", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActProgramFile->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActProgramFile->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActProgramFile, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActProgramFileOffset
        defaultValue.setUInt32(0);
        s_pActProgramFileOffset = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActProgramFileOffset, nsTypeIdx), "ActProgramFileOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActProgramFileOffset->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActProgramFileOffset->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActProgramFileOffset, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActProgramLine
        defaultValue.setString("");
        s_pActProgramLine = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActProgramLine, nsTypeIdx), "ActProgramLine", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActProgramLine->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActProgramLine->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActProgramLine, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActProgramName
        defaultValue.setString("");
        s_pActProgramName = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActProgramName, nsTypeIdx), "ActProgramName", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActProgramName->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActProgramName->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActProgramName, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActProgramStatus
        defaultValue.setInt32((OpcUa_Int32) (OpcUaCnc::CncChannelProgramStatus)0);
        s_pActProgramStatus = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActProgramStatus, nsTypeIdx), "ActProgramStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActProgramStatus->setDataType(UaNodeId(OpcUaCncId_CncChannelProgramStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
        s_pActProgramStatus->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActProgramStatus->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActProgramStatus, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable ActStatus
        defaultValue.setInt32((OpcUa_Int32) (OpcUaCnc::CncChannelStatus)0);
        s_pActStatus = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ActStatus, nsTypeIdx), "ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pActStatus->setDataType(UaNodeId(OpcUaCncId_CncChannelStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
        s_pActStatus->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pActStatus->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pActStatus, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable BlockMode
        defaultValue.setBool(OpcUa_False);
        s_pBlockMode = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_BlockMode, nsTypeIdx), "BlockMode", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pBlockMode->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pBlockMode->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pBlockMode, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable CmdFeedrate
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CmdFeedrate, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("CmdFeedrate", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "CmdFeedrate"));
            pChild->setAccessLevel(3);
            pChild->setUserAccessLevel(3);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CmdFeedrate_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pCmdFeedrate = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCmdFeedrate, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pCmdFeedrate->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable CmdOverride
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CmdOverride, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("CmdOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "CmdOverride"));
            pChild->setAccessLevel(3);
            pChild->setUserAccessLevel(3);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_CmdOverride_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pCmdOverride = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCmdOverride, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pCmdOverride->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable DryRunFeed
        defaultValue.setDouble(0.0);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_DryRunFeed, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("DryRunFeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "DryRunFeed"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(OpcUaId_Double);
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_DryRunFeed_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pDryRunFeed = new OpcUa::AnalogItemType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pDryRunFeed, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pDryRunFeed->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable FeedHold
        defaultValue.setDouble(0.0);
        s_pFeedHold = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_FeedHold, nsTypeIdx), "FeedHold", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pFeedHold->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pFeedHold->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pFeedHold, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable Id
        defaultValue.setUInt32(0);
        s_pId = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_Id, nsTypeIdx), "Id", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pId->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pId->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pId, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable PosTcpBcsA
        OpcUaCnc::CncPositionType valPosTcpBcsA;
        valPosTcpBcsA.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsA, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpBcsA", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpBcsA"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsA_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsA_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsA_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsA_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsA_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpBcsA = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpBcsA, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpBcsA->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpBcsB
        OpcUaCnc::CncPositionType valPosTcpBcsB;
        valPosTcpBcsB.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsB, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpBcsB", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpBcsB"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsB_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsB_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsB_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsB_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsB_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpBcsB = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpBcsB, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpBcsB->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpBcsC
        OpcUaCnc::CncPositionType valPosTcpBcsC;
        valPosTcpBcsC.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsC, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpBcsC", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpBcsC"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsC_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsC_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsC_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsC_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsC_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpBcsC = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpBcsC, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpBcsC->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpBcsX
        OpcUaCnc::CncPositionType valPosTcpBcsX;
        valPosTcpBcsX.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsX, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpBcsX", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpBcsX"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsX_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsX_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsX_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsX_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsX_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpBcsX = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpBcsX, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpBcsX->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpBcsY
        OpcUaCnc::CncPositionType valPosTcpBcsY;
        valPosTcpBcsY.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsY, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpBcsY", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpBcsY"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsY_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsY_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsY_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsY_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsY_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpBcsY = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpBcsY, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpBcsY->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpBcsZ
        OpcUaCnc::CncPositionType valPosTcpBcsZ;
        valPosTcpBcsZ.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsZ, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpBcsZ", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpBcsZ"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsZ_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsZ_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsZ_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsZ_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpBcsZ_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpBcsZ = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpBcsZ, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpBcsZ->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpWcsA
        OpcUaCnc::CncPositionType valPosTcpWcsA;
        valPosTcpWcsA.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsA, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpWcsA", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpWcsA"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsA_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsA_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsA_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsA_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsA_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpWcsA = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpWcsA, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpWcsA->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpWcsB
        OpcUaCnc::CncPositionType valPosTcpWcsB;
        valPosTcpWcsB.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsB, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpWcsB", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpWcsB"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsB_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsB_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsB_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsB_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsB_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpWcsB = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpWcsB, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpWcsB->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpWcsC
        OpcUaCnc::CncPositionType valPosTcpWcsC;
        valPosTcpWcsC.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsC, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpWcsC", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpWcsC"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsC_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsC_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsC_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsC_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsC_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpWcsC = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpWcsC, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpWcsC->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpWcsX
        OpcUaCnc::CncPositionType valPosTcpWcsX;
        valPosTcpWcsX.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsX, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpWcsX", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpWcsX"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsX_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsX_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsX_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsX_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsX_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpWcsX = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpWcsX, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpWcsX->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpWcsY
        OpcUaCnc::CncPositionType valPosTcpWcsY;
        valPosTcpWcsY.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsY, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpWcsY", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpWcsY"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsY_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsY_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsY_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsY_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsY_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpWcsY = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpWcsY, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpWcsY->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable PosTcpWcsZ
        OpcUaCnc::CncPositionType valPosTcpWcsZ;
        valPosTcpWcsZ.toVariant(defaultValue);
        {
            std::list<UaBase::BaseNode*> lstBaseNodes;
            UaBase::Variable *pChild = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsZ, nsTypeIdx));
            lstBaseNodes.push_back(pChild);
            pChild->setBrowseName(UaQualifiedName("PosTcpWcsZ", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
            pChild->setDisplayName(UaLocalizedText("", "PosTcpWcsZ"));
            pChild->setAccessLevel(1);
            pChild->setUserAccessLevel(1);
            pChild->setValueRank(-1);
            pChild->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, nsTypeIdx));
            pChild->setValue(defaultValue);
            pChild->setValueRank(-1);
            {
                UaBase::BaseNode *pParent = pChild;
                UaBase::BaseNode *pChild2;
                UaBase::FullReference reference;
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsZ_ActPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "ActPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsZ_CmdPos, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "CmdPos"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(3);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsZ_EngineeringUnits, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_EUInformation);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsZ_EURange, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("EURange", 0));
                pChild2->setDisplayName(UaLocalizedText("", "EURange"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Range);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_PropertyType);
                reference.setReferenceTypeId(OpcUaId_HasProperty);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
                pChild2 = new UaBase::Variable(UaNodeId(OpcUaCncId_CncChannelType_PosTcpWcsZ_RemDist, nsTypeIdx));
                lstBaseNodes.push_back(pChild2);
                pChild2->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
                pChild2->setDisplayName(UaLocalizedText("", "RemDist"));
                ((UaBase::Variable*)pChild2)->setAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setUserAccessLevel(1);
                ((UaBase::Variable*)pChild2)->setValueRank(-1);
                ((UaBase::Variable*)pChild2)->setDataTypeId(OpcUaId_Double);
                ((UaBase::Variable*)pChild2)->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
                ((UaBase::Variable*)pChild2)->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
                reference.setReferenceTypeId(OpcUaId_HasComponent);
                reference.setSourceNode(pParent);
                reference.setTargetNode(pChild2);
                pParent->addFullReference(reference);
                pChild2->addFullReference(reference);
                pChild2->setParentNodeId(pParent->nodeId());
            }

            XmlUaNodeFactoryManager factory;
            s_pPosTcpWcsZ = new OpcUaCnc::CncPositionVariableType(pChild, &factory, pTypeNodeConfig, NULL);
            addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pPosTcpWcsZ, OpcUaId_HasComponent);
            UA_ASSERT(addStatus.isGood());
            s_pPosTcpWcsZ->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
            std::list<UaBase::BaseNode*>::iterator it = lstBaseNodes.begin();
            while (it != lstBaseNodes.end())
            {
                delete *it;
                it++;
            }
        }

        // Mandatory variable ToolId
        defaultValue.setUInt32(0);
        s_pToolId = new OpcUa::DataItemType(UaNodeId(OpcUaCncId_CncChannelType_ToolId, nsTypeIdx), "ToolId", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pToolId->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pToolId->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pToolId, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        pTypeNodeConfig->addUaReference(pObjectType->nodeId(), UaNodeId(OpcUaCncId_CncMessageType, nsTypeIdx), OpcUaId_GeneratesEvent);
        pTypeNodeConfig->addUaReference(pObjectType->nodeId(), OpcUaId_GeneralModelChangeEventType, OpcUaId_GeneratesEvent);
    }
}

/** Clear the static members of the class
*/
void CncChannelTypeBase::clearStaticMembers()
{
    s_typeNodesCreated = false;

    s_pCncAxis = NULL;
    s_pCncSpindle = NULL;
    s_pActFeedrate = NULL;
    s_pActGFunctions = NULL;
    s_pActJogIncrement = NULL;
    s_pActMainProgramFile = NULL;
    s_pActMainProgramFileOffset = NULL;
    s_pActMainProgramLine = NULL;
    s_pActMainProgramName = NULL;
    s_pActMFunctions = NULL;
    s_pActModalOffsetFunction = NULL;
    s_pActOperationMode = NULL;
    s_pActOverride = NULL;
    s_pActProgramBlock = NULL;
    s_pActProgramFile = NULL;
    s_pActProgramFileOffset = NULL;
    s_pActProgramLine = NULL;
    s_pActProgramName = NULL;
    s_pActProgramStatus = NULL;
    s_pActStatus = NULL;
    s_pBlockMode = NULL;
    s_pCmdFeedrate = NULL;
    s_pCmdOverride = NULL;
    s_pDryRunFeed = NULL;
    s_pFeedHold = NULL;
    s_pId = NULL;
    s_pPosTcpBcsA = NULL;
    s_pPosTcpBcsB = NULL;
    s_pPosTcpBcsC = NULL;
    s_pPosTcpBcsX = NULL;
    s_pPosTcpBcsY = NULL;
    s_pPosTcpBcsZ = NULL;
    s_pPosTcpWcsA = NULL;
    s_pPosTcpWcsB = NULL;
    s_pPosTcpWcsC = NULL;
    s_pPosTcpWcsX = NULL;
    s_pPosTcpWcsY = NULL;
    s_pPosTcpWcsZ = NULL;
    s_pToolId = NULL;
}

/** Returns the type definition NodeId for the CncChannelType
*/
UaNodeId CncChannelTypeBase::typeDefinitionId() const
{
    UaNodeId ret(OpcUaCncId_CncChannelType, NodeManagerCNC::getTypeNamespace());
    return ret;
}

/**
 *  Sets the ActFeedrate value
 */
void CncChannelTypeBase::setActFeedrate(OpcUa_Double ActFeedrate)
{
    UaVariant value;
    value.setDouble(ActFeedrate);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActFeedrate->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActFeedrate
 */
OpcUa_Double CncChannelTypeBase::getActFeedrate() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActFeedrate->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActGFunctions
 */
void CncChannelTypeBase::setActGFunctions(const UaUInt32Array& ActGFunctions)
{
    UaDataValue dataValue;
    ActGFunctions.toDataValue(dataValue, OpcUa_True);
    m_pActGFunctions->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Gets the ActGFunctions
 */
void CncChannelTypeBase::getActGFunctions(UaUInt32Array& ActGFunctions) const
{
    ActGFunctions.clear();
    if ( m_pActGFunctions != NULL )
    {
        UaDataValue dataValue(m_pActGFunctions->value(NULL));
        UaVariant value;
        value.attach(dataValue.value());
        value.toUInt32Array(ActGFunctions);
        value.detach();
    }
}

/**
 *  Sets the ActJogIncrement value
 */
void CncChannelTypeBase::setActJogIncrement(OpcUa_Double ActJogIncrement)
{
    UaVariant value;
    value.setDouble(ActJogIncrement);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActJogIncrement->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActJogIncrement
 */
OpcUa_Double CncChannelTypeBase::getActJogIncrement() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActJogIncrement->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActMainProgramFile value
 */
void CncChannelTypeBase::setActMainProgramFile(const UaString& ActMainProgramFile)
{
    UaVariant value;
    value.setString(ActMainProgramFile);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActMainProgramFile->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActMainProgramFile
 */
UaString CncChannelTypeBase::getActMainProgramFile() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActMainProgramFile->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActMainProgramFileOffset value
 */
void CncChannelTypeBase::setActMainProgramFileOffset(OpcUa_UInt32 ActMainProgramFileOffset)
{
    UaVariant value;
    value.setUInt32(ActMainProgramFileOffset);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActMainProgramFileOffset->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActMainProgramFileOffset
 */
OpcUa_UInt32 CncChannelTypeBase::getActMainProgramFileOffset() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pActMainProgramFileOffset->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/**
 *  Sets the ActMainProgramLine value
 */
void CncChannelTypeBase::setActMainProgramLine(const UaString& ActMainProgramLine)
{
    UaVariant value;
    value.setString(ActMainProgramLine);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActMainProgramLine->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActMainProgramLine
 */
UaString CncChannelTypeBase::getActMainProgramLine() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActMainProgramLine->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActMainProgramName value
 */
void CncChannelTypeBase::setActMainProgramName(const UaString& ActMainProgramName)
{
    UaVariant value;
    value.setString(ActMainProgramName);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActMainProgramName->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActMainProgramName
 */
UaString CncChannelTypeBase::getActMainProgramName() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActMainProgramName->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActMFunctions
 */
void CncChannelTypeBase::setActMFunctions(const UaUInt32Array& ActMFunctions)
{
    UaDataValue dataValue;
    ActMFunctions.toDataValue(dataValue, OpcUa_True);
    m_pActMFunctions->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Gets the ActMFunctions
 */
void CncChannelTypeBase::getActMFunctions(UaUInt32Array& ActMFunctions) const
{
    ActMFunctions.clear();
    if ( m_pActMFunctions != NULL )
    {
        UaDataValue dataValue(m_pActMFunctions->value(NULL));
        UaVariant value;
        value.attach(dataValue.value());
        value.toUInt32Array(ActMFunctions);
        value.detach();
    }
}

/**
 *  Sets the ActModalOffsetFunction value
 */
void CncChannelTypeBase::setActModalOffsetFunction(OpcUa_UInt32 ActModalOffsetFunction)
{
    UaVariant value;
    value.setUInt32(ActModalOffsetFunction);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActModalOffsetFunction->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActModalOffsetFunction
 */
OpcUa_UInt32 CncChannelTypeBase::getActModalOffsetFunction() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pActModalOffsetFunction->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/**
 *  Sets the ActOperationMode value
 */
void CncChannelTypeBase::setActOperationMode(OpcUaCnc::CncOperationMode ActOperationMode)
{
    UaVariant value;
    value.setInt32(ActOperationMode);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActOperationMode->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActOperationMode
 */
OpcUaCnc::CncOperationMode CncChannelTypeBase::getActOperationMode() const
{
    UaVariant defaultValue;
    OpcUaCnc::CncOperationMode ret = (OpcUaCnc::CncOperationMode)0;
    UaDataValue dataValue(m_pActOperationMode->value(NULL));
    defaultValue = *dataValue.value();
    OpcUa_Int32 i = (OpcUa_Int32) (OpcUaCnc::CncOperationMode)0;
    defaultValue.toInt32(i);
    ret = (OpcUaCnc::CncOperationMode) i;
    return ret;
}

/**
 *  Sets the ActOverride value
 */
void CncChannelTypeBase::setActOverride(OpcUa_Double ActOverride)
{
    UaVariant value;
    value.setDouble(ActOverride);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActOverride->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActOverride
 */
OpcUa_Double CncChannelTypeBase::getActOverride() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pActOverride->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the ActProgramBlock value
 */
void CncChannelTypeBase::setActProgramBlock(const UaString& ActProgramBlock)
{
    UaVariant value;
    value.setString(ActProgramBlock);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActProgramBlock->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActProgramBlock
 */
UaString CncChannelTypeBase::getActProgramBlock() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActProgramBlock->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActProgramFile value
 */
void CncChannelTypeBase::setActProgramFile(const UaString& ActProgramFile)
{
    UaVariant value;
    value.setString(ActProgramFile);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActProgramFile->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActProgramFile
 */
UaString CncChannelTypeBase::getActProgramFile() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActProgramFile->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActProgramFileOffset value
 */
void CncChannelTypeBase::setActProgramFileOffset(OpcUa_UInt32 ActProgramFileOffset)
{
    UaVariant value;
    value.setUInt32(ActProgramFileOffset);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActProgramFileOffset->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActProgramFileOffset
 */
OpcUa_UInt32 CncChannelTypeBase::getActProgramFileOffset() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pActProgramFileOffset->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/**
 *  Sets the ActProgramLine value
 */
void CncChannelTypeBase::setActProgramLine(const UaString& ActProgramLine)
{
    UaVariant value;
    value.setString(ActProgramLine);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActProgramLine->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActProgramLine
 */
UaString CncChannelTypeBase::getActProgramLine() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActProgramLine->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActProgramName value
 */
void CncChannelTypeBase::setActProgramName(const UaString& ActProgramName)
{
    UaVariant value;
    value.setString(ActProgramName);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActProgramName->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActProgramName
 */
UaString CncChannelTypeBase::getActProgramName() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pActProgramName->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the ActProgramStatus value
 */
void CncChannelTypeBase::setActProgramStatus(OpcUaCnc::CncChannelProgramStatus ActProgramStatus)
{
    UaVariant value;
    value.setInt32(ActProgramStatus);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActProgramStatus->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActProgramStatus
 */
OpcUaCnc::CncChannelProgramStatus CncChannelTypeBase::getActProgramStatus() const
{
    UaVariant defaultValue;
    OpcUaCnc::CncChannelProgramStatus ret = (OpcUaCnc::CncChannelProgramStatus)0;
    UaDataValue dataValue(m_pActProgramStatus->value(NULL));
    defaultValue = *dataValue.value();
    OpcUa_Int32 i = (OpcUa_Int32) (OpcUaCnc::CncChannelProgramStatus)0;
    defaultValue.toInt32(i);
    ret = (OpcUaCnc::CncChannelProgramStatus) i;
    return ret;
}

/**
 *  Sets the ActStatus value
 */
void CncChannelTypeBase::setActStatus(OpcUaCnc::CncChannelStatus ActStatus)
{
    UaVariant value;
    value.setInt32(ActStatus);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pActStatus->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ActStatus
 */
OpcUaCnc::CncChannelStatus CncChannelTypeBase::getActStatus() const
{
    UaVariant defaultValue;
    OpcUaCnc::CncChannelStatus ret = (OpcUaCnc::CncChannelStatus)0;
    UaDataValue dataValue(m_pActStatus->value(NULL));
    defaultValue = *dataValue.value();
    OpcUa_Int32 i = (OpcUa_Int32) (OpcUaCnc::CncChannelStatus)0;
    defaultValue.toInt32(i);
    ret = (OpcUaCnc::CncChannelStatus) i;
    return ret;
}

/**
 *  Sets the BlockMode value
 */
void CncChannelTypeBase::setBlockMode(OpcUa_Boolean BlockMode)
{
    UaVariant value;
    value.setBool(BlockMode);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pBlockMode->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of BlockMode
 */
OpcUa_Boolean CncChannelTypeBase::getBlockMode() const
{
    UaVariant defaultValue;
    OpcUa_Boolean ret = OpcUa_False;
    UaDataValue dataValue(m_pBlockMode->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toBool(ret);
    return ret;
}

/**
 *  Sets the CmdFeedrate value
 */
void CncChannelTypeBase::setCmdFeedrate(OpcUa_Double CmdFeedrate)
{
    UaVariant value;
    value.setDouble(CmdFeedrate);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pCmdFeedrate->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of CmdFeedrate
 */
OpcUa_Double CncChannelTypeBase::getCmdFeedrate() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pCmdFeedrate->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the CmdOverride value
 */
void CncChannelTypeBase::setCmdOverride(OpcUa_Double CmdOverride)
{
    UaVariant value;
    value.setDouble(CmdOverride);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pCmdOverride->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of CmdOverride
 */
OpcUa_Double CncChannelTypeBase::getCmdOverride() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pCmdOverride->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the DryRunFeed value
 */
void CncChannelTypeBase::setDryRunFeed(OpcUa_Double DryRunFeed)
{
    UaVariant value;
    value.setDouble(DryRunFeed);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pDryRunFeed->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of DryRunFeed
 */
OpcUa_Double CncChannelTypeBase::getDryRunFeed() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pDryRunFeed->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the FeedHold value
 */
void CncChannelTypeBase::setFeedHold(OpcUa_Double FeedHold)
{
    UaVariant value;
    value.setDouble(FeedHold);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pFeedHold->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of FeedHold
 */
OpcUa_Double CncChannelTypeBase::getFeedHold() const
{
    UaVariant defaultValue;
    OpcUa_Double ret = 0;
    UaDataValue dataValue(m_pFeedHold->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toDouble(ret);
    return ret;
}

/**
 *  Sets the Id value
 */
void CncChannelTypeBase::setId(OpcUa_UInt32 Id)
{
    UaVariant value;
    value.setUInt32(Id);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pId->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of Id
 */
OpcUa_UInt32 CncChannelTypeBase::getId() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pId->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/**
 *  Sets the PosTcpBcsA value
 */
void CncChannelTypeBase::setPosTcpBcsA(const OpcUaCnc::CncPositionType& PosTcpBcsA)
{
    UaDataValue dataValue;
    PosTcpBcsA.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpBcsA->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpBcsA
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpBcsA() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpBcsA->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpBcsB value
 */
void CncChannelTypeBase::setPosTcpBcsB(const OpcUaCnc::CncPositionType& PosTcpBcsB)
{
    UaDataValue dataValue;
    PosTcpBcsB.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpBcsB->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpBcsB
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpBcsB() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpBcsB->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpBcsC value
 */
void CncChannelTypeBase::setPosTcpBcsC(const OpcUaCnc::CncPositionType& PosTcpBcsC)
{
    UaDataValue dataValue;
    PosTcpBcsC.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpBcsC->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpBcsC
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpBcsC() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpBcsC->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpBcsX value
 */
void CncChannelTypeBase::setPosTcpBcsX(const OpcUaCnc::CncPositionType& PosTcpBcsX)
{
    UaDataValue dataValue;
    PosTcpBcsX.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpBcsX->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpBcsX
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpBcsX() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpBcsX->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpBcsY value
 */
void CncChannelTypeBase::setPosTcpBcsY(const OpcUaCnc::CncPositionType& PosTcpBcsY)
{
    UaDataValue dataValue;
    PosTcpBcsY.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpBcsY->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpBcsY
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpBcsY() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpBcsY->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpBcsZ value
 */
void CncChannelTypeBase::setPosTcpBcsZ(const OpcUaCnc::CncPositionType& PosTcpBcsZ)
{
    UaDataValue dataValue;
    PosTcpBcsZ.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpBcsZ->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpBcsZ
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpBcsZ() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpBcsZ->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpWcsA value
 */
void CncChannelTypeBase::setPosTcpWcsA(const OpcUaCnc::CncPositionType& PosTcpWcsA)
{
    UaDataValue dataValue;
    PosTcpWcsA.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpWcsA->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpWcsA
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpWcsA() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpWcsA->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpWcsB value
 */
void CncChannelTypeBase::setPosTcpWcsB(const OpcUaCnc::CncPositionType& PosTcpWcsB)
{
    UaDataValue dataValue;
    PosTcpWcsB.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpWcsB->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpWcsB
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpWcsB() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpWcsB->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpWcsC value
 */
void CncChannelTypeBase::setPosTcpWcsC(const OpcUaCnc::CncPositionType& PosTcpWcsC)
{
    UaDataValue dataValue;
    PosTcpWcsC.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpWcsC->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpWcsC
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpWcsC() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpWcsC->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpWcsX value
 */
void CncChannelTypeBase::setPosTcpWcsX(const OpcUaCnc::CncPositionType& PosTcpWcsX)
{
    UaDataValue dataValue;
    PosTcpWcsX.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpWcsX->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpWcsX
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpWcsX() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpWcsX->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpWcsY value
 */
void CncChannelTypeBase::setPosTcpWcsY(const OpcUaCnc::CncPositionType& PosTcpWcsY)
{
    UaDataValue dataValue;
    PosTcpWcsY.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpWcsY->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpWcsY
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpWcsY() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpWcsY->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the PosTcpWcsZ value
 */
void CncChannelTypeBase::setPosTcpWcsZ(const OpcUaCnc::CncPositionType& PosTcpWcsZ)
{
    UaDataValue dataValue;
    PosTcpWcsZ.toDataValue(dataValue, OpcUa_True);
    m_pPosTcpWcsZ->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of PosTcpWcsZ
 */
OpcUaCnc::CncPositionType CncChannelTypeBase::getPosTcpWcsZ() const
{
    OpcUaCnc::CncPositionType ret;
    UaDataValue dataValue(m_pPosTcpWcsZ->value(NULL));
    UaExtensionObject tmpExtensionObject;
    UaVariant(*dataValue.value()).toExtensionObject(tmpExtensionObject);
    ret.setCncPositionType(tmpExtensionObject, OpcUa_True);
    return ret;
}

/**
 *  Sets the ToolId value
 */
void CncChannelTypeBase::setToolId(OpcUa_UInt32 ToolId)
{
    UaVariant value;
    value.setUInt32(ToolId);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pToolId->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of ToolId
 */
OpcUa_UInt32 CncChannelTypeBase::getToolId() const
{
    UaVariant defaultValue;
    OpcUa_UInt32 ret = 0;
    UaDataValue dataValue(m_pToolId->value(NULL));
    defaultValue = *dataValue.value();
    defaultValue.toUInt32(ret);
    return ret;
}

/** Returns the ActFeedrate node.
 */
OpcUa::AnalogItemType* CncChannelTypeBase::getActFeedrateNode()
{
    return m_pActFeedrate;
}

/** Returns the ActFeedrate node.
 */
const OpcUa::AnalogItemType* CncChannelTypeBase::getActFeedrateNode() const
{
    return m_pActFeedrate;
}

/** Returns the ActGFunctions node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActGFunctionsNode()
{
    return m_pActGFunctions;
}

/** Returns the ActGFunctions node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActGFunctionsNode() const
{
    return m_pActGFunctions;
}

/** Returns the ActJogIncrement node.
 */
OpcUa::AnalogItemType* CncChannelTypeBase::getActJogIncrementNode()
{
    return m_pActJogIncrement;
}

/** Returns the ActJogIncrement node.
 */
const OpcUa::AnalogItemType* CncChannelTypeBase::getActJogIncrementNode() const
{
    return m_pActJogIncrement;
}

/** Returns the ActMainProgramFile node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramFileNode()
{
    return m_pActMainProgramFile;
}

/** Returns the ActMainProgramFile node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramFileNode() const
{
    return m_pActMainProgramFile;
}

/** Returns the ActMainProgramFileOffset node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramFileOffsetNode()
{
    return m_pActMainProgramFileOffset;
}

/** Returns the ActMainProgramFileOffset node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramFileOffsetNode() const
{
    return m_pActMainProgramFileOffset;
}

/** Returns the ActMainProgramLine node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramLineNode()
{
    return m_pActMainProgramLine;
}

/** Returns the ActMainProgramLine node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramLineNode() const
{
    return m_pActMainProgramLine;
}

/** Returns the ActMainProgramName node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramNameNode()
{
    return m_pActMainProgramName;
}

/** Returns the ActMainProgramName node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActMainProgramNameNode() const
{
    return m_pActMainProgramName;
}

/** Returns the ActMFunctions node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActMFunctionsNode()
{
    return m_pActMFunctions;
}

/** Returns the ActMFunctions node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActMFunctionsNode() const
{
    return m_pActMFunctions;
}

/** Returns the ActModalOffsetFunction node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActModalOffsetFunctionNode()
{
    return m_pActModalOffsetFunction;
}

/** Returns the ActModalOffsetFunction node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActModalOffsetFunctionNode() const
{
    return m_pActModalOffsetFunction;
}

/** Returns the ActOperationMode node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActOperationModeNode()
{
    return m_pActOperationMode;
}

/** Returns the ActOperationMode node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActOperationModeNode() const
{
    return m_pActOperationMode;
}

/** Returns the ActOverride node.
 */
OpcUa::AnalogItemType* CncChannelTypeBase::getActOverrideNode()
{
    return m_pActOverride;
}

/** Returns the ActOverride node.
 */
const OpcUa::AnalogItemType* CncChannelTypeBase::getActOverrideNode() const
{
    return m_pActOverride;
}

/** Returns the ActProgramBlock node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActProgramBlockNode()
{
    return m_pActProgramBlock;
}

/** Returns the ActProgramBlock node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActProgramBlockNode() const
{
    return m_pActProgramBlock;
}

/** Returns the ActProgramFile node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActProgramFileNode()
{
    return m_pActProgramFile;
}

/** Returns the ActProgramFile node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActProgramFileNode() const
{
    return m_pActProgramFile;
}

/** Returns the ActProgramFileOffset node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActProgramFileOffsetNode()
{
    return m_pActProgramFileOffset;
}

/** Returns the ActProgramFileOffset node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActProgramFileOffsetNode() const
{
    return m_pActProgramFileOffset;
}

/** Returns the ActProgramLine node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActProgramLineNode()
{
    return m_pActProgramLine;
}

/** Returns the ActProgramLine node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActProgramLineNode() const
{
    return m_pActProgramLine;
}

/** Returns the ActProgramName node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActProgramNameNode()
{
    return m_pActProgramName;
}

/** Returns the ActProgramName node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActProgramNameNode() const
{
    return m_pActProgramName;
}

/** Returns the ActProgramStatus node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActProgramStatusNode()
{
    return m_pActProgramStatus;
}

/** Returns the ActProgramStatus node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActProgramStatusNode() const
{
    return m_pActProgramStatus;
}

/** Returns the ActStatus node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getActStatusNode()
{
    return m_pActStatus;
}

/** Returns the ActStatus node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getActStatusNode() const
{
    return m_pActStatus;
}

/** Returns the BlockMode node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getBlockModeNode()
{
    return m_pBlockMode;
}

/** Returns the BlockMode node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getBlockModeNode() const
{
    return m_pBlockMode;
}

/** Returns the CmdFeedrate node.
 */
OpcUa::AnalogItemType* CncChannelTypeBase::getCmdFeedrateNode()
{
    return m_pCmdFeedrate;
}

/** Returns the CmdFeedrate node.
 */
const OpcUa::AnalogItemType* CncChannelTypeBase::getCmdFeedrateNode() const
{
    return m_pCmdFeedrate;
}

/** Returns the CmdOverride node.
 */
OpcUa::AnalogItemType* CncChannelTypeBase::getCmdOverrideNode()
{
    return m_pCmdOverride;
}

/** Returns the CmdOverride node.
 */
const OpcUa::AnalogItemType* CncChannelTypeBase::getCmdOverrideNode() const
{
    return m_pCmdOverride;
}

/** Returns the DryRunFeed node.
 */
OpcUa::AnalogItemType* CncChannelTypeBase::getDryRunFeedNode()
{
    return m_pDryRunFeed;
}

/** Returns the DryRunFeed node.
 */
const OpcUa::AnalogItemType* CncChannelTypeBase::getDryRunFeedNode() const
{
    return m_pDryRunFeed;
}

/** Returns the FeedHold node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getFeedHoldNode()
{
    return m_pFeedHold;
}

/** Returns the FeedHold node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getFeedHoldNode() const
{
    return m_pFeedHold;
}

/** Returns the Id node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getIdNode()
{
    return m_pId;
}

/** Returns the Id node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getIdNode() const
{
    return m_pId;
}

/** Returns the PosTcpBcsA node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsANode()
{
    return m_pPosTcpBcsA;
}

/** Returns the PosTcpBcsA node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsANode() const
{
    return m_pPosTcpBcsA;
}

/** Returns the PosTcpBcsB node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsBNode()
{
    return m_pPosTcpBcsB;
}

/** Returns the PosTcpBcsB node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsBNode() const
{
    return m_pPosTcpBcsB;
}

/** Returns the PosTcpBcsC node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsCNode()
{
    return m_pPosTcpBcsC;
}

/** Returns the PosTcpBcsC node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsCNode() const
{
    return m_pPosTcpBcsC;
}

/** Returns the PosTcpBcsX node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsXNode()
{
    return m_pPosTcpBcsX;
}

/** Returns the PosTcpBcsX node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsXNode() const
{
    return m_pPosTcpBcsX;
}

/** Returns the PosTcpBcsY node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsYNode()
{
    return m_pPosTcpBcsY;
}

/** Returns the PosTcpBcsY node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsYNode() const
{
    return m_pPosTcpBcsY;
}

/** Returns the PosTcpBcsZ node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsZNode()
{
    return m_pPosTcpBcsZ;
}

/** Returns the PosTcpBcsZ node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpBcsZNode() const
{
    return m_pPosTcpBcsZ;
}

/** Returns the PosTcpWcsA node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsANode()
{
    return m_pPosTcpWcsA;
}

/** Returns the PosTcpWcsA node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsANode() const
{
    return m_pPosTcpWcsA;
}

/** Returns the PosTcpWcsB node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsBNode()
{
    return m_pPosTcpWcsB;
}

/** Returns the PosTcpWcsB node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsBNode() const
{
    return m_pPosTcpWcsB;
}

/** Returns the PosTcpWcsC node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsCNode()
{
    return m_pPosTcpWcsC;
}

/** Returns the PosTcpWcsC node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsCNode() const
{
    return m_pPosTcpWcsC;
}

/** Returns the PosTcpWcsX node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsXNode()
{
    return m_pPosTcpWcsX;
}

/** Returns the PosTcpWcsX node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsXNode() const
{
    return m_pPosTcpWcsX;
}

/** Returns the PosTcpWcsY node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsYNode()
{
    return m_pPosTcpWcsY;
}

/** Returns the PosTcpWcsY node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsYNode() const
{
    return m_pPosTcpWcsY;
}

/** Returns the PosTcpWcsZ node.
 */
OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsZNode()
{
    return m_pPosTcpWcsZ;
}

/** Returns the PosTcpWcsZ node.
 */
const OpcUaCnc::CncPositionVariableType* CncChannelTypeBase::getPosTcpWcsZNode() const
{
    return m_pPosTcpWcsZ;
}

/** Returns the ToolId node.
 */
OpcUa::DataItemType* CncChannelTypeBase::getToolIdNode()
{
    return m_pToolId;
}

/** Returns the ToolId node.
 */
const OpcUa::DataItemType* CncChannelTypeBase::getToolIdNode() const
{
    return m_pToolId;
}


/** Applies the NodeAccessInfo set at the CncChannelTypeBase and its children. */
void CncChannelTypeBase::useAccessInfoFromType()
{
    OpcUaCnc::CncComponentType::useAccessInfoFromType();

    // instance node
    OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
    UaNode *pTypeNode = NodeManagerRoot::CreateRootNodeManager()->getNode(UaNodeId(OpcUaCncId_CncChannelType, nsTypeIdx));
    if (pTypeNode)
    {
        useAccessInfoFrom(pTypeNode);
        pTypeNode->releaseReference();
    }

    // children
    m_pActFeedrate->useAccessInfoFromInstance(s_pActFeedrate);
    m_pActGFunctions->useAccessInfoFromInstance(s_pActGFunctions);
    m_pActJogIncrement->useAccessInfoFromInstance(s_pActJogIncrement);
    m_pActMainProgramFile->useAccessInfoFromInstance(s_pActMainProgramFile);
    m_pActMainProgramFileOffset->useAccessInfoFromInstance(s_pActMainProgramFileOffset);
    m_pActMainProgramLine->useAccessInfoFromInstance(s_pActMainProgramLine);
    m_pActMainProgramName->useAccessInfoFromInstance(s_pActMainProgramName);
    m_pActMFunctions->useAccessInfoFromInstance(s_pActMFunctions);
    m_pActModalOffsetFunction->useAccessInfoFromInstance(s_pActModalOffsetFunction);
    m_pActOperationMode->useAccessInfoFromInstance(s_pActOperationMode);
    m_pActOverride->useAccessInfoFromInstance(s_pActOverride);
    m_pActProgramBlock->useAccessInfoFromInstance(s_pActProgramBlock);
    m_pActProgramFile->useAccessInfoFromInstance(s_pActProgramFile);
    m_pActProgramFileOffset->useAccessInfoFromInstance(s_pActProgramFileOffset);
    m_pActProgramLine->useAccessInfoFromInstance(s_pActProgramLine);
    m_pActProgramName->useAccessInfoFromInstance(s_pActProgramName);
    m_pActProgramStatus->useAccessInfoFromInstance(s_pActProgramStatus);
    m_pActStatus->useAccessInfoFromInstance(s_pActStatus);
    m_pBlockMode->useAccessInfoFromInstance(s_pBlockMode);
    m_pCmdFeedrate->useAccessInfoFromInstance(s_pCmdFeedrate);
    m_pCmdOverride->useAccessInfoFromInstance(s_pCmdOverride);
    m_pDryRunFeed->useAccessInfoFromInstance(s_pDryRunFeed);
    m_pFeedHold->useAccessInfoFromInstance(s_pFeedHold);
    m_pId->useAccessInfoFromInstance(s_pId);
    m_pPosTcpBcsA->useAccessInfoFromInstance(s_pPosTcpBcsA);
    m_pPosTcpBcsB->useAccessInfoFromInstance(s_pPosTcpBcsB);
    m_pPosTcpBcsC->useAccessInfoFromInstance(s_pPosTcpBcsC);
    m_pPosTcpBcsX->useAccessInfoFromInstance(s_pPosTcpBcsX);
    m_pPosTcpBcsY->useAccessInfoFromInstance(s_pPosTcpBcsY);
    m_pPosTcpBcsZ->useAccessInfoFromInstance(s_pPosTcpBcsZ);
    m_pPosTcpWcsA->useAccessInfoFromInstance(s_pPosTcpWcsA);
    m_pPosTcpWcsB->useAccessInfoFromInstance(s_pPosTcpWcsB);
    m_pPosTcpWcsC->useAccessInfoFromInstance(s_pPosTcpWcsC);
    m_pPosTcpWcsX->useAccessInfoFromInstance(s_pPosTcpWcsX);
    m_pPosTcpWcsY->useAccessInfoFromInstance(s_pPosTcpWcsY);
    m_pPosTcpWcsZ->useAccessInfoFromInstance(s_pPosTcpWcsZ);
    m_pToolId->useAccessInfoFromInstance(s_pToolId);
}

/** Uses the NodeAccessInfo of pOther and its children. */
void CncChannelTypeBase::useAccessInfoFromInstance(CncChannelTypeBase *pOther)
{
    OpcUaCnc::CncComponentType::useAccessInfoFromInstance(pOther);

    // children
    m_pActFeedrate->useAccessInfoFromInstance(pOther->m_pActFeedrate);
    m_pActGFunctions->useAccessInfoFromInstance(pOther->m_pActGFunctions);
    m_pActJogIncrement->useAccessInfoFromInstance(pOther->m_pActJogIncrement);
    m_pActMainProgramFile->useAccessInfoFromInstance(pOther->m_pActMainProgramFile);
    m_pActMainProgramFileOffset->useAccessInfoFromInstance(pOther->m_pActMainProgramFileOffset);
    m_pActMainProgramLine->useAccessInfoFromInstance(pOther->m_pActMainProgramLine);
    m_pActMainProgramName->useAccessInfoFromInstance(pOther->m_pActMainProgramName);
    m_pActMFunctions->useAccessInfoFromInstance(pOther->m_pActMFunctions);
    m_pActModalOffsetFunction->useAccessInfoFromInstance(pOther->m_pActModalOffsetFunction);
    m_pActOperationMode->useAccessInfoFromInstance(pOther->m_pActOperationMode);
    m_pActOverride->useAccessInfoFromInstance(pOther->m_pActOverride);
    m_pActProgramBlock->useAccessInfoFromInstance(pOther->m_pActProgramBlock);
    m_pActProgramFile->useAccessInfoFromInstance(pOther->m_pActProgramFile);
    m_pActProgramFileOffset->useAccessInfoFromInstance(pOther->m_pActProgramFileOffset);
    m_pActProgramLine->useAccessInfoFromInstance(pOther->m_pActProgramLine);
    m_pActProgramName->useAccessInfoFromInstance(pOther->m_pActProgramName);
    m_pActProgramStatus->useAccessInfoFromInstance(pOther->m_pActProgramStatus);
    m_pActStatus->useAccessInfoFromInstance(pOther->m_pActStatus);
    m_pBlockMode->useAccessInfoFromInstance(pOther->m_pBlockMode);
    m_pCmdFeedrate->useAccessInfoFromInstance(pOther->m_pCmdFeedrate);
    m_pCmdOverride->useAccessInfoFromInstance(pOther->m_pCmdOverride);
    m_pDryRunFeed->useAccessInfoFromInstance(pOther->m_pDryRunFeed);
    m_pFeedHold->useAccessInfoFromInstance(pOther->m_pFeedHold);
    m_pId->useAccessInfoFromInstance(pOther->m_pId);
    m_pPosTcpBcsA->useAccessInfoFromInstance(pOther->m_pPosTcpBcsA);
    m_pPosTcpBcsB->useAccessInfoFromInstance(pOther->m_pPosTcpBcsB);
    m_pPosTcpBcsC->useAccessInfoFromInstance(pOther->m_pPosTcpBcsC);
    m_pPosTcpBcsX->useAccessInfoFromInstance(pOther->m_pPosTcpBcsX);
    m_pPosTcpBcsY->useAccessInfoFromInstance(pOther->m_pPosTcpBcsY);
    m_pPosTcpBcsZ->useAccessInfoFromInstance(pOther->m_pPosTcpBcsZ);
    m_pPosTcpWcsA->useAccessInfoFromInstance(pOther->m_pPosTcpWcsA);
    m_pPosTcpWcsB->useAccessInfoFromInstance(pOther->m_pPosTcpWcsB);
    m_pPosTcpWcsC->useAccessInfoFromInstance(pOther->m_pPosTcpWcsC);
    m_pPosTcpWcsX->useAccessInfoFromInstance(pOther->m_pPosTcpWcsX);
    m_pPosTcpWcsY->useAccessInfoFromInstance(pOther->m_pPosTcpWcsY);
    m_pPosTcpWcsZ->useAccessInfoFromInstance(pOther->m_pPosTcpWcsZ);
    m_pToolId->useAccessInfoFromInstance(pOther->m_pToolId);
}

// Add placeholders
/** Adds the passed CncAxisType node by creating an Organizes reference
*/
UaStatus CncChannelTypeBase::addCncAxis(OpcUaCnc::CncAxisType *pCncAxis)
{
    return m_pNodeConfig->addNodeAndReference(this, pCncAxis, OpcUaId_Organizes);
}
/** Adds the passed CncSpindleType node by creating an Organizes reference
*/
UaStatus CncChannelTypeBase::addCncSpindle(OpcUaCnc::CncSpindleType *pCncSpindle)
{
    return m_pNodeConfig->addNodeAndReference(this, pCncSpindle, OpcUaId_Organizes);
}

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/


