/******************************************************************************
** demo_nodemanagerdemobase.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://cs.hs-rm.de/mierswa_thesis/3AchsenEMCNCLaserSchneid/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#include "demo_nodemanagerdemobase.h"

// Include type headers
#include <uabasenodes.h>
#include "opcuacnc_cncaxistype.h"
#include "opcuacnc_cncchanneltype.h"
#include "opcuacnc_cncpositiontype.h"
#include "opcuacnc_cncpositionvariabletype.h"
#include "opcuacnc_instancefactory_cnc.h"
#include "opcuacnc_nodemanagercnc.h"
#include "opcua_analogitemtype.h"
#include "opcua_basedatavariabletype.h"
#include "opcua_dataitemtype.h"
#include "opcua_propertytype.h"
#include "uaeuinformation.h"
#include "uarange.h"
#include "instancefactory.h"
#include "nodemanagerroot.h"
#include "opcua_foldertype.h"

// Namespace for the UA information model http://cs.hs-rm.de/mierswa_thesis/3AchsenEMCNCLaserSchneid/
namespace Demo {
OpcUa_UInt16 NodeManagerDemoBase::s_namespaceIndex = 0;

/** Construction of the class NodeManagerDemoBase.
*/
NodeManagerDemoBase::NodeManagerDemoBase(
    OpcUa_Boolean firesEvents,  //!< [in] Flag indicating if the NodeManager should activate the EventManager
    OpcUa_Int32 nHashTableSize) //!< [in] Size of the hash table. The default value is 10.007.<br>
                                //   The size can be smaller than the total number of nodes managed
                                //   by the node manager but it is better for the performance to avoid
                                //   collisions with a large size.
                                //   Prefered sizes are 1.009, 10.007, 100.003, 1.000.003, 10.000.019.
: NodeManagerBase("http://cs.hs-rm.de/mierswa_thesis/3AchsenEMCNCLaserSchneid/", firesEvents, nHashTableSize)
{
    m_defaultLocaleId         = "en";
}

/** Finish start up in derived class after starting up base class.
*/
UaStatus NodeManagerDemoBase::afterStartUp()
{
    UaStatus ret;

    s_namespaceIndex = getNameSpaceIndex();

    ret = createDataTypeNodes();
    UA_ASSERT(ret.isGood());
    ret = createReferenceTypeNodes();
    UA_ASSERT(ret.isGood());

    // ------------------------------------------------------------
    // Create object type nodes
    // ------------------------------------------------------------
    // ------------------------------------------------------------

    // ------------------------------------------------------------
    // Create variable type nodes
    // ------------------------------------------------------------
    // ------------------------------------------------------------

    XmlUaNodeFactoryManager factory;
    OpcUaCnc::InstanceFactoryCNC factoryCNC(OpcUaCnc::NodeManagerCNC::getTypeNamespace());
    factory.addNamespace(&factoryCNC);

    ret = addObjectsFolderCncInterfaceCncAxisListX(factory);
    UA_ASSERT(ret.isGood());
    if (ret.isBad()) return ret;
    ret = addObjectsFolderCncInterfaceCncAxisListY(factory);
    UA_ASSERT(ret.isGood());
    if (ret.isBad()) return ret;
    ret = addObjectsFolderCncInterfaceCncAxisListZ(factory);
    UA_ASSERT(ret.isGood());
    if (ret.isBad()) return ret;
    ret = addObjectsFolderCncInterfaceCncChannelListChannel1(factory);
    UA_ASSERT(ret.isGood());
    if (ret.isBad()) return ret;
    ret = addAdditionalHierarchicalReferences();

    return ret;
}

/** Static method to get the namespace index for the type namespace managed by this class.
 */
OpcUa_UInt16 NodeManagerDemoBase::getTypeNamespace()
{
    return s_namespaceIndex;
}

/** Helper function to create data type related nodes.
*/
UaStatus NodeManagerDemoBase::createDataTypeNodes()
{
    UaStatus               ret;
    // Enumerations


    return ret;
}

/** Helper function to create reference type related nodes.
*/
UaStatus NodeManagerDemoBase::createReferenceTypeNodes()
{
    UaStatus                ret;

    return ret;
}

UaStatus NodeManagerDemoBase::addObjectsFolderCncInterfaceCncAxisListX(const XmlUaNodeFactoryManager &factory)
{
    UaStatus ret;
    UaVariant defaultValue;
    UaNodeId referenceTypeId;
    UaNodeId parentEventNodeId;
    UaBase::Object *pX = new UaBase::Object(UaNodeId(DemoId_CncInterface_CncAxisList_X, getTypeNamespace()));
    pX->setBrowseName(UaQualifiedName("X", getTypeNamespace()));
    pX->setDisplayName(UaLocalizedText("", "X"));
    UaBase::FullReference reference;
    // ActChannel
    UaBase::Variable *pActChannel = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActChannel, getTypeNamespace()));
    pActChannel->setBrowseName(UaQualifiedName("ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActChannel->setDisplayName(UaLocalizedText("", "ActChannel"));
    pActChannel->setAccessLevel(1);
    pActChannel->setUserAccessLevel(1);
    pActChannel->setValueRank(-1);
    pActChannel->setDataTypeId(OpcUaId_NodeId);
    defaultValue.setNodeId(UaNodeId());
    pActChannel->setValue(defaultValue);
    pActChannel->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pActChannel);
    pX->addFullReference(reference);
    pActChannel->addFullReference(reference);
    pActChannel->setParentNodeId(pX->nodeId());

    // ActLoad
    UaBase::Variable *pActLoad = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActLoad, getTypeNamespace()));
    pActLoad->setBrowseName(UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActLoad->setDisplayName(UaLocalizedText("", "ActLoad"));
    pActLoad->setAccessLevel(1);
    pActLoad->setUserAccessLevel(1);
    pActLoad->setValueRank(-1);
    pActLoad->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActLoad->setValue(defaultValue);
    pActLoad->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pActLoad);
    pX->addFullReference(reference);
    pActLoad->addFullReference(reference);
    pActLoad->setParentNodeId(pX->nodeId());

    // ActLoad -> EURange
    UaBase::Variable *pActLoadEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActLoad_EURange, getTypeNamespace()));
    pActLoadEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActLoadEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActLoadEURange->setAccessLevel(1);
    pActLoadEURange->setUserAccessLevel(1);
    pActLoadEURange->setValueRank(-1);
    pActLoadEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActLoadEURange->setValue(defaultValue);
    pActLoadEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActLoad);
    reference.setTargetNode(pActLoadEURange);
    pActLoad->addFullReference(reference);
    pActLoadEURange->addFullReference(reference);
    pActLoadEURange->setParentNodeId(pActLoad->nodeId());

    // ActPower
    UaBase::Variable *pActPower = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActPower, getTypeNamespace()));
    pActPower->setBrowseName(UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActPower->setDisplayName(UaLocalizedText("", "ActPower"));
    pActPower->setAccessLevel(1);
    pActPower->setUserAccessLevel(1);
    pActPower->setValueRank(-1);
    pActPower->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActPower->setValue(defaultValue);
    pActPower->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pActPower);
    pX->addFullReference(reference);
    pActPower->addFullReference(reference);
    pActPower->setParentNodeId(pX->nodeId());

    // ActPower -> EURange
    UaBase::Variable *pActPowerEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActPower_EURange, getTypeNamespace()));
    pActPowerEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActPowerEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActPowerEURange->setAccessLevel(1);
    pActPowerEURange->setUserAccessLevel(1);
    pActPowerEURange->setValueRank(-1);
    pActPowerEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActPowerEURange->setValue(defaultValue);
    pActPowerEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActPower);
    reference.setTargetNode(pActPowerEURange);
    pActPower->addFullReference(reference);
    pActPowerEURange->addFullReference(reference);
    pActPowerEURange->setParentNodeId(pActPower->nodeId());

    // ActStatus
    UaBase::Variable *pActStatus = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActStatus, getTypeNamespace()));
    pActStatus->setBrowseName(UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActStatus->setDisplayName(UaLocalizedText("", "ActStatus"));
    pActStatus->setAccessLevel(1);
    pActStatus->setUserAccessLevel(1);
    pActStatus->setValueRank(-1);
    pActStatus->setDataTypeId(UaNodeId(OpcUaCncId_CncAxisStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    defaultValue.setInt32((OpcUa_Int32) OpcUaCnc::CncAxisStatus_InPosition);
    pActStatus->setValue(defaultValue);
    pActStatus->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pActStatus);
    pX->addFullReference(reference);
    pActStatus->addFullReference(reference);
    pActStatus->setParentNodeId(pX->nodeId());

    // ActTorque
    UaBase::Variable *pActTorque = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActTorque, getTypeNamespace()));
    pActTorque->setBrowseName(UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActTorque->setDisplayName(UaLocalizedText("", "ActTorque"));
    pActTorque->setAccessLevel(1);
    pActTorque->setUserAccessLevel(1);
    pActTorque->setValueRank(-1);
    pActTorque->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActTorque->setValue(defaultValue);
    pActTorque->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pActTorque);
    pX->addFullReference(reference);
    pActTorque->addFullReference(reference);
    pActTorque->setParentNodeId(pX->nodeId());

    // ActTorque -> EURange
    UaBase::Variable *pActTorqueEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ActTorque_EURange, getTypeNamespace()));
    pActTorqueEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActTorqueEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActTorqueEURange->setAccessLevel(1);
    pActTorqueEURange->setUserAccessLevel(1);
    pActTorqueEURange->setValueRank(-1);
    pActTorqueEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActTorqueEURange->setValue(defaultValue);
    pActTorqueEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActTorque);
    reference.setTargetNode(pActTorqueEURange);
    pActTorque->addFullReference(reference);
    pActTorqueEURange->addFullReference(reference);
    pActTorqueEURange->setParentNodeId(pActTorque->nodeId());

    // CmdTorque
    UaBase::Variable *pCmdTorque = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_CmdTorque, getTypeNamespace()));
    pCmdTorque->setBrowseName(UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pCmdTorque->setDisplayName(UaLocalizedText("", "CmdTorque"));
    pCmdTorque->setAccessLevel(3);
    pCmdTorque->setUserAccessLevel(3);
    pCmdTorque->setValueRank(-1);
    pCmdTorque->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pCmdTorque->setValue(defaultValue);
    pCmdTorque->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pCmdTorque);
    pX->addFullReference(reference);
    pCmdTorque->addFullReference(reference);
    pCmdTorque->setParentNodeId(pX->nodeId());

    // CmdTorque -> EURange
    UaBase::Variable *pCmdTorqueEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_CmdTorque_EURange, getTypeNamespace()));
    pCmdTorqueEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pCmdTorqueEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pCmdTorqueEURange->setAccessLevel(1);
    pCmdTorqueEURange->setUserAccessLevel(1);
    pCmdTorqueEURange->setValueRank(-1);
    pCmdTorqueEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pCmdTorqueEURange->setValue(defaultValue);
    pCmdTorqueEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pCmdTorque);
    reference.setTargetNode(pCmdTorqueEURange);
    pCmdTorque->addFullReference(reference);
    pCmdTorqueEURange->addFullReference(reference);
    pCmdTorqueEURange->setParentNodeId(pCmdTorque->nodeId());

    // IsInactive
    UaBase::Variable *pIsInactive = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_IsInactive, getTypeNamespace()));
    pIsInactive->setBrowseName(UaQualifiedName("IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsInactive->setDisplayName(UaLocalizedText("", "IsInactive"));
    pIsInactive->setAccessLevel(1);
    pIsInactive->setUserAccessLevel(1);
    pIsInactive->setValueRank(-1);
    pIsInactive->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsInactive->setValue(defaultValue);
    pIsInactive->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pIsInactive);
    pX->addFullReference(reference);
    pIsInactive->addFullReference(reference);
    pIsInactive->setParentNodeId(pX->nodeId());

    // IsReferenced
    UaBase::Variable *pIsReferenced = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_IsReferenced, getTypeNamespace()));
    pIsReferenced->setBrowseName(UaQualifiedName("IsReferenced", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsReferenced->setDisplayName(UaLocalizedText("", "IsReferenced"));
    pIsReferenced->setAccessLevel(1);
    pIsReferenced->setUserAccessLevel(1);
    pIsReferenced->setValueRank(-1);
    pIsReferenced->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsReferenced->setValue(defaultValue);
    pIsReferenced->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pIsReferenced);
    pX->addFullReference(reference);
    pIsReferenced->addFullReference(reference);
    pIsReferenced->setParentNodeId(pX->nodeId());

    // IsRotational
    UaBase::Variable *pIsRotational = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_IsRotational, getTypeNamespace()));
    pIsRotational->setBrowseName(UaQualifiedName("IsRotational", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsRotational->setDisplayName(UaLocalizedText("", "IsRotational"));
    pIsRotational->setAccessLevel(1);
    pIsRotational->setUserAccessLevel(1);
    pIsRotational->setValueRank(-1);
    pIsRotational->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsRotational->setValue(defaultValue);
    pIsRotational->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pIsRotational);
    pX->addFullReference(reference);
    pIsRotational->addFullReference(reference);
    pIsRotational->setParentNodeId(pX->nodeId());

    // IsVirtual
    UaBase::Variable *pIsVirtual = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_IsVirtual, getTypeNamespace()));
    pIsVirtual->setBrowseName(UaQualifiedName("IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsVirtual->setDisplayName(UaLocalizedText("", "IsVirtual"));
    pIsVirtual->setAccessLevel(1);
    pIsVirtual->setUserAccessLevel(1);
    pIsVirtual->setValueRank(-1);
    pIsVirtual->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsVirtual->setValue(defaultValue);
    pIsVirtual->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pIsVirtual);
    pX->addFullReference(reference);
    pIsVirtual->addFullReference(reference);
    pIsVirtual->setParentNodeId(pX->nodeId());

    // PosDirect
    UaBase::Variable *pPosDirect = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosDirect, getTypeNamespace()));
    pPosDirect->setBrowseName(UaQualifiedName("PosDirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirect->setDisplayName(UaLocalizedText("", "PosDirect"));
    pPosDirect->setAccessLevel(1);
    pPosDirect->setUserAccessLevel(1);
    pPosDirect->setValueRank(-1);
    pPosDirect->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosDirect;
        valPosDirect.toVariant(defaultValue);
    }
    pPosDirect->setValue(defaultValue);
    pPosDirect->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pPosDirect);
    pX->addFullReference(reference);
    pPosDirect->addFullReference(reference);
    pPosDirect->setParentNodeId(pX->nodeId());

    // PosDirect -> ActPos
    UaBase::Variable *pPosDirectActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosDirect_ActPos, getTypeNamespace()));
    pPosDirectActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosDirectActPos->setAccessLevel(1);
    pPosDirectActPos->setUserAccessLevel(1);
    pPosDirectActPos->setValueRank(-1);
    pPosDirectActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectActPos->setValue(defaultValue);
    pPosDirectActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectActPos);
    pPosDirect->addFullReference(reference);
    pPosDirectActPos->addFullReference(reference);
    pPosDirectActPos->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> CmdPos
    UaBase::Variable *pPosDirectCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosDirect_CmdPos, getTypeNamespace()));
    pPosDirectCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosDirectCmdPos->setAccessLevel(3);
    pPosDirectCmdPos->setUserAccessLevel(3);
    pPosDirectCmdPos->setValueRank(-1);
    pPosDirectCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectCmdPos->setValue(defaultValue);
    pPosDirectCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectCmdPos);
    pPosDirect->addFullReference(reference);
    pPosDirectCmdPos->addFullReference(reference);
    pPosDirectCmdPos->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> EngineeringUnits
    UaBase::Variable *pPosDirectEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosDirect_EngineeringUnits, getTypeNamespace()));
    pPosDirectEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosDirectEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosDirectEngineeringUnits->setAccessLevel(1);
    pPosDirectEngineeringUnits->setUserAccessLevel(1);
    pPosDirectEngineeringUnits->setValueRank(-1);
    pPosDirectEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosDirectEngineeringUnits->setValue(defaultValue);
    pPosDirectEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectEngineeringUnits);
    pPosDirect->addFullReference(reference);
    pPosDirectEngineeringUnits->addFullReference(reference);
    pPosDirectEngineeringUnits->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> EURange
    UaBase::Variable *pPosDirectEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosDirect_EURange, getTypeNamespace()));
    pPosDirectEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosDirectEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosDirectEURange->setAccessLevel(1);
    pPosDirectEURange->setUserAccessLevel(1);
    pPosDirectEURange->setValueRank(-1);
    pPosDirectEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosDirectEURange->setValue(defaultValue);
    pPosDirectEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectEURange);
    pPosDirect->addFullReference(reference);
    pPosDirectEURange->addFullReference(reference);
    pPosDirectEURange->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> RemDist
    UaBase::Variable *pPosDirectRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosDirect_RemDist, getTypeNamespace()));
    pPosDirectRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosDirectRemDist->setAccessLevel(1);
    pPosDirectRemDist->setUserAccessLevel(1);
    pPosDirectRemDist->setValueRank(-1);
    pPosDirectRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectRemDist->setValue(defaultValue);
    pPosDirectRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectRemDist);
    pPosDirect->addFullReference(reference);
    pPosDirectRemDist->addFullReference(reference);
    pPosDirectRemDist->setParentNodeId(pPosDirect->nodeId());

    // PosIndirect
    UaBase::Variable *pPosIndirect = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosIndirect, getTypeNamespace()));
    pPosIndirect->setBrowseName(UaQualifiedName("PosIndirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirect->setDisplayName(UaLocalizedText("", "PosIndirect"));
    pPosIndirect->setAccessLevel(1);
    pPosIndirect->setUserAccessLevel(1);
    pPosIndirect->setValueRank(-1);
    pPosIndirect->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosIndirect;
        valPosIndirect.toVariant(defaultValue);
    }
    pPosIndirect->setValue(defaultValue);
    pPosIndirect->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pPosIndirect);
    pX->addFullReference(reference);
    pPosIndirect->addFullReference(reference);
    pPosIndirect->setParentNodeId(pX->nodeId());

    // PosIndirect -> ActPos
    UaBase::Variable *pPosIndirectActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosIndirect_ActPos, getTypeNamespace()));
    pPosIndirectActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosIndirectActPos->setAccessLevel(1);
    pPosIndirectActPos->setUserAccessLevel(1);
    pPosIndirectActPos->setValueRank(-1);
    pPosIndirectActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectActPos->setValue(defaultValue);
    pPosIndirectActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectActPos);
    pPosIndirect->addFullReference(reference);
    pPosIndirectActPos->addFullReference(reference);
    pPosIndirectActPos->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> CmdPos
    UaBase::Variable *pPosIndirectCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosIndirect_CmdPos, getTypeNamespace()));
    pPosIndirectCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosIndirectCmdPos->setAccessLevel(3);
    pPosIndirectCmdPos->setUserAccessLevel(3);
    pPosIndirectCmdPos->setValueRank(-1);
    pPosIndirectCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectCmdPos->setValue(defaultValue);
    pPosIndirectCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectCmdPos);
    pPosIndirect->addFullReference(reference);
    pPosIndirectCmdPos->addFullReference(reference);
    pPosIndirectCmdPos->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> EngineeringUnits
    UaBase::Variable *pPosIndirectEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosIndirect_EngineeringUnits, getTypeNamespace()));
    pPosIndirectEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosIndirectEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosIndirectEngineeringUnits->setAccessLevel(1);
    pPosIndirectEngineeringUnits->setUserAccessLevel(1);
    pPosIndirectEngineeringUnits->setValueRank(-1);
    pPosIndirectEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosIndirectEngineeringUnits->setValue(defaultValue);
    pPosIndirectEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectEngineeringUnits);
    pPosIndirect->addFullReference(reference);
    pPosIndirectEngineeringUnits->addFullReference(reference);
    pPosIndirectEngineeringUnits->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> EURange
    UaBase::Variable *pPosIndirectEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosIndirect_EURange, getTypeNamespace()));
    pPosIndirectEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosIndirectEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosIndirectEURange->setAccessLevel(1);
    pPosIndirectEURange->setUserAccessLevel(1);
    pPosIndirectEURange->setValueRank(-1);
    pPosIndirectEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosIndirectEURange->setValue(defaultValue);
    pPosIndirectEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectEURange);
    pPosIndirect->addFullReference(reference);
    pPosIndirectEURange->addFullReference(reference);
    pPosIndirectEURange->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> RemDist
    UaBase::Variable *pPosIndirectRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_PosIndirect_RemDist, getTypeNamespace()));
    pPosIndirectRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosIndirectRemDist->setAccessLevel(1);
    pPosIndirectRemDist->setUserAccessLevel(1);
    pPosIndirectRemDist->setValueRank(-1);
    pPosIndirectRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectRemDist->setValue(defaultValue);
    pPosIndirectRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectRemDist);
    pPosIndirect->addFullReference(reference);
    pPosIndirectRemDist->addFullReference(reference);
    pPosIndirectRemDist->setParentNodeId(pPosIndirect->nodeId());

    // ZeroOffset
    UaBase::Variable *pZeroOffset = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ZeroOffset, getTypeNamespace()));
    pZeroOffset->setBrowseName(UaQualifiedName("ZeroOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pZeroOffset->setDisplayName(UaLocalizedText("", "ZeroOffset"));
    pZeroOffset->setAccessLevel(1);
    pZeroOffset->setUserAccessLevel(1);
    pZeroOffset->setValueRank(-1);
    pZeroOffset->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pZeroOffset->setValue(defaultValue);
    pZeroOffset->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pX);
    reference.setTargetNode(pZeroOffset);
    pX->addFullReference(reference);
    pZeroOffset->addFullReference(reference);
    pZeroOffset->setParentNodeId(pX->nodeId());

    // ZeroOffset -> EURange
    UaBase::Variable *pZeroOffsetEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_X_ZeroOffset_EURange, getTypeNamespace()));
    pZeroOffsetEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pZeroOffsetEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pZeroOffsetEURange->setAccessLevel(1);
    pZeroOffsetEURange->setUserAccessLevel(1);
    pZeroOffsetEURange->setValueRank(-1);
    pZeroOffsetEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pZeroOffsetEURange->setValue(defaultValue);
    pZeroOffsetEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pZeroOffset);
    reference.setTargetNode(pZeroOffsetEURange);
    pZeroOffset->addFullReference(reference);
    pZeroOffsetEURange->addFullReference(reference);
    pZeroOffsetEURange->setParentNodeId(pZeroOffset->nodeId());

    OpcUaCnc::CncAxisType *pObjectType = new OpcUaCnc::CncAxisType(pX, (XmlUaNodeFactoryManager*) &factory, this);
    pObjectType->useAccessInfoFromType();

    referenceTypeId = OpcUaId_HasComponent;
    ret = addNodeAndReference(UaNodeId(OpcUaCncId_CncInterface_CncAxisList, OpcUaCnc::NodeManagerCNC::getTypeNamespace()), pObjectType, referenceTypeId);
    UA_ASSERT(ret.isGood());
    delete pActChannel;
    delete pActLoad;
    delete pActLoadEURange;
    delete pActPower;
    delete pActPowerEURange;
    delete pActStatus;
    delete pActTorque;
    delete pActTorqueEURange;
    delete pCmdTorque;
    delete pCmdTorqueEURange;
    delete pIsInactive;
    delete pIsReferenced;
    delete pIsRotational;
    delete pIsVirtual;
    delete pPosDirect;
    delete pPosDirectActPos;
    delete pPosDirectCmdPos;
    delete pPosDirectEngineeringUnits;
    delete pPosDirectEURange;
    delete pPosDirectRemDist;
    delete pPosIndirect;
    delete pPosIndirectActPos;
    delete pPosIndirectCmdPos;
    delete pPosIndirectEngineeringUnits;
    delete pPosIndirectEURange;
    delete pPosIndirectRemDist;
    delete pZeroOffset;
    delete pZeroOffsetEURange;
    delete pX;
    return ret;
}

UaStatus NodeManagerDemoBase::addObjectsFolderCncInterfaceCncAxisListY(const XmlUaNodeFactoryManager &factory)
{
    UaStatus ret;
    UaVariant defaultValue;
    UaNodeId referenceTypeId;
    UaNodeId parentEventNodeId;
    UaBase::Object *pY = new UaBase::Object(UaNodeId(DemoId_CncInterface_CncAxisList_Y, getTypeNamespace()));
    pY->setBrowseName(UaQualifiedName("Y", getTypeNamespace()));
    pY->setDisplayName(UaLocalizedText("", "Y"));
    UaBase::FullReference reference;
    // ActChannel
    UaBase::Variable *pActChannel = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActChannel, getTypeNamespace()));
    pActChannel->setBrowseName(UaQualifiedName("ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActChannel->setDisplayName(UaLocalizedText("", "ActChannel"));
    pActChannel->setAccessLevel(1);
    pActChannel->setUserAccessLevel(1);
    pActChannel->setValueRank(-1);
    pActChannel->setDataTypeId(OpcUaId_NodeId);
    defaultValue.setNodeId(UaNodeId());
    pActChannel->setValue(defaultValue);
    pActChannel->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pActChannel);
    pY->addFullReference(reference);
    pActChannel->addFullReference(reference);
    pActChannel->setParentNodeId(pY->nodeId());

    // ActLoad
    UaBase::Variable *pActLoad = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActLoad, getTypeNamespace()));
    pActLoad->setBrowseName(UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActLoad->setDisplayName(UaLocalizedText("", "ActLoad"));
    pActLoad->setAccessLevel(1);
    pActLoad->setUserAccessLevel(1);
    pActLoad->setValueRank(-1);
    pActLoad->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActLoad->setValue(defaultValue);
    pActLoad->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pActLoad);
    pY->addFullReference(reference);
    pActLoad->addFullReference(reference);
    pActLoad->setParentNodeId(pY->nodeId());

    // ActLoad -> EURange
    UaBase::Variable *pActLoadEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActLoad_EURange, getTypeNamespace()));
    pActLoadEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActLoadEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActLoadEURange->setAccessLevel(1);
    pActLoadEURange->setUserAccessLevel(1);
    pActLoadEURange->setValueRank(-1);
    pActLoadEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActLoadEURange->setValue(defaultValue);
    pActLoadEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActLoad);
    reference.setTargetNode(pActLoadEURange);
    pActLoad->addFullReference(reference);
    pActLoadEURange->addFullReference(reference);
    pActLoadEURange->setParentNodeId(pActLoad->nodeId());

    // ActPower
    UaBase::Variable *pActPower = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActPower, getTypeNamespace()));
    pActPower->setBrowseName(UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActPower->setDisplayName(UaLocalizedText("", "ActPower"));
    pActPower->setAccessLevel(1);
    pActPower->setUserAccessLevel(1);
    pActPower->setValueRank(-1);
    pActPower->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActPower->setValue(defaultValue);
    pActPower->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pActPower);
    pY->addFullReference(reference);
    pActPower->addFullReference(reference);
    pActPower->setParentNodeId(pY->nodeId());

    // ActPower -> EURange
    UaBase::Variable *pActPowerEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActPower_EURange, getTypeNamespace()));
    pActPowerEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActPowerEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActPowerEURange->setAccessLevel(1);
    pActPowerEURange->setUserAccessLevel(1);
    pActPowerEURange->setValueRank(-1);
    pActPowerEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActPowerEURange->setValue(defaultValue);
    pActPowerEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActPower);
    reference.setTargetNode(pActPowerEURange);
    pActPower->addFullReference(reference);
    pActPowerEURange->addFullReference(reference);
    pActPowerEURange->setParentNodeId(pActPower->nodeId());

    // ActStatus
    UaBase::Variable *pActStatus = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActStatus, getTypeNamespace()));
    pActStatus->setBrowseName(UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActStatus->setDisplayName(UaLocalizedText("", "ActStatus"));
    pActStatus->setAccessLevel(1);
    pActStatus->setUserAccessLevel(1);
    pActStatus->setValueRank(-1);
    pActStatus->setDataTypeId(UaNodeId(OpcUaCncId_CncAxisStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    defaultValue.setInt32((OpcUa_Int32) OpcUaCnc::CncAxisStatus_InPosition);
    pActStatus->setValue(defaultValue);
    pActStatus->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pActStatus);
    pY->addFullReference(reference);
    pActStatus->addFullReference(reference);
    pActStatus->setParentNodeId(pY->nodeId());

    // ActTorque
    UaBase::Variable *pActTorque = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActTorque, getTypeNamespace()));
    pActTorque->setBrowseName(UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActTorque->setDisplayName(UaLocalizedText("", "ActTorque"));
    pActTorque->setAccessLevel(1);
    pActTorque->setUserAccessLevel(1);
    pActTorque->setValueRank(-1);
    pActTorque->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActTorque->setValue(defaultValue);
    pActTorque->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pActTorque);
    pY->addFullReference(reference);
    pActTorque->addFullReference(reference);
    pActTorque->setParentNodeId(pY->nodeId());

    // ActTorque -> EURange
    UaBase::Variable *pActTorqueEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ActTorque_EURange, getTypeNamespace()));
    pActTorqueEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActTorqueEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActTorqueEURange->setAccessLevel(1);
    pActTorqueEURange->setUserAccessLevel(1);
    pActTorqueEURange->setValueRank(-1);
    pActTorqueEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActTorqueEURange->setValue(defaultValue);
    pActTorqueEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActTorque);
    reference.setTargetNode(pActTorqueEURange);
    pActTorque->addFullReference(reference);
    pActTorqueEURange->addFullReference(reference);
    pActTorqueEURange->setParentNodeId(pActTorque->nodeId());

    // CmdTorque
    UaBase::Variable *pCmdTorque = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_CmdTorque, getTypeNamespace()));
    pCmdTorque->setBrowseName(UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pCmdTorque->setDisplayName(UaLocalizedText("", "CmdTorque"));
    pCmdTorque->setAccessLevel(3);
    pCmdTorque->setUserAccessLevel(3);
    pCmdTorque->setValueRank(-1);
    pCmdTorque->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pCmdTorque->setValue(defaultValue);
    pCmdTorque->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pCmdTorque);
    pY->addFullReference(reference);
    pCmdTorque->addFullReference(reference);
    pCmdTorque->setParentNodeId(pY->nodeId());

    // CmdTorque -> EURange
    UaBase::Variable *pCmdTorqueEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_CmdTorque_EURange, getTypeNamespace()));
    pCmdTorqueEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pCmdTorqueEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pCmdTorqueEURange->setAccessLevel(1);
    pCmdTorqueEURange->setUserAccessLevel(1);
    pCmdTorqueEURange->setValueRank(-1);
    pCmdTorqueEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pCmdTorqueEURange->setValue(defaultValue);
    pCmdTorqueEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pCmdTorque);
    reference.setTargetNode(pCmdTorqueEURange);
    pCmdTorque->addFullReference(reference);
    pCmdTorqueEURange->addFullReference(reference);
    pCmdTorqueEURange->setParentNodeId(pCmdTorque->nodeId());

    // IsInactive
    UaBase::Variable *pIsInactive = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_IsInactive, getTypeNamespace()));
    pIsInactive->setBrowseName(UaQualifiedName("IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsInactive->setDisplayName(UaLocalizedText("", "IsInactive"));
    pIsInactive->setAccessLevel(1);
    pIsInactive->setUserAccessLevel(1);
    pIsInactive->setValueRank(-1);
    pIsInactive->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsInactive->setValue(defaultValue);
    pIsInactive->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pIsInactive);
    pY->addFullReference(reference);
    pIsInactive->addFullReference(reference);
    pIsInactive->setParentNodeId(pY->nodeId());

    // IsReferenced
    UaBase::Variable *pIsReferenced = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_IsReferenced, getTypeNamespace()));
    pIsReferenced->setBrowseName(UaQualifiedName("IsReferenced", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsReferenced->setDisplayName(UaLocalizedText("", "IsReferenced"));
    pIsReferenced->setAccessLevel(1);
    pIsReferenced->setUserAccessLevel(1);
    pIsReferenced->setValueRank(-1);
    pIsReferenced->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsReferenced->setValue(defaultValue);
    pIsReferenced->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pIsReferenced);
    pY->addFullReference(reference);
    pIsReferenced->addFullReference(reference);
    pIsReferenced->setParentNodeId(pY->nodeId());

    // IsRotational
    UaBase::Variable *pIsRotational = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_IsRotational, getTypeNamespace()));
    pIsRotational->setBrowseName(UaQualifiedName("IsRotational", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsRotational->setDisplayName(UaLocalizedText("", "IsRotational"));
    pIsRotational->setAccessLevel(1);
    pIsRotational->setUserAccessLevel(1);
    pIsRotational->setValueRank(-1);
    pIsRotational->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsRotational->setValue(defaultValue);
    pIsRotational->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pIsRotational);
    pY->addFullReference(reference);
    pIsRotational->addFullReference(reference);
    pIsRotational->setParentNodeId(pY->nodeId());

    // IsVirtual
    UaBase::Variable *pIsVirtual = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_IsVirtual, getTypeNamespace()));
    pIsVirtual->setBrowseName(UaQualifiedName("IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsVirtual->setDisplayName(UaLocalizedText("", "IsVirtual"));
    pIsVirtual->setAccessLevel(1);
    pIsVirtual->setUserAccessLevel(1);
    pIsVirtual->setValueRank(-1);
    pIsVirtual->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsVirtual->setValue(defaultValue);
    pIsVirtual->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pIsVirtual);
    pY->addFullReference(reference);
    pIsVirtual->addFullReference(reference);
    pIsVirtual->setParentNodeId(pY->nodeId());

    // PosDirect
    UaBase::Variable *pPosDirect = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosDirect, getTypeNamespace()));
    pPosDirect->setBrowseName(UaQualifiedName("PosDirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirect->setDisplayName(UaLocalizedText("", "PosDirect"));
    pPosDirect->setAccessLevel(1);
    pPosDirect->setUserAccessLevel(1);
    pPosDirect->setValueRank(-1);
    pPosDirect->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosDirect;
        valPosDirect.toVariant(defaultValue);
    }
    pPosDirect->setValue(defaultValue);
    pPosDirect->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pPosDirect);
    pY->addFullReference(reference);
    pPosDirect->addFullReference(reference);
    pPosDirect->setParentNodeId(pY->nodeId());

    // PosDirect -> ActPos
    UaBase::Variable *pPosDirectActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosDirect_ActPos, getTypeNamespace()));
    pPosDirectActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosDirectActPos->setAccessLevel(1);
    pPosDirectActPos->setUserAccessLevel(1);
    pPosDirectActPos->setValueRank(-1);
    pPosDirectActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectActPos->setValue(defaultValue);
    pPosDirectActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectActPos);
    pPosDirect->addFullReference(reference);
    pPosDirectActPos->addFullReference(reference);
    pPosDirectActPos->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> CmdPos
    UaBase::Variable *pPosDirectCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosDirect_CmdPos, getTypeNamespace()));
    pPosDirectCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosDirectCmdPos->setAccessLevel(3);
    pPosDirectCmdPos->setUserAccessLevel(3);
    pPosDirectCmdPos->setValueRank(-1);
    pPosDirectCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectCmdPos->setValue(defaultValue);
    pPosDirectCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectCmdPos);
    pPosDirect->addFullReference(reference);
    pPosDirectCmdPos->addFullReference(reference);
    pPosDirectCmdPos->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> EngineeringUnits
    UaBase::Variable *pPosDirectEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosDirect_EngineeringUnits, getTypeNamespace()));
    pPosDirectEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosDirectEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosDirectEngineeringUnits->setAccessLevel(1);
    pPosDirectEngineeringUnits->setUserAccessLevel(1);
    pPosDirectEngineeringUnits->setValueRank(-1);
    pPosDirectEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosDirectEngineeringUnits->setValue(defaultValue);
    pPosDirectEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectEngineeringUnits);
    pPosDirect->addFullReference(reference);
    pPosDirectEngineeringUnits->addFullReference(reference);
    pPosDirectEngineeringUnits->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> EURange
    UaBase::Variable *pPosDirectEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosDirect_EURange, getTypeNamespace()));
    pPosDirectEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosDirectEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosDirectEURange->setAccessLevel(1);
    pPosDirectEURange->setUserAccessLevel(1);
    pPosDirectEURange->setValueRank(-1);
    pPosDirectEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosDirectEURange->setValue(defaultValue);
    pPosDirectEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectEURange);
    pPosDirect->addFullReference(reference);
    pPosDirectEURange->addFullReference(reference);
    pPosDirectEURange->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> RemDist
    UaBase::Variable *pPosDirectRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosDirect_RemDist, getTypeNamespace()));
    pPosDirectRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosDirectRemDist->setAccessLevel(1);
    pPosDirectRemDist->setUserAccessLevel(1);
    pPosDirectRemDist->setValueRank(-1);
    pPosDirectRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectRemDist->setValue(defaultValue);
    pPosDirectRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectRemDist);
    pPosDirect->addFullReference(reference);
    pPosDirectRemDist->addFullReference(reference);
    pPosDirectRemDist->setParentNodeId(pPosDirect->nodeId());

    // PosIndirect
    UaBase::Variable *pPosIndirect = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosIndirect, getTypeNamespace()));
    pPosIndirect->setBrowseName(UaQualifiedName("PosIndirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirect->setDisplayName(UaLocalizedText("", "PosIndirect"));
    pPosIndirect->setAccessLevel(1);
    pPosIndirect->setUserAccessLevel(1);
    pPosIndirect->setValueRank(-1);
    pPosIndirect->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosIndirect;
        valPosIndirect.toVariant(defaultValue);
    }
    pPosIndirect->setValue(defaultValue);
    pPosIndirect->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pPosIndirect);
    pY->addFullReference(reference);
    pPosIndirect->addFullReference(reference);
    pPosIndirect->setParentNodeId(pY->nodeId());

    // PosIndirect -> ActPos
    UaBase::Variable *pPosIndirectActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosIndirect_ActPos, getTypeNamespace()));
    pPosIndirectActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosIndirectActPos->setAccessLevel(1);
    pPosIndirectActPos->setUserAccessLevel(1);
    pPosIndirectActPos->setValueRank(-1);
    pPosIndirectActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectActPos->setValue(defaultValue);
    pPosIndirectActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectActPos);
    pPosIndirect->addFullReference(reference);
    pPosIndirectActPos->addFullReference(reference);
    pPosIndirectActPos->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> CmdPos
    UaBase::Variable *pPosIndirectCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosIndirect_CmdPos, getTypeNamespace()));
    pPosIndirectCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosIndirectCmdPos->setAccessLevel(3);
    pPosIndirectCmdPos->setUserAccessLevel(3);
    pPosIndirectCmdPos->setValueRank(-1);
    pPosIndirectCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectCmdPos->setValue(defaultValue);
    pPosIndirectCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectCmdPos);
    pPosIndirect->addFullReference(reference);
    pPosIndirectCmdPos->addFullReference(reference);
    pPosIndirectCmdPos->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> EngineeringUnits
    UaBase::Variable *pPosIndirectEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosIndirect_EngineeringUnits, getTypeNamespace()));
    pPosIndirectEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosIndirectEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosIndirectEngineeringUnits->setAccessLevel(1);
    pPosIndirectEngineeringUnits->setUserAccessLevel(1);
    pPosIndirectEngineeringUnits->setValueRank(-1);
    pPosIndirectEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosIndirectEngineeringUnits->setValue(defaultValue);
    pPosIndirectEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectEngineeringUnits);
    pPosIndirect->addFullReference(reference);
    pPosIndirectEngineeringUnits->addFullReference(reference);
    pPosIndirectEngineeringUnits->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> EURange
    UaBase::Variable *pPosIndirectEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosIndirect_EURange, getTypeNamespace()));
    pPosIndirectEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosIndirectEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosIndirectEURange->setAccessLevel(1);
    pPosIndirectEURange->setUserAccessLevel(1);
    pPosIndirectEURange->setValueRank(-1);
    pPosIndirectEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosIndirectEURange->setValue(defaultValue);
    pPosIndirectEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectEURange);
    pPosIndirect->addFullReference(reference);
    pPosIndirectEURange->addFullReference(reference);
    pPosIndirectEURange->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> RemDist
    UaBase::Variable *pPosIndirectRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_PosIndirect_RemDist, getTypeNamespace()));
    pPosIndirectRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosIndirectRemDist->setAccessLevel(1);
    pPosIndirectRemDist->setUserAccessLevel(1);
    pPosIndirectRemDist->setValueRank(-1);
    pPosIndirectRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectRemDist->setValue(defaultValue);
    pPosIndirectRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectRemDist);
    pPosIndirect->addFullReference(reference);
    pPosIndirectRemDist->addFullReference(reference);
    pPosIndirectRemDist->setParentNodeId(pPosIndirect->nodeId());

    // ZeroOffset
    UaBase::Variable *pZeroOffset = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ZeroOffset, getTypeNamespace()));
    pZeroOffset->setBrowseName(UaQualifiedName("ZeroOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pZeroOffset->setDisplayName(UaLocalizedText("", "ZeroOffset"));
    pZeroOffset->setAccessLevel(1);
    pZeroOffset->setUserAccessLevel(1);
    pZeroOffset->setValueRank(-1);
    pZeroOffset->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pZeroOffset->setValue(defaultValue);
    pZeroOffset->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pY);
    reference.setTargetNode(pZeroOffset);
    pY->addFullReference(reference);
    pZeroOffset->addFullReference(reference);
    pZeroOffset->setParentNodeId(pY->nodeId());

    // ZeroOffset -> EURange
    UaBase::Variable *pZeroOffsetEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Y_ZeroOffset_EURange, getTypeNamespace()));
    pZeroOffsetEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pZeroOffsetEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pZeroOffsetEURange->setAccessLevel(1);
    pZeroOffsetEURange->setUserAccessLevel(1);
    pZeroOffsetEURange->setValueRank(-1);
    pZeroOffsetEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pZeroOffsetEURange->setValue(defaultValue);
    pZeroOffsetEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pZeroOffset);
    reference.setTargetNode(pZeroOffsetEURange);
    pZeroOffset->addFullReference(reference);
    pZeroOffsetEURange->addFullReference(reference);
    pZeroOffsetEURange->setParentNodeId(pZeroOffset->nodeId());

    OpcUaCnc::CncAxisType *pObjectType = new OpcUaCnc::CncAxisType(pY, (XmlUaNodeFactoryManager*) &factory, this);
    pObjectType->useAccessInfoFromType();

    referenceTypeId = OpcUaId_HasComponent;
    ret = addNodeAndReference(UaNodeId(OpcUaCncId_CncInterface_CncAxisList, OpcUaCnc::NodeManagerCNC::getTypeNamespace()), pObjectType, referenceTypeId);
    UA_ASSERT(ret.isGood());
    delete pActChannel;
    delete pActLoad;
    delete pActLoadEURange;
    delete pActPower;
    delete pActPowerEURange;
    delete pActStatus;
    delete pActTorque;
    delete pActTorqueEURange;
    delete pCmdTorque;
    delete pCmdTorqueEURange;
    delete pIsInactive;
    delete pIsReferenced;
    delete pIsRotational;
    delete pIsVirtual;
    delete pPosDirect;
    delete pPosDirectActPos;
    delete pPosDirectCmdPos;
    delete pPosDirectEngineeringUnits;
    delete pPosDirectEURange;
    delete pPosDirectRemDist;
    delete pPosIndirect;
    delete pPosIndirectActPos;
    delete pPosIndirectCmdPos;
    delete pPosIndirectEngineeringUnits;
    delete pPosIndirectEURange;
    delete pPosIndirectRemDist;
    delete pZeroOffset;
    delete pZeroOffsetEURange;
    delete pY;
    return ret;
}

UaStatus NodeManagerDemoBase::addObjectsFolderCncInterfaceCncAxisListZ(const XmlUaNodeFactoryManager &factory)
{
    UaStatus ret;
    UaVariant defaultValue;
    UaNodeId referenceTypeId;
    UaNodeId parentEventNodeId;
    UaBase::Object *pZ = new UaBase::Object(UaNodeId(DemoId_CncInterface_CncAxisList_Z, getTypeNamespace()));
    pZ->setBrowseName(UaQualifiedName("Z", getTypeNamespace()));
    pZ->setDisplayName(UaLocalizedText("", "Z"));
    UaBase::FullReference reference;
    // ActChannel
    UaBase::Variable *pActChannel = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActChannel, getTypeNamespace()));
    pActChannel->setBrowseName(UaQualifiedName("ActChannel", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActChannel->setDisplayName(UaLocalizedText("", "ActChannel"));
    pActChannel->setAccessLevel(1);
    pActChannel->setUserAccessLevel(1);
    pActChannel->setValueRank(-1);
    pActChannel->setDataTypeId(OpcUaId_NodeId);
    defaultValue.setNodeId(UaNodeId());
    pActChannel->setValue(defaultValue);
    pActChannel->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pActChannel);
    pZ->addFullReference(reference);
    pActChannel->addFullReference(reference);
    pActChannel->setParentNodeId(pZ->nodeId());

    // ActLoad
    UaBase::Variable *pActLoad = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActLoad, getTypeNamespace()));
    pActLoad->setBrowseName(UaQualifiedName("ActLoad", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActLoad->setDisplayName(UaLocalizedText("", "ActLoad"));
    pActLoad->setAccessLevel(1);
    pActLoad->setUserAccessLevel(1);
    pActLoad->setValueRank(-1);
    pActLoad->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActLoad->setValue(defaultValue);
    pActLoad->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pActLoad);
    pZ->addFullReference(reference);
    pActLoad->addFullReference(reference);
    pActLoad->setParentNodeId(pZ->nodeId());

    // ActLoad -> EURange
    UaBase::Variable *pActLoadEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActLoad_EURange, getTypeNamespace()));
    pActLoadEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActLoadEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActLoadEURange->setAccessLevel(1);
    pActLoadEURange->setUserAccessLevel(1);
    pActLoadEURange->setValueRank(-1);
    pActLoadEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActLoadEURange->setValue(defaultValue);
    pActLoadEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActLoad);
    reference.setTargetNode(pActLoadEURange);
    pActLoad->addFullReference(reference);
    pActLoadEURange->addFullReference(reference);
    pActLoadEURange->setParentNodeId(pActLoad->nodeId());

    // ActPower
    UaBase::Variable *pActPower = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActPower, getTypeNamespace()));
    pActPower->setBrowseName(UaQualifiedName("ActPower", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActPower->setDisplayName(UaLocalizedText("", "ActPower"));
    pActPower->setAccessLevel(1);
    pActPower->setUserAccessLevel(1);
    pActPower->setValueRank(-1);
    pActPower->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActPower->setValue(defaultValue);
    pActPower->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pActPower);
    pZ->addFullReference(reference);
    pActPower->addFullReference(reference);
    pActPower->setParentNodeId(pZ->nodeId());

    // ActPower -> EURange
    UaBase::Variable *pActPowerEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActPower_EURange, getTypeNamespace()));
    pActPowerEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActPowerEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActPowerEURange->setAccessLevel(1);
    pActPowerEURange->setUserAccessLevel(1);
    pActPowerEURange->setValueRank(-1);
    pActPowerEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActPowerEURange->setValue(defaultValue);
    pActPowerEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActPower);
    reference.setTargetNode(pActPowerEURange);
    pActPower->addFullReference(reference);
    pActPowerEURange->addFullReference(reference);
    pActPowerEURange->setParentNodeId(pActPower->nodeId());

    // ActStatus
    UaBase::Variable *pActStatus = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActStatus, getTypeNamespace()));
    pActStatus->setBrowseName(UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActStatus->setDisplayName(UaLocalizedText("", "ActStatus"));
    pActStatus->setAccessLevel(1);
    pActStatus->setUserAccessLevel(1);
    pActStatus->setValueRank(-1);
    pActStatus->setDataTypeId(UaNodeId(OpcUaCncId_CncAxisStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    defaultValue.setInt32((OpcUa_Int32) OpcUaCnc::CncAxisStatus_InPosition);
    pActStatus->setValue(defaultValue);
    pActStatus->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pActStatus);
    pZ->addFullReference(reference);
    pActStatus->addFullReference(reference);
    pActStatus->setParentNodeId(pZ->nodeId());

    // ActTorque
    UaBase::Variable *pActTorque = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActTorque, getTypeNamespace()));
    pActTorque->setBrowseName(UaQualifiedName("ActTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActTorque->setDisplayName(UaLocalizedText("", "ActTorque"));
    pActTorque->setAccessLevel(1);
    pActTorque->setUserAccessLevel(1);
    pActTorque->setValueRank(-1);
    pActTorque->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActTorque->setValue(defaultValue);
    pActTorque->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pActTorque);
    pZ->addFullReference(reference);
    pActTorque->addFullReference(reference);
    pActTorque->setParentNodeId(pZ->nodeId());

    // ActTorque -> EURange
    UaBase::Variable *pActTorqueEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ActTorque_EURange, getTypeNamespace()));
    pActTorqueEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActTorqueEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActTorqueEURange->setAccessLevel(1);
    pActTorqueEURange->setUserAccessLevel(1);
    pActTorqueEURange->setValueRank(-1);
    pActTorqueEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActTorqueEURange->setValue(defaultValue);
    pActTorqueEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActTorque);
    reference.setTargetNode(pActTorqueEURange);
    pActTorque->addFullReference(reference);
    pActTorqueEURange->addFullReference(reference);
    pActTorqueEURange->setParentNodeId(pActTorque->nodeId());

    // CmdTorque
    UaBase::Variable *pCmdTorque = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_CmdTorque, getTypeNamespace()));
    pCmdTorque->setBrowseName(UaQualifiedName("CmdTorque", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pCmdTorque->setDisplayName(UaLocalizedText("", "CmdTorque"));
    pCmdTorque->setAccessLevel(3);
    pCmdTorque->setUserAccessLevel(3);
    pCmdTorque->setValueRank(-1);
    pCmdTorque->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pCmdTorque->setValue(defaultValue);
    pCmdTorque->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pCmdTorque);
    pZ->addFullReference(reference);
    pCmdTorque->addFullReference(reference);
    pCmdTorque->setParentNodeId(pZ->nodeId());

    // CmdTorque -> EURange
    UaBase::Variable *pCmdTorqueEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_CmdTorque_EURange, getTypeNamespace()));
    pCmdTorqueEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pCmdTorqueEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pCmdTorqueEURange->setAccessLevel(1);
    pCmdTorqueEURange->setUserAccessLevel(1);
    pCmdTorqueEURange->setValueRank(-1);
    pCmdTorqueEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pCmdTorqueEURange->setValue(defaultValue);
    pCmdTorqueEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pCmdTorque);
    reference.setTargetNode(pCmdTorqueEURange);
    pCmdTorque->addFullReference(reference);
    pCmdTorqueEURange->addFullReference(reference);
    pCmdTorqueEURange->setParentNodeId(pCmdTorque->nodeId());

    // IsInactive
    UaBase::Variable *pIsInactive = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_IsInactive, getTypeNamespace()));
    pIsInactive->setBrowseName(UaQualifiedName("IsInactive", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsInactive->setDisplayName(UaLocalizedText("", "IsInactive"));
    pIsInactive->setAccessLevel(1);
    pIsInactive->setUserAccessLevel(1);
    pIsInactive->setValueRank(-1);
    pIsInactive->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsInactive->setValue(defaultValue);
    pIsInactive->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pIsInactive);
    pZ->addFullReference(reference);
    pIsInactive->addFullReference(reference);
    pIsInactive->setParentNodeId(pZ->nodeId());

    // IsReferenced
    UaBase::Variable *pIsReferenced = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_IsReferenced, getTypeNamespace()));
    pIsReferenced->setBrowseName(UaQualifiedName("IsReferenced", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsReferenced->setDisplayName(UaLocalizedText("", "IsReferenced"));
    pIsReferenced->setAccessLevel(1);
    pIsReferenced->setUserAccessLevel(1);
    pIsReferenced->setValueRank(-1);
    pIsReferenced->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsReferenced->setValue(defaultValue);
    pIsReferenced->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pIsReferenced);
    pZ->addFullReference(reference);
    pIsReferenced->addFullReference(reference);
    pIsReferenced->setParentNodeId(pZ->nodeId());

    // IsRotational
    UaBase::Variable *pIsRotational = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_IsRotational, getTypeNamespace()));
    pIsRotational->setBrowseName(UaQualifiedName("IsRotational", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsRotational->setDisplayName(UaLocalizedText("", "IsRotational"));
    pIsRotational->setAccessLevel(1);
    pIsRotational->setUserAccessLevel(1);
    pIsRotational->setValueRank(-1);
    pIsRotational->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsRotational->setValue(defaultValue);
    pIsRotational->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pIsRotational);
    pZ->addFullReference(reference);
    pIsRotational->addFullReference(reference);
    pIsRotational->setParentNodeId(pZ->nodeId());

    // IsVirtual
    UaBase::Variable *pIsVirtual = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_IsVirtual, getTypeNamespace()));
    pIsVirtual->setBrowseName(UaQualifiedName("IsVirtual", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pIsVirtual->setDisplayName(UaLocalizedText("", "IsVirtual"));
    pIsVirtual->setAccessLevel(1);
    pIsVirtual->setUserAccessLevel(1);
    pIsVirtual->setValueRank(-1);
    pIsVirtual->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pIsVirtual->setValue(defaultValue);
    pIsVirtual->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pIsVirtual);
    pZ->addFullReference(reference);
    pIsVirtual->addFullReference(reference);
    pIsVirtual->setParentNodeId(pZ->nodeId());

    // PosDirect
    UaBase::Variable *pPosDirect = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosDirect, getTypeNamespace()));
    pPosDirect->setBrowseName(UaQualifiedName("PosDirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirect->setDisplayName(UaLocalizedText("", "PosDirect"));
    pPosDirect->setAccessLevel(1);
    pPosDirect->setUserAccessLevel(1);
    pPosDirect->setValueRank(-1);
    pPosDirect->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosDirect;
        valPosDirect.toVariant(defaultValue);
    }
    pPosDirect->setValue(defaultValue);
    pPosDirect->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pPosDirect);
    pZ->addFullReference(reference);
    pPosDirect->addFullReference(reference);
    pPosDirect->setParentNodeId(pZ->nodeId());

    // PosDirect -> ActPos
    UaBase::Variable *pPosDirectActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosDirect_ActPos, getTypeNamespace()));
    pPosDirectActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosDirectActPos->setAccessLevel(1);
    pPosDirectActPos->setUserAccessLevel(1);
    pPosDirectActPos->setValueRank(-1);
    pPosDirectActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectActPos->setValue(defaultValue);
    pPosDirectActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectActPos);
    pPosDirect->addFullReference(reference);
    pPosDirectActPos->addFullReference(reference);
    pPosDirectActPos->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> CmdPos
    UaBase::Variable *pPosDirectCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosDirect_CmdPos, getTypeNamespace()));
    pPosDirectCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosDirectCmdPos->setAccessLevel(3);
    pPosDirectCmdPos->setUserAccessLevel(3);
    pPosDirectCmdPos->setValueRank(-1);
    pPosDirectCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectCmdPos->setValue(defaultValue);
    pPosDirectCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectCmdPos);
    pPosDirect->addFullReference(reference);
    pPosDirectCmdPos->addFullReference(reference);
    pPosDirectCmdPos->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> EngineeringUnits
    UaBase::Variable *pPosDirectEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosDirect_EngineeringUnits, getTypeNamespace()));
    pPosDirectEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosDirectEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosDirectEngineeringUnits->setAccessLevel(1);
    pPosDirectEngineeringUnits->setUserAccessLevel(1);
    pPosDirectEngineeringUnits->setValueRank(-1);
    pPosDirectEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosDirectEngineeringUnits->setValue(defaultValue);
    pPosDirectEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectEngineeringUnits);
    pPosDirect->addFullReference(reference);
    pPosDirectEngineeringUnits->addFullReference(reference);
    pPosDirectEngineeringUnits->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> EURange
    UaBase::Variable *pPosDirectEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosDirect_EURange, getTypeNamespace()));
    pPosDirectEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosDirectEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosDirectEURange->setAccessLevel(1);
    pPosDirectEURange->setUserAccessLevel(1);
    pPosDirectEURange->setValueRank(-1);
    pPosDirectEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosDirectEURange->setValue(defaultValue);
    pPosDirectEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectEURange);
    pPosDirect->addFullReference(reference);
    pPosDirectEURange->addFullReference(reference);
    pPosDirectEURange->setParentNodeId(pPosDirect->nodeId());

    // PosDirect -> RemDist
    UaBase::Variable *pPosDirectRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosDirect_RemDist, getTypeNamespace()));
    pPosDirectRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosDirectRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosDirectRemDist->setAccessLevel(1);
    pPosDirectRemDist->setUserAccessLevel(1);
    pPosDirectRemDist->setValueRank(-1);
    pPosDirectRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosDirectRemDist->setValue(defaultValue);
    pPosDirectRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosDirect);
    reference.setTargetNode(pPosDirectRemDist);
    pPosDirect->addFullReference(reference);
    pPosDirectRemDist->addFullReference(reference);
    pPosDirectRemDist->setParentNodeId(pPosDirect->nodeId());

    // PosIndirect
    UaBase::Variable *pPosIndirect = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosIndirect, getTypeNamespace()));
    pPosIndirect->setBrowseName(UaQualifiedName("PosIndirect", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirect->setDisplayName(UaLocalizedText("", "PosIndirect"));
    pPosIndirect->setAccessLevel(1);
    pPosIndirect->setUserAccessLevel(1);
    pPosIndirect->setValueRank(-1);
    pPosIndirect->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosIndirect;
        valPosIndirect.toVariant(defaultValue);
    }
    pPosIndirect->setValue(defaultValue);
    pPosIndirect->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pPosIndirect);
    pZ->addFullReference(reference);
    pPosIndirect->addFullReference(reference);
    pPosIndirect->setParentNodeId(pZ->nodeId());

    // PosIndirect -> ActPos
    UaBase::Variable *pPosIndirectActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosIndirect_ActPos, getTypeNamespace()));
    pPosIndirectActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosIndirectActPos->setAccessLevel(1);
    pPosIndirectActPos->setUserAccessLevel(1);
    pPosIndirectActPos->setValueRank(-1);
    pPosIndirectActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectActPos->setValue(defaultValue);
    pPosIndirectActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectActPos);
    pPosIndirect->addFullReference(reference);
    pPosIndirectActPos->addFullReference(reference);
    pPosIndirectActPos->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> CmdPos
    UaBase::Variable *pPosIndirectCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosIndirect_CmdPos, getTypeNamespace()));
    pPosIndirectCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosIndirectCmdPos->setAccessLevel(3);
    pPosIndirectCmdPos->setUserAccessLevel(3);
    pPosIndirectCmdPos->setValueRank(-1);
    pPosIndirectCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectCmdPos->setValue(defaultValue);
    pPosIndirectCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectCmdPos);
    pPosIndirect->addFullReference(reference);
    pPosIndirectCmdPos->addFullReference(reference);
    pPosIndirectCmdPos->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> EngineeringUnits
    UaBase::Variable *pPosIndirectEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosIndirect_EngineeringUnits, getTypeNamespace()));
    pPosIndirectEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosIndirectEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosIndirectEngineeringUnits->setAccessLevel(1);
    pPosIndirectEngineeringUnits->setUserAccessLevel(1);
    pPosIndirectEngineeringUnits->setValueRank(-1);
    pPosIndirectEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosIndirectEngineeringUnits->setValue(defaultValue);
    pPosIndirectEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectEngineeringUnits);
    pPosIndirect->addFullReference(reference);
    pPosIndirectEngineeringUnits->addFullReference(reference);
    pPosIndirectEngineeringUnits->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> EURange
    UaBase::Variable *pPosIndirectEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosIndirect_EURange, getTypeNamespace()));
    pPosIndirectEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosIndirectEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosIndirectEURange->setAccessLevel(1);
    pPosIndirectEURange->setUserAccessLevel(1);
    pPosIndirectEURange->setValueRank(-1);
    pPosIndirectEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosIndirectEURange->setValue(defaultValue);
    pPosIndirectEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectEURange);
    pPosIndirect->addFullReference(reference);
    pPosIndirectEURange->addFullReference(reference);
    pPosIndirectEURange->setParentNodeId(pPosIndirect->nodeId());

    // PosIndirect -> RemDist
    UaBase::Variable *pPosIndirectRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_PosIndirect_RemDist, getTypeNamespace()));
    pPosIndirectRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosIndirectRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosIndirectRemDist->setAccessLevel(1);
    pPosIndirectRemDist->setUserAccessLevel(1);
    pPosIndirectRemDist->setValueRank(-1);
    pPosIndirectRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosIndirectRemDist->setValue(defaultValue);
    pPosIndirectRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosIndirect);
    reference.setTargetNode(pPosIndirectRemDist);
    pPosIndirect->addFullReference(reference);
    pPosIndirectRemDist->addFullReference(reference);
    pPosIndirectRemDist->setParentNodeId(pPosIndirect->nodeId());

    // ZeroOffset
    UaBase::Variable *pZeroOffset = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ZeroOffset, getTypeNamespace()));
    pZeroOffset->setBrowseName(UaQualifiedName("ZeroOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pZeroOffset->setDisplayName(UaLocalizedText("", "ZeroOffset"));
    pZeroOffset->setAccessLevel(1);
    pZeroOffset->setUserAccessLevel(1);
    pZeroOffset->setValueRank(-1);
    pZeroOffset->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pZeroOffset->setValue(defaultValue);
    pZeroOffset->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pZ);
    reference.setTargetNode(pZeroOffset);
    pZ->addFullReference(reference);
    pZeroOffset->addFullReference(reference);
    pZeroOffset->setParentNodeId(pZ->nodeId());

    // ZeroOffset -> EURange
    UaBase::Variable *pZeroOffsetEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncAxisList_Z_ZeroOffset_EURange, getTypeNamespace()));
    pZeroOffsetEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pZeroOffsetEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pZeroOffsetEURange->setAccessLevel(1);
    pZeroOffsetEURange->setUserAccessLevel(1);
    pZeroOffsetEURange->setValueRank(-1);
    pZeroOffsetEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pZeroOffsetEURange->setValue(defaultValue);
    pZeroOffsetEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pZeroOffset);
    reference.setTargetNode(pZeroOffsetEURange);
    pZeroOffset->addFullReference(reference);
    pZeroOffsetEURange->addFullReference(reference);
    pZeroOffsetEURange->setParentNodeId(pZeroOffset->nodeId());

    OpcUaCnc::CncAxisType *pObjectType = new OpcUaCnc::CncAxisType(pZ, (XmlUaNodeFactoryManager*) &factory, this);
    pObjectType->useAccessInfoFromType();

    referenceTypeId = OpcUaId_HasComponent;
    ret = addNodeAndReference(UaNodeId(OpcUaCncId_CncInterface_CncAxisList, OpcUaCnc::NodeManagerCNC::getTypeNamespace()), pObjectType, referenceTypeId);
    UA_ASSERT(ret.isGood());
    delete pActChannel;
    delete pActLoad;
    delete pActLoadEURange;
    delete pActPower;
    delete pActPowerEURange;
    delete pActStatus;
    delete pActTorque;
    delete pActTorqueEURange;
    delete pCmdTorque;
    delete pCmdTorqueEURange;
    delete pIsInactive;
    delete pIsReferenced;
    delete pIsRotational;
    delete pIsVirtual;
    delete pPosDirect;
    delete pPosDirectActPos;
    delete pPosDirectCmdPos;
    delete pPosDirectEngineeringUnits;
    delete pPosDirectEURange;
    delete pPosDirectRemDist;
    delete pPosIndirect;
    delete pPosIndirectActPos;
    delete pPosIndirectCmdPos;
    delete pPosIndirectEngineeringUnits;
    delete pPosIndirectEURange;
    delete pPosIndirectRemDist;
    delete pZeroOffset;
    delete pZeroOffsetEURange;
    delete pZ;
    return ret;
}

UaStatus NodeManagerDemoBase::addObjectsFolderCncInterfaceCncChannelListChannel1(const XmlUaNodeFactoryManager &factory)
{
    UaStatus ret;
    UaVariant defaultValue;
    UaNodeId referenceTypeId;
    UaNodeId parentEventNodeId;
    UaBase::Object *pChannel1 = new UaBase::Object(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1, getTypeNamespace()));
    pChannel1->setBrowseName(UaQualifiedName("Channel1", getTypeNamespace()));
    pChannel1->setDisplayName(UaLocalizedText("", "Channel1"));
    UaBase::FullReference reference;
    // ActFeedrate
    UaBase::Variable *pActFeedrate = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActFeedrate, getTypeNamespace()));
    pActFeedrate->setBrowseName(UaQualifiedName("ActFeedrate", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActFeedrate->setDisplayName(UaLocalizedText("", "ActFeedrate"));
    pActFeedrate->setAccessLevel(1);
    pActFeedrate->setUserAccessLevel(1);
    pActFeedrate->setValueRank(-1);
    pActFeedrate->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActFeedrate->setValue(defaultValue);
    pActFeedrate->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActFeedrate);
    pChannel1->addFullReference(reference);
    pActFeedrate->addFullReference(reference);
    pActFeedrate->setParentNodeId(pChannel1->nodeId());

    // ActFeedrate -> EURange
    UaBase::Variable *pActFeedrateEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActFeedrate_EURange, getTypeNamespace()));
    pActFeedrateEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActFeedrateEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActFeedrateEURange->setAccessLevel(1);
    pActFeedrateEURange->setUserAccessLevel(1);
    pActFeedrateEURange->setValueRank(-1);
    pActFeedrateEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActFeedrateEURange->setValue(defaultValue);
    pActFeedrateEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActFeedrate);
    reference.setTargetNode(pActFeedrateEURange);
    pActFeedrate->addFullReference(reference);
    pActFeedrateEURange->addFullReference(reference);
    pActFeedrateEURange->setParentNodeId(pActFeedrate->nodeId());

    // ActGFunctions
    UaBase::Variable *pActGFunctions = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActGFunctions, getTypeNamespace()));
    pActGFunctions->setBrowseName(UaQualifiedName("ActGFunctions", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActGFunctions->setDisplayName(UaLocalizedText("", "ActGFunctions"));
    pActGFunctions->setAccessLevel(1);
    pActGFunctions->setUserAccessLevel(1);
    pActGFunctions->setValueRank(1);
    pActGFunctions->setDataTypeId(OpcUaId_UInt32);
    {
        UaUInt32Array valActGFunctionsArray;
        defaultValue.setUInt32Array(valActGFunctionsArray);
    }
    pActGFunctions->setValue(defaultValue);
    pActGFunctions->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActGFunctions);
    pChannel1->addFullReference(reference);
    pActGFunctions->addFullReference(reference);
    pActGFunctions->setParentNodeId(pChannel1->nodeId());

    // ActJogIncrement
    UaBase::Variable *pActJogIncrement = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActJogIncrement, getTypeNamespace()));
    pActJogIncrement->setBrowseName(UaQualifiedName("ActJogIncrement", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActJogIncrement->setDisplayName(UaLocalizedText("", "ActJogIncrement"));
    pActJogIncrement->setAccessLevel(1);
    pActJogIncrement->setUserAccessLevel(1);
    pActJogIncrement->setValueRank(-1);
    pActJogIncrement->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActJogIncrement->setValue(defaultValue);
    pActJogIncrement->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActJogIncrement);
    pChannel1->addFullReference(reference);
    pActJogIncrement->addFullReference(reference);
    pActJogIncrement->setParentNodeId(pChannel1->nodeId());

    // ActJogIncrement -> EURange
    UaBase::Variable *pActJogIncrementEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActJogIncrement_EURange, getTypeNamespace()));
    pActJogIncrementEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActJogIncrementEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActJogIncrementEURange->setAccessLevel(1);
    pActJogIncrementEURange->setUserAccessLevel(1);
    pActJogIncrementEURange->setValueRank(-1);
    pActJogIncrementEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActJogIncrementEURange->setValue(defaultValue);
    pActJogIncrementEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActJogIncrement);
    reference.setTargetNode(pActJogIncrementEURange);
    pActJogIncrement->addFullReference(reference);
    pActJogIncrementEURange->addFullReference(reference);
    pActJogIncrementEURange->setParentNodeId(pActJogIncrement->nodeId());

    // ActMainProgramFile
    UaBase::Variable *pActMainProgramFile = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActMainProgramFile, getTypeNamespace()));
    pActMainProgramFile->setBrowseName(UaQualifiedName("ActMainProgramFile", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActMainProgramFile->setDisplayName(UaLocalizedText("", "ActMainProgramFile"));
    pActMainProgramFile->setAccessLevel(1);
    pActMainProgramFile->setUserAccessLevel(1);
    pActMainProgramFile->setValueRank(-1);
    pActMainProgramFile->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActMainProgramFile->setValue(defaultValue);
    pActMainProgramFile->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActMainProgramFile);
    pChannel1->addFullReference(reference);
    pActMainProgramFile->addFullReference(reference);
    pActMainProgramFile->setParentNodeId(pChannel1->nodeId());

    // ActMainProgramFileOffset
    UaBase::Variable *pActMainProgramFileOffset = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActMainProgramFileOffset, getTypeNamespace()));
    pActMainProgramFileOffset->setBrowseName(UaQualifiedName("ActMainProgramFileOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActMainProgramFileOffset->setDisplayName(UaLocalizedText("", "ActMainProgramFileOffset"));
    pActMainProgramFileOffset->setAccessLevel(1);
    pActMainProgramFileOffset->setUserAccessLevel(1);
    pActMainProgramFileOffset->setValueRank(-1);
    pActMainProgramFileOffset->setDataTypeId(OpcUaId_UInt32);
    defaultValue.setUInt32(0);
    pActMainProgramFileOffset->setValue(defaultValue);
    pActMainProgramFileOffset->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActMainProgramFileOffset);
    pChannel1->addFullReference(reference);
    pActMainProgramFileOffset->addFullReference(reference);
    pActMainProgramFileOffset->setParentNodeId(pChannel1->nodeId());

    // ActMainProgramLine
    UaBase::Variable *pActMainProgramLine = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActMainProgramLine, getTypeNamespace()));
    pActMainProgramLine->setBrowseName(UaQualifiedName("ActMainProgramLine", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActMainProgramLine->setDisplayName(UaLocalizedText("", "ActMainProgramLine"));
    pActMainProgramLine->setAccessLevel(1);
    pActMainProgramLine->setUserAccessLevel(1);
    pActMainProgramLine->setValueRank(-1);
    pActMainProgramLine->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActMainProgramLine->setValue(defaultValue);
    pActMainProgramLine->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActMainProgramLine);
    pChannel1->addFullReference(reference);
    pActMainProgramLine->addFullReference(reference);
    pActMainProgramLine->setParentNodeId(pChannel1->nodeId());

    // ActMainProgramName
    UaBase::Variable *pActMainProgramName = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActMainProgramName, getTypeNamespace()));
    pActMainProgramName->setBrowseName(UaQualifiedName("ActMainProgramName", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActMainProgramName->setDisplayName(UaLocalizedText("", "ActMainProgramName"));
    pActMainProgramName->setAccessLevel(1);
    pActMainProgramName->setUserAccessLevel(1);
    pActMainProgramName->setValueRank(-1);
    pActMainProgramName->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActMainProgramName->setValue(defaultValue);
    pActMainProgramName->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActMainProgramName);
    pChannel1->addFullReference(reference);
    pActMainProgramName->addFullReference(reference);
    pActMainProgramName->setParentNodeId(pChannel1->nodeId());

    // ActMFunctions
    UaBase::Variable *pActMFunctions = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActMFunctions, getTypeNamespace()));
    pActMFunctions->setBrowseName(UaQualifiedName("ActMFunctions", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActMFunctions->setDisplayName(UaLocalizedText("", "ActMFunctions"));
    pActMFunctions->setAccessLevel(1);
    pActMFunctions->setUserAccessLevel(1);
    pActMFunctions->setValueRank(1);
    pActMFunctions->setDataTypeId(OpcUaId_UInt32);
    {
        UaUInt32Array valActMFunctionsArray;
        defaultValue.setUInt32Array(valActMFunctionsArray);
    }
    pActMFunctions->setValue(defaultValue);
    pActMFunctions->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActMFunctions);
    pChannel1->addFullReference(reference);
    pActMFunctions->addFullReference(reference);
    pActMFunctions->setParentNodeId(pChannel1->nodeId());

    // ActModalOffsetFunction
    UaBase::Variable *pActModalOffsetFunction = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActModalOffsetFunction, getTypeNamespace()));
    pActModalOffsetFunction->setBrowseName(UaQualifiedName("ActModalOffsetFunction", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActModalOffsetFunction->setDisplayName(UaLocalizedText("", "ActModalOffsetFunction"));
    pActModalOffsetFunction->setAccessLevel(1);
    pActModalOffsetFunction->setUserAccessLevel(1);
    pActModalOffsetFunction->setValueRank(-1);
    pActModalOffsetFunction->setDataTypeId(OpcUaId_UInt32);
    defaultValue.setUInt32(0);
    pActModalOffsetFunction->setValue(defaultValue);
    pActModalOffsetFunction->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActModalOffsetFunction);
    pChannel1->addFullReference(reference);
    pActModalOffsetFunction->addFullReference(reference);
    pActModalOffsetFunction->setParentNodeId(pChannel1->nodeId());

    // ActOperationMode
    UaBase::Variable *pActOperationMode = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActOperationMode, getTypeNamespace()));
    pActOperationMode->setBrowseName(UaQualifiedName("ActOperationMode", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActOperationMode->setDisplayName(UaLocalizedText("", "ActOperationMode"));
    pActOperationMode->setAccessLevel(1);
    pActOperationMode->setUserAccessLevel(1);
    pActOperationMode->setValueRank(-1);
    pActOperationMode->setDataTypeId(UaNodeId(OpcUaCncId_CncOperationMode, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    defaultValue.setInt32((OpcUa_Int32) OpcUaCnc::CncOperationMode_Manual);
    pActOperationMode->setValue(defaultValue);
    pActOperationMode->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActOperationMode);
    pChannel1->addFullReference(reference);
    pActOperationMode->addFullReference(reference);
    pActOperationMode->setParentNodeId(pChannel1->nodeId());

    // ActOverride
    UaBase::Variable *pActOverride = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActOverride, getTypeNamespace()));
    pActOverride->setBrowseName(UaQualifiedName("ActOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActOverride->setDisplayName(UaLocalizedText("", "ActOverride"));
    pActOverride->setAccessLevel(1);
    pActOverride->setUserAccessLevel(1);
    pActOverride->setValueRank(-1);
    pActOverride->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pActOverride->setValue(defaultValue);
    pActOverride->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActOverride);
    pChannel1->addFullReference(reference);
    pActOverride->addFullReference(reference);
    pActOverride->setParentNodeId(pChannel1->nodeId());

    // ActOverride -> EURange
    UaBase::Variable *pActOverrideEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActOverride_EURange, getTypeNamespace()));
    pActOverrideEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pActOverrideEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pActOverrideEURange->setAccessLevel(1);
    pActOverrideEURange->setUserAccessLevel(1);
    pActOverrideEURange->setValueRank(-1);
    pActOverrideEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pActOverrideEURange->setValue(defaultValue);
    pActOverrideEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pActOverride);
    reference.setTargetNode(pActOverrideEURange);
    pActOverride->addFullReference(reference);
    pActOverrideEURange->addFullReference(reference);
    pActOverrideEURange->setParentNodeId(pActOverride->nodeId());

    // ActProgramBlock
    UaBase::Variable *pActProgramBlock = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActProgramBlock, getTypeNamespace()));
    pActProgramBlock->setBrowseName(UaQualifiedName("ActProgramBlock", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActProgramBlock->setDisplayName(UaLocalizedText("", "ActProgramBlock"));
    pActProgramBlock->setAccessLevel(1);
    pActProgramBlock->setUserAccessLevel(1);
    pActProgramBlock->setValueRank(-1);
    pActProgramBlock->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActProgramBlock->setValue(defaultValue);
    pActProgramBlock->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActProgramBlock);
    pChannel1->addFullReference(reference);
    pActProgramBlock->addFullReference(reference);
    pActProgramBlock->setParentNodeId(pChannel1->nodeId());

    // ActProgramFile
    UaBase::Variable *pActProgramFile = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActProgramFile, getTypeNamespace()));
    pActProgramFile->setBrowseName(UaQualifiedName("ActProgramFile", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActProgramFile->setDisplayName(UaLocalizedText("", "ActProgramFile"));
    pActProgramFile->setAccessLevel(1);
    pActProgramFile->setUserAccessLevel(1);
    pActProgramFile->setValueRank(-1);
    pActProgramFile->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActProgramFile->setValue(defaultValue);
    pActProgramFile->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActProgramFile);
    pChannel1->addFullReference(reference);
    pActProgramFile->addFullReference(reference);
    pActProgramFile->setParentNodeId(pChannel1->nodeId());

    // ActProgramFileOffset
    UaBase::Variable *pActProgramFileOffset = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActProgramFileOffset, getTypeNamespace()));
    pActProgramFileOffset->setBrowseName(UaQualifiedName("ActProgramFileOffset", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActProgramFileOffset->setDisplayName(UaLocalizedText("", "ActProgramFileOffset"));
    pActProgramFileOffset->setAccessLevel(1);
    pActProgramFileOffset->setUserAccessLevel(1);
    pActProgramFileOffset->setValueRank(-1);
    pActProgramFileOffset->setDataTypeId(OpcUaId_UInt32);
    defaultValue.setUInt32(0);
    pActProgramFileOffset->setValue(defaultValue);
    pActProgramFileOffset->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActProgramFileOffset);
    pChannel1->addFullReference(reference);
    pActProgramFileOffset->addFullReference(reference);
    pActProgramFileOffset->setParentNodeId(pChannel1->nodeId());

    // ActProgramLine
    UaBase::Variable *pActProgramLine = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActProgramLine, getTypeNamespace()));
    pActProgramLine->setBrowseName(UaQualifiedName("ActProgramLine", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActProgramLine->setDisplayName(UaLocalizedText("", "ActProgramLine"));
    pActProgramLine->setAccessLevel(1);
    pActProgramLine->setUserAccessLevel(1);
    pActProgramLine->setValueRank(-1);
    pActProgramLine->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActProgramLine->setValue(defaultValue);
    pActProgramLine->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActProgramLine);
    pChannel1->addFullReference(reference);
    pActProgramLine->addFullReference(reference);
    pActProgramLine->setParentNodeId(pChannel1->nodeId());

    // ActProgramName
    UaBase::Variable *pActProgramName = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActProgramName, getTypeNamespace()));
    pActProgramName->setBrowseName(UaQualifiedName("ActProgramName", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActProgramName->setDisplayName(UaLocalizedText("", "ActProgramName"));
    pActProgramName->setAccessLevel(1);
    pActProgramName->setUserAccessLevel(1);
    pActProgramName->setValueRank(-1);
    pActProgramName->setDataTypeId(OpcUaId_String);
    defaultValue.setString("");
    pActProgramName->setValue(defaultValue);
    pActProgramName->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActProgramName);
    pChannel1->addFullReference(reference);
    pActProgramName->addFullReference(reference);
    pActProgramName->setParentNodeId(pChannel1->nodeId());

    // ActProgramStatus
    UaBase::Variable *pActProgramStatus = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActProgramStatus, getTypeNamespace()));
    pActProgramStatus->setBrowseName(UaQualifiedName("ActProgramStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActProgramStatus->setDisplayName(UaLocalizedText("", "ActProgramStatus"));
    pActProgramStatus->setAccessLevel(1);
    pActProgramStatus->setUserAccessLevel(1);
    pActProgramStatus->setValueRank(-1);
    pActProgramStatus->setDataTypeId(UaNodeId(OpcUaCncId_CncChannelProgramStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    defaultValue.setInt32((OpcUa_Int32) OpcUaCnc::CncChannelProgramStatus_Stopped);
    pActProgramStatus->setValue(defaultValue);
    pActProgramStatus->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActProgramStatus);
    pChannel1->addFullReference(reference);
    pActProgramStatus->addFullReference(reference);
    pActProgramStatus->setParentNodeId(pChannel1->nodeId());

    // ActStatus
    UaBase::Variable *pActStatus = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ActStatus, getTypeNamespace()));
    pActStatus->setBrowseName(UaQualifiedName("ActStatus", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pActStatus->setDisplayName(UaLocalizedText("", "ActStatus"));
    pActStatus->setAccessLevel(1);
    pActStatus->setUserAccessLevel(1);
    pActStatus->setValueRank(-1);
    pActStatus->setDataTypeId(UaNodeId(OpcUaCncId_CncChannelStatus, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    defaultValue.setInt32((OpcUa_Int32) OpcUaCnc::CncChannelStatus_Active);
    pActStatus->setValue(defaultValue);
    pActStatus->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pActStatus);
    pChannel1->addFullReference(reference);
    pActStatus->addFullReference(reference);
    pActStatus->setParentNodeId(pChannel1->nodeId());

    // BlockMode
    UaBase::Variable *pBlockMode = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_BlockMode, getTypeNamespace()));
    pBlockMode->setBrowseName(UaQualifiedName("BlockMode", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pBlockMode->setDisplayName(UaLocalizedText("", "BlockMode"));
    pBlockMode->setAccessLevel(1);
    pBlockMode->setUserAccessLevel(1);
    pBlockMode->setValueRank(-1);
    pBlockMode->setDataTypeId(OpcUaId_Boolean);
    defaultValue.setBool(OpcUa_False);
    pBlockMode->setValue(defaultValue);
    pBlockMode->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pBlockMode);
    pChannel1->addFullReference(reference);
    pBlockMode->addFullReference(reference);
    pBlockMode->setParentNodeId(pChannel1->nodeId());

    // CmdFeedrate
    UaBase::Variable *pCmdFeedrate = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_CmdFeedrate, getTypeNamespace()));
    pCmdFeedrate->setBrowseName(UaQualifiedName("CmdFeedrate", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pCmdFeedrate->setDisplayName(UaLocalizedText("", "CmdFeedrate"));
    pCmdFeedrate->setAccessLevel(3);
    pCmdFeedrate->setUserAccessLevel(3);
    pCmdFeedrate->setValueRank(-1);
    pCmdFeedrate->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pCmdFeedrate->setValue(defaultValue);
    pCmdFeedrate->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pCmdFeedrate);
    pChannel1->addFullReference(reference);
    pCmdFeedrate->addFullReference(reference);
    pCmdFeedrate->setParentNodeId(pChannel1->nodeId());

    // CmdFeedrate -> EURange
    UaBase::Variable *pCmdFeedrateEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_CmdFeedrate_EURange, getTypeNamespace()));
    pCmdFeedrateEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pCmdFeedrateEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pCmdFeedrateEURange->setAccessLevel(1);
    pCmdFeedrateEURange->setUserAccessLevel(1);
    pCmdFeedrateEURange->setValueRank(-1);
    pCmdFeedrateEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pCmdFeedrateEURange->setValue(defaultValue);
    pCmdFeedrateEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pCmdFeedrate);
    reference.setTargetNode(pCmdFeedrateEURange);
    pCmdFeedrate->addFullReference(reference);
    pCmdFeedrateEURange->addFullReference(reference);
    pCmdFeedrateEURange->setParentNodeId(pCmdFeedrate->nodeId());

    // CmdOverride
    UaBase::Variable *pCmdOverride = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_CmdOverride, getTypeNamespace()));
    pCmdOverride->setBrowseName(UaQualifiedName("CmdOverride", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pCmdOverride->setDisplayName(UaLocalizedText("", "CmdOverride"));
    pCmdOverride->setAccessLevel(3);
    pCmdOverride->setUserAccessLevel(3);
    pCmdOverride->setValueRank(-1);
    pCmdOverride->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pCmdOverride->setValue(defaultValue);
    pCmdOverride->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pCmdOverride);
    pChannel1->addFullReference(reference);
    pCmdOverride->addFullReference(reference);
    pCmdOverride->setParentNodeId(pChannel1->nodeId());

    // CmdOverride -> EURange
    UaBase::Variable *pCmdOverrideEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_CmdOverride_EURange, getTypeNamespace()));
    pCmdOverrideEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pCmdOverrideEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pCmdOverrideEURange->setAccessLevel(1);
    pCmdOverrideEURange->setUserAccessLevel(1);
    pCmdOverrideEURange->setValueRank(-1);
    pCmdOverrideEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pCmdOverrideEURange->setValue(defaultValue);
    pCmdOverrideEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pCmdOverride);
    reference.setTargetNode(pCmdOverrideEURange);
    pCmdOverride->addFullReference(reference);
    pCmdOverrideEURange->addFullReference(reference);
    pCmdOverrideEURange->setParentNodeId(pCmdOverride->nodeId());

    // DryRunFeed
    UaBase::Variable *pDryRunFeed = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_DryRunFeed, getTypeNamespace()));
    pDryRunFeed->setBrowseName(UaQualifiedName("DryRunFeed", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pDryRunFeed->setDisplayName(UaLocalizedText("", "DryRunFeed"));
    pDryRunFeed->setAccessLevel(1);
    pDryRunFeed->setUserAccessLevel(1);
    pDryRunFeed->setValueRank(-1);
    pDryRunFeed->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pDryRunFeed->setValue(defaultValue);
    pDryRunFeed->setTypeDefinitionId(OpcUaId_AnalogItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pDryRunFeed);
    pChannel1->addFullReference(reference);
    pDryRunFeed->addFullReference(reference);
    pDryRunFeed->setParentNodeId(pChannel1->nodeId());

    // DryRunFeed -> EURange
    UaBase::Variable *pDryRunFeedEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_DryRunFeed_EURange, getTypeNamespace()));
    pDryRunFeedEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pDryRunFeedEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pDryRunFeedEURange->setAccessLevel(1);
    pDryRunFeedEURange->setUserAccessLevel(1);
    pDryRunFeedEURange->setValueRank(-1);
    pDryRunFeedEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pDryRunFeedEURange->setValue(defaultValue);
    pDryRunFeedEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pDryRunFeed);
    reference.setTargetNode(pDryRunFeedEURange);
    pDryRunFeed->addFullReference(reference);
    pDryRunFeedEURange->addFullReference(reference);
    pDryRunFeedEURange->setParentNodeId(pDryRunFeed->nodeId());

    // FeedHold
    UaBase::Variable *pFeedHold = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_FeedHold, getTypeNamespace()));
    pFeedHold->setBrowseName(UaQualifiedName("FeedHold", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pFeedHold->setDisplayName(UaLocalizedText("", "FeedHold"));
    pFeedHold->setAccessLevel(1);
    pFeedHold->setUserAccessLevel(1);
    pFeedHold->setValueRank(-1);
    pFeedHold->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pFeedHold->setValue(defaultValue);
    pFeedHold->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pFeedHold);
    pChannel1->addFullReference(reference);
    pFeedHold->addFullReference(reference);
    pFeedHold->setParentNodeId(pChannel1->nodeId());

    // Id
    UaBase::Variable *pId = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_Id, getTypeNamespace()));
    pId->setBrowseName(UaQualifiedName("Id", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pId->setDisplayName(UaLocalizedText("", "Id"));
    pId->setAccessLevel(1);
    pId->setUserAccessLevel(1);
    pId->setValueRank(-1);
    pId->setDataTypeId(OpcUaId_UInt32);
    defaultValue.setUInt32(0);
    pId->setValue(defaultValue);
    pId->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pId);
    pChannel1->addFullReference(reference);
    pId->addFullReference(reference);
    pId->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsA
    UaBase::Variable *pPosTcpBcsA = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsA, getTypeNamespace()));
    pPosTcpBcsA->setBrowseName(UaQualifiedName("PosTcpBcsA", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsA->setDisplayName(UaLocalizedText("", "PosTcpBcsA"));
    pPosTcpBcsA->setAccessLevel(1);
    pPosTcpBcsA->setUserAccessLevel(1);
    pPosTcpBcsA->setValueRank(-1);
    pPosTcpBcsA->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpBcsA;
        valPosTcpBcsA.toVariant(defaultValue);
    }
    pPosTcpBcsA->setValue(defaultValue);
    pPosTcpBcsA->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpBcsA);
    pChannel1->addFullReference(reference);
    pPosTcpBcsA->addFullReference(reference);
    pPosTcpBcsA->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsA -> ActPos
    UaBase::Variable *pPosTcpBcsAActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsA_ActPos, getTypeNamespace()));
    pPosTcpBcsAActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsAActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpBcsAActPos->setAccessLevel(1);
    pPosTcpBcsAActPos->setUserAccessLevel(1);
    pPosTcpBcsAActPos->setValueRank(-1);
    pPosTcpBcsAActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsAActPos->setValue(defaultValue);
    pPosTcpBcsAActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsA);
    reference.setTargetNode(pPosTcpBcsAActPos);
    pPosTcpBcsA->addFullReference(reference);
    pPosTcpBcsAActPos->addFullReference(reference);
    pPosTcpBcsAActPos->setParentNodeId(pPosTcpBcsA->nodeId());

    // PosTcpBcsA -> CmdPos
    UaBase::Variable *pPosTcpBcsACmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsA_CmdPos, getTypeNamespace()));
    pPosTcpBcsACmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsACmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpBcsACmdPos->setAccessLevel(3);
    pPosTcpBcsACmdPos->setUserAccessLevel(3);
    pPosTcpBcsACmdPos->setValueRank(-1);
    pPosTcpBcsACmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsACmdPos->setValue(defaultValue);
    pPosTcpBcsACmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsA);
    reference.setTargetNode(pPosTcpBcsACmdPos);
    pPosTcpBcsA->addFullReference(reference);
    pPosTcpBcsACmdPos->addFullReference(reference);
    pPosTcpBcsACmdPos->setParentNodeId(pPosTcpBcsA->nodeId());

    // PosTcpBcsA -> EngineeringUnits
    UaBase::Variable *pPosTcpBcsAEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsA_EngineeringUnits, getTypeNamespace()));
    pPosTcpBcsAEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpBcsAEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpBcsAEngineeringUnits->setAccessLevel(1);
    pPosTcpBcsAEngineeringUnits->setUserAccessLevel(1);
    pPosTcpBcsAEngineeringUnits->setValueRank(-1);
    pPosTcpBcsAEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpBcsAEngineeringUnits->setValue(defaultValue);
    pPosTcpBcsAEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsA);
    reference.setTargetNode(pPosTcpBcsAEngineeringUnits);
    pPosTcpBcsA->addFullReference(reference);
    pPosTcpBcsAEngineeringUnits->addFullReference(reference);
    pPosTcpBcsAEngineeringUnits->setParentNodeId(pPosTcpBcsA->nodeId());

    // PosTcpBcsA -> EURange
    UaBase::Variable *pPosTcpBcsAEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsA_EURange, getTypeNamespace()));
    pPosTcpBcsAEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpBcsAEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpBcsAEURange->setAccessLevel(1);
    pPosTcpBcsAEURange->setUserAccessLevel(1);
    pPosTcpBcsAEURange->setValueRank(-1);
    pPosTcpBcsAEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpBcsAEURange->setValue(defaultValue);
    pPosTcpBcsAEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsA);
    reference.setTargetNode(pPosTcpBcsAEURange);
    pPosTcpBcsA->addFullReference(reference);
    pPosTcpBcsAEURange->addFullReference(reference);
    pPosTcpBcsAEURange->setParentNodeId(pPosTcpBcsA->nodeId());

    // PosTcpBcsA -> RemDist
    UaBase::Variable *pPosTcpBcsARemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsA_RemDist, getTypeNamespace()));
    pPosTcpBcsARemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsARemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpBcsARemDist->setAccessLevel(1);
    pPosTcpBcsARemDist->setUserAccessLevel(1);
    pPosTcpBcsARemDist->setValueRank(-1);
    pPosTcpBcsARemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsARemDist->setValue(defaultValue);
    pPosTcpBcsARemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsA);
    reference.setTargetNode(pPosTcpBcsARemDist);
    pPosTcpBcsA->addFullReference(reference);
    pPosTcpBcsARemDist->addFullReference(reference);
    pPosTcpBcsARemDist->setParentNodeId(pPosTcpBcsA->nodeId());

    // PosTcpBcsB
    UaBase::Variable *pPosTcpBcsB = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsB, getTypeNamespace()));
    pPosTcpBcsB->setBrowseName(UaQualifiedName("PosTcpBcsB", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsB->setDisplayName(UaLocalizedText("", "PosTcpBcsB"));
    pPosTcpBcsB->setAccessLevel(1);
    pPosTcpBcsB->setUserAccessLevel(1);
    pPosTcpBcsB->setValueRank(-1);
    pPosTcpBcsB->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpBcsB;
        valPosTcpBcsB.toVariant(defaultValue);
    }
    pPosTcpBcsB->setValue(defaultValue);
    pPosTcpBcsB->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpBcsB);
    pChannel1->addFullReference(reference);
    pPosTcpBcsB->addFullReference(reference);
    pPosTcpBcsB->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsB -> ActPos
    UaBase::Variable *pPosTcpBcsBActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsB_ActPos, getTypeNamespace()));
    pPosTcpBcsBActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsBActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpBcsBActPos->setAccessLevel(1);
    pPosTcpBcsBActPos->setUserAccessLevel(1);
    pPosTcpBcsBActPos->setValueRank(-1);
    pPosTcpBcsBActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsBActPos->setValue(defaultValue);
    pPosTcpBcsBActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsB);
    reference.setTargetNode(pPosTcpBcsBActPos);
    pPosTcpBcsB->addFullReference(reference);
    pPosTcpBcsBActPos->addFullReference(reference);
    pPosTcpBcsBActPos->setParentNodeId(pPosTcpBcsB->nodeId());

    // PosTcpBcsB -> CmdPos
    UaBase::Variable *pPosTcpBcsBCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsB_CmdPos, getTypeNamespace()));
    pPosTcpBcsBCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsBCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpBcsBCmdPos->setAccessLevel(3);
    pPosTcpBcsBCmdPos->setUserAccessLevel(3);
    pPosTcpBcsBCmdPos->setValueRank(-1);
    pPosTcpBcsBCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsBCmdPos->setValue(defaultValue);
    pPosTcpBcsBCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsB);
    reference.setTargetNode(pPosTcpBcsBCmdPos);
    pPosTcpBcsB->addFullReference(reference);
    pPosTcpBcsBCmdPos->addFullReference(reference);
    pPosTcpBcsBCmdPos->setParentNodeId(pPosTcpBcsB->nodeId());

    // PosTcpBcsB -> EngineeringUnits
    UaBase::Variable *pPosTcpBcsBEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsB_EngineeringUnits, getTypeNamespace()));
    pPosTcpBcsBEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpBcsBEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpBcsBEngineeringUnits->setAccessLevel(1);
    pPosTcpBcsBEngineeringUnits->setUserAccessLevel(1);
    pPosTcpBcsBEngineeringUnits->setValueRank(-1);
    pPosTcpBcsBEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpBcsBEngineeringUnits->setValue(defaultValue);
    pPosTcpBcsBEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsB);
    reference.setTargetNode(pPosTcpBcsBEngineeringUnits);
    pPosTcpBcsB->addFullReference(reference);
    pPosTcpBcsBEngineeringUnits->addFullReference(reference);
    pPosTcpBcsBEngineeringUnits->setParentNodeId(pPosTcpBcsB->nodeId());

    // PosTcpBcsB -> EURange
    UaBase::Variable *pPosTcpBcsBEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsB_EURange, getTypeNamespace()));
    pPosTcpBcsBEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpBcsBEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpBcsBEURange->setAccessLevel(1);
    pPosTcpBcsBEURange->setUserAccessLevel(1);
    pPosTcpBcsBEURange->setValueRank(-1);
    pPosTcpBcsBEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpBcsBEURange->setValue(defaultValue);
    pPosTcpBcsBEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsB);
    reference.setTargetNode(pPosTcpBcsBEURange);
    pPosTcpBcsB->addFullReference(reference);
    pPosTcpBcsBEURange->addFullReference(reference);
    pPosTcpBcsBEURange->setParentNodeId(pPosTcpBcsB->nodeId());

    // PosTcpBcsB -> RemDist
    UaBase::Variable *pPosTcpBcsBRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsB_RemDist, getTypeNamespace()));
    pPosTcpBcsBRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsBRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpBcsBRemDist->setAccessLevel(1);
    pPosTcpBcsBRemDist->setUserAccessLevel(1);
    pPosTcpBcsBRemDist->setValueRank(-1);
    pPosTcpBcsBRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsBRemDist->setValue(defaultValue);
    pPosTcpBcsBRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsB);
    reference.setTargetNode(pPosTcpBcsBRemDist);
    pPosTcpBcsB->addFullReference(reference);
    pPosTcpBcsBRemDist->addFullReference(reference);
    pPosTcpBcsBRemDist->setParentNodeId(pPosTcpBcsB->nodeId());

    // PosTcpBcsC
    UaBase::Variable *pPosTcpBcsC = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsC, getTypeNamespace()));
    pPosTcpBcsC->setBrowseName(UaQualifiedName("PosTcpBcsC", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsC->setDisplayName(UaLocalizedText("", "PosTcpBcsC"));
    pPosTcpBcsC->setAccessLevel(1);
    pPosTcpBcsC->setUserAccessLevel(1);
    pPosTcpBcsC->setValueRank(-1);
    pPosTcpBcsC->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpBcsC;
        valPosTcpBcsC.toVariant(defaultValue);
    }
    pPosTcpBcsC->setValue(defaultValue);
    pPosTcpBcsC->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpBcsC);
    pChannel1->addFullReference(reference);
    pPosTcpBcsC->addFullReference(reference);
    pPosTcpBcsC->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsC -> ActPos
    UaBase::Variable *pPosTcpBcsCActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsC_ActPos, getTypeNamespace()));
    pPosTcpBcsCActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsCActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpBcsCActPos->setAccessLevel(1);
    pPosTcpBcsCActPos->setUserAccessLevel(1);
    pPosTcpBcsCActPos->setValueRank(-1);
    pPosTcpBcsCActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsCActPos->setValue(defaultValue);
    pPosTcpBcsCActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsC);
    reference.setTargetNode(pPosTcpBcsCActPos);
    pPosTcpBcsC->addFullReference(reference);
    pPosTcpBcsCActPos->addFullReference(reference);
    pPosTcpBcsCActPos->setParentNodeId(pPosTcpBcsC->nodeId());

    // PosTcpBcsC -> CmdPos
    UaBase::Variable *pPosTcpBcsCCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsC_CmdPos, getTypeNamespace()));
    pPosTcpBcsCCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsCCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpBcsCCmdPos->setAccessLevel(3);
    pPosTcpBcsCCmdPos->setUserAccessLevel(3);
    pPosTcpBcsCCmdPos->setValueRank(-1);
    pPosTcpBcsCCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsCCmdPos->setValue(defaultValue);
    pPosTcpBcsCCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsC);
    reference.setTargetNode(pPosTcpBcsCCmdPos);
    pPosTcpBcsC->addFullReference(reference);
    pPosTcpBcsCCmdPos->addFullReference(reference);
    pPosTcpBcsCCmdPos->setParentNodeId(pPosTcpBcsC->nodeId());

    // PosTcpBcsC -> EngineeringUnits
    UaBase::Variable *pPosTcpBcsCEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsC_EngineeringUnits, getTypeNamespace()));
    pPosTcpBcsCEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpBcsCEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpBcsCEngineeringUnits->setAccessLevel(1);
    pPosTcpBcsCEngineeringUnits->setUserAccessLevel(1);
    pPosTcpBcsCEngineeringUnits->setValueRank(-1);
    pPosTcpBcsCEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpBcsCEngineeringUnits->setValue(defaultValue);
    pPosTcpBcsCEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsC);
    reference.setTargetNode(pPosTcpBcsCEngineeringUnits);
    pPosTcpBcsC->addFullReference(reference);
    pPosTcpBcsCEngineeringUnits->addFullReference(reference);
    pPosTcpBcsCEngineeringUnits->setParentNodeId(pPosTcpBcsC->nodeId());

    // PosTcpBcsC -> EURange
    UaBase::Variable *pPosTcpBcsCEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsC_EURange, getTypeNamespace()));
    pPosTcpBcsCEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpBcsCEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpBcsCEURange->setAccessLevel(1);
    pPosTcpBcsCEURange->setUserAccessLevel(1);
    pPosTcpBcsCEURange->setValueRank(-1);
    pPosTcpBcsCEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpBcsCEURange->setValue(defaultValue);
    pPosTcpBcsCEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsC);
    reference.setTargetNode(pPosTcpBcsCEURange);
    pPosTcpBcsC->addFullReference(reference);
    pPosTcpBcsCEURange->addFullReference(reference);
    pPosTcpBcsCEURange->setParentNodeId(pPosTcpBcsC->nodeId());

    // PosTcpBcsC -> RemDist
    UaBase::Variable *pPosTcpBcsCRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsC_RemDist, getTypeNamespace()));
    pPosTcpBcsCRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsCRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpBcsCRemDist->setAccessLevel(1);
    pPosTcpBcsCRemDist->setUserAccessLevel(1);
    pPosTcpBcsCRemDist->setValueRank(-1);
    pPosTcpBcsCRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsCRemDist->setValue(defaultValue);
    pPosTcpBcsCRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsC);
    reference.setTargetNode(pPosTcpBcsCRemDist);
    pPosTcpBcsC->addFullReference(reference);
    pPosTcpBcsCRemDist->addFullReference(reference);
    pPosTcpBcsCRemDist->setParentNodeId(pPosTcpBcsC->nodeId());

    // PosTcpBcsX
    UaBase::Variable *pPosTcpBcsX = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsX, getTypeNamespace()));
    pPosTcpBcsX->setBrowseName(UaQualifiedName("PosTcpBcsX", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsX->setDisplayName(UaLocalizedText("", "PosTcpBcsX"));
    pPosTcpBcsX->setAccessLevel(1);
    pPosTcpBcsX->setUserAccessLevel(1);
    pPosTcpBcsX->setValueRank(-1);
    pPosTcpBcsX->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpBcsX;
        valPosTcpBcsX.toVariant(defaultValue);
    }
    pPosTcpBcsX->setValue(defaultValue);
    pPosTcpBcsX->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpBcsX);
    pChannel1->addFullReference(reference);
    pPosTcpBcsX->addFullReference(reference);
    pPosTcpBcsX->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsX -> ActPos
    UaBase::Variable *pPosTcpBcsXActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsX_ActPos, getTypeNamespace()));
    pPosTcpBcsXActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsXActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpBcsXActPos->setAccessLevel(1);
    pPosTcpBcsXActPos->setUserAccessLevel(1);
    pPosTcpBcsXActPos->setValueRank(-1);
    pPosTcpBcsXActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsXActPos->setValue(defaultValue);
    pPosTcpBcsXActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsX);
    reference.setTargetNode(pPosTcpBcsXActPos);
    pPosTcpBcsX->addFullReference(reference);
    pPosTcpBcsXActPos->addFullReference(reference);
    pPosTcpBcsXActPos->setParentNodeId(pPosTcpBcsX->nodeId());

    // PosTcpBcsX -> CmdPos
    UaBase::Variable *pPosTcpBcsXCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsX_CmdPos, getTypeNamespace()));
    pPosTcpBcsXCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsXCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpBcsXCmdPos->setAccessLevel(3);
    pPosTcpBcsXCmdPos->setUserAccessLevel(3);
    pPosTcpBcsXCmdPos->setValueRank(-1);
    pPosTcpBcsXCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsXCmdPos->setValue(defaultValue);
    pPosTcpBcsXCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsX);
    reference.setTargetNode(pPosTcpBcsXCmdPos);
    pPosTcpBcsX->addFullReference(reference);
    pPosTcpBcsXCmdPos->addFullReference(reference);
    pPosTcpBcsXCmdPos->setParentNodeId(pPosTcpBcsX->nodeId());

    // PosTcpBcsX -> EngineeringUnits
    UaBase::Variable *pPosTcpBcsXEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsX_EngineeringUnits, getTypeNamespace()));
    pPosTcpBcsXEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpBcsXEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpBcsXEngineeringUnits->setAccessLevel(1);
    pPosTcpBcsXEngineeringUnits->setUserAccessLevel(1);
    pPosTcpBcsXEngineeringUnits->setValueRank(-1);
    pPosTcpBcsXEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpBcsXEngineeringUnits->setValue(defaultValue);
    pPosTcpBcsXEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsX);
    reference.setTargetNode(pPosTcpBcsXEngineeringUnits);
    pPosTcpBcsX->addFullReference(reference);
    pPosTcpBcsXEngineeringUnits->addFullReference(reference);
    pPosTcpBcsXEngineeringUnits->setParentNodeId(pPosTcpBcsX->nodeId());

    // PosTcpBcsX -> EURange
    UaBase::Variable *pPosTcpBcsXEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsX_EURange, getTypeNamespace()));
    pPosTcpBcsXEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpBcsXEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpBcsXEURange->setAccessLevel(1);
    pPosTcpBcsXEURange->setUserAccessLevel(1);
    pPosTcpBcsXEURange->setValueRank(-1);
    pPosTcpBcsXEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpBcsXEURange->setValue(defaultValue);
    pPosTcpBcsXEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsX);
    reference.setTargetNode(pPosTcpBcsXEURange);
    pPosTcpBcsX->addFullReference(reference);
    pPosTcpBcsXEURange->addFullReference(reference);
    pPosTcpBcsXEURange->setParentNodeId(pPosTcpBcsX->nodeId());

    // PosTcpBcsX -> RemDist
    UaBase::Variable *pPosTcpBcsXRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsX_RemDist, getTypeNamespace()));
    pPosTcpBcsXRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsXRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpBcsXRemDist->setAccessLevel(1);
    pPosTcpBcsXRemDist->setUserAccessLevel(1);
    pPosTcpBcsXRemDist->setValueRank(-1);
    pPosTcpBcsXRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsXRemDist->setValue(defaultValue);
    pPosTcpBcsXRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsX);
    reference.setTargetNode(pPosTcpBcsXRemDist);
    pPosTcpBcsX->addFullReference(reference);
    pPosTcpBcsXRemDist->addFullReference(reference);
    pPosTcpBcsXRemDist->setParentNodeId(pPosTcpBcsX->nodeId());

    // PosTcpBcsY
    UaBase::Variable *pPosTcpBcsY = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsY, getTypeNamespace()));
    pPosTcpBcsY->setBrowseName(UaQualifiedName("PosTcpBcsY", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsY->setDisplayName(UaLocalizedText("", "PosTcpBcsY"));
    pPosTcpBcsY->setAccessLevel(1);
    pPosTcpBcsY->setUserAccessLevel(1);
    pPosTcpBcsY->setValueRank(-1);
    pPosTcpBcsY->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpBcsY;
        valPosTcpBcsY.toVariant(defaultValue);
    }
    pPosTcpBcsY->setValue(defaultValue);
    pPosTcpBcsY->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpBcsY);
    pChannel1->addFullReference(reference);
    pPosTcpBcsY->addFullReference(reference);
    pPosTcpBcsY->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsY -> ActPos
    UaBase::Variable *pPosTcpBcsYActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsY_ActPos, getTypeNamespace()));
    pPosTcpBcsYActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsYActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpBcsYActPos->setAccessLevel(1);
    pPosTcpBcsYActPos->setUserAccessLevel(1);
    pPosTcpBcsYActPos->setValueRank(-1);
    pPosTcpBcsYActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsYActPos->setValue(defaultValue);
    pPosTcpBcsYActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsY);
    reference.setTargetNode(pPosTcpBcsYActPos);
    pPosTcpBcsY->addFullReference(reference);
    pPosTcpBcsYActPos->addFullReference(reference);
    pPosTcpBcsYActPos->setParentNodeId(pPosTcpBcsY->nodeId());

    // PosTcpBcsY -> CmdPos
    UaBase::Variable *pPosTcpBcsYCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsY_CmdPos, getTypeNamespace()));
    pPosTcpBcsYCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsYCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpBcsYCmdPos->setAccessLevel(3);
    pPosTcpBcsYCmdPos->setUserAccessLevel(3);
    pPosTcpBcsYCmdPos->setValueRank(-1);
    pPosTcpBcsYCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsYCmdPos->setValue(defaultValue);
    pPosTcpBcsYCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsY);
    reference.setTargetNode(pPosTcpBcsYCmdPos);
    pPosTcpBcsY->addFullReference(reference);
    pPosTcpBcsYCmdPos->addFullReference(reference);
    pPosTcpBcsYCmdPos->setParentNodeId(pPosTcpBcsY->nodeId());

    // PosTcpBcsY -> EngineeringUnits
    UaBase::Variable *pPosTcpBcsYEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsY_EngineeringUnits, getTypeNamespace()));
    pPosTcpBcsYEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpBcsYEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpBcsYEngineeringUnits->setAccessLevel(1);
    pPosTcpBcsYEngineeringUnits->setUserAccessLevel(1);
    pPosTcpBcsYEngineeringUnits->setValueRank(-1);
    pPosTcpBcsYEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpBcsYEngineeringUnits->setValue(defaultValue);
    pPosTcpBcsYEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsY);
    reference.setTargetNode(pPosTcpBcsYEngineeringUnits);
    pPosTcpBcsY->addFullReference(reference);
    pPosTcpBcsYEngineeringUnits->addFullReference(reference);
    pPosTcpBcsYEngineeringUnits->setParentNodeId(pPosTcpBcsY->nodeId());

    // PosTcpBcsY -> EURange
    UaBase::Variable *pPosTcpBcsYEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsY_EURange, getTypeNamespace()));
    pPosTcpBcsYEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpBcsYEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpBcsYEURange->setAccessLevel(1);
    pPosTcpBcsYEURange->setUserAccessLevel(1);
    pPosTcpBcsYEURange->setValueRank(-1);
    pPosTcpBcsYEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpBcsYEURange->setValue(defaultValue);
    pPosTcpBcsYEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsY);
    reference.setTargetNode(pPosTcpBcsYEURange);
    pPosTcpBcsY->addFullReference(reference);
    pPosTcpBcsYEURange->addFullReference(reference);
    pPosTcpBcsYEURange->setParentNodeId(pPosTcpBcsY->nodeId());

    // PosTcpBcsY -> RemDist
    UaBase::Variable *pPosTcpBcsYRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsY_RemDist, getTypeNamespace()));
    pPosTcpBcsYRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsYRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpBcsYRemDist->setAccessLevel(1);
    pPosTcpBcsYRemDist->setUserAccessLevel(1);
    pPosTcpBcsYRemDist->setValueRank(-1);
    pPosTcpBcsYRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsYRemDist->setValue(defaultValue);
    pPosTcpBcsYRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsY);
    reference.setTargetNode(pPosTcpBcsYRemDist);
    pPosTcpBcsY->addFullReference(reference);
    pPosTcpBcsYRemDist->addFullReference(reference);
    pPosTcpBcsYRemDist->setParentNodeId(pPosTcpBcsY->nodeId());

    // PosTcpBcsZ
    UaBase::Variable *pPosTcpBcsZ = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsZ, getTypeNamespace()));
    pPosTcpBcsZ->setBrowseName(UaQualifiedName("PosTcpBcsZ", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsZ->setDisplayName(UaLocalizedText("", "PosTcpBcsZ"));
    pPosTcpBcsZ->setAccessLevel(1);
    pPosTcpBcsZ->setUserAccessLevel(1);
    pPosTcpBcsZ->setValueRank(-1);
    pPosTcpBcsZ->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpBcsZ;
        valPosTcpBcsZ.toVariant(defaultValue);
    }
    pPosTcpBcsZ->setValue(defaultValue);
    pPosTcpBcsZ->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpBcsZ);
    pChannel1->addFullReference(reference);
    pPosTcpBcsZ->addFullReference(reference);
    pPosTcpBcsZ->setParentNodeId(pChannel1->nodeId());

    // PosTcpBcsZ -> ActPos
    UaBase::Variable *pPosTcpBcsZActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsZ_ActPos, getTypeNamespace()));
    pPosTcpBcsZActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsZActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpBcsZActPos->setAccessLevel(1);
    pPosTcpBcsZActPos->setUserAccessLevel(1);
    pPosTcpBcsZActPos->setValueRank(-1);
    pPosTcpBcsZActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsZActPos->setValue(defaultValue);
    pPosTcpBcsZActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsZ);
    reference.setTargetNode(pPosTcpBcsZActPos);
    pPosTcpBcsZ->addFullReference(reference);
    pPosTcpBcsZActPos->addFullReference(reference);
    pPosTcpBcsZActPos->setParentNodeId(pPosTcpBcsZ->nodeId());

    // PosTcpBcsZ -> CmdPos
    UaBase::Variable *pPosTcpBcsZCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsZ_CmdPos, getTypeNamespace()));
    pPosTcpBcsZCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsZCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpBcsZCmdPos->setAccessLevel(3);
    pPosTcpBcsZCmdPos->setUserAccessLevel(3);
    pPosTcpBcsZCmdPos->setValueRank(-1);
    pPosTcpBcsZCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsZCmdPos->setValue(defaultValue);
    pPosTcpBcsZCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsZ);
    reference.setTargetNode(pPosTcpBcsZCmdPos);
    pPosTcpBcsZ->addFullReference(reference);
    pPosTcpBcsZCmdPos->addFullReference(reference);
    pPosTcpBcsZCmdPos->setParentNodeId(pPosTcpBcsZ->nodeId());

    // PosTcpBcsZ -> EngineeringUnits
    UaBase::Variable *pPosTcpBcsZEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsZ_EngineeringUnits, getTypeNamespace()));
    pPosTcpBcsZEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpBcsZEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpBcsZEngineeringUnits->setAccessLevel(1);
    pPosTcpBcsZEngineeringUnits->setUserAccessLevel(1);
    pPosTcpBcsZEngineeringUnits->setValueRank(-1);
    pPosTcpBcsZEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpBcsZEngineeringUnits->setValue(defaultValue);
    pPosTcpBcsZEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsZ);
    reference.setTargetNode(pPosTcpBcsZEngineeringUnits);
    pPosTcpBcsZ->addFullReference(reference);
    pPosTcpBcsZEngineeringUnits->addFullReference(reference);
    pPosTcpBcsZEngineeringUnits->setParentNodeId(pPosTcpBcsZ->nodeId());

    // PosTcpBcsZ -> EURange
    UaBase::Variable *pPosTcpBcsZEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsZ_EURange, getTypeNamespace()));
    pPosTcpBcsZEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpBcsZEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpBcsZEURange->setAccessLevel(1);
    pPosTcpBcsZEURange->setUserAccessLevel(1);
    pPosTcpBcsZEURange->setValueRank(-1);
    pPosTcpBcsZEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpBcsZEURange->setValue(defaultValue);
    pPosTcpBcsZEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpBcsZ);
    reference.setTargetNode(pPosTcpBcsZEURange);
    pPosTcpBcsZ->addFullReference(reference);
    pPosTcpBcsZEURange->addFullReference(reference);
    pPosTcpBcsZEURange->setParentNodeId(pPosTcpBcsZ->nodeId());

    // PosTcpBcsZ -> RemDist
    UaBase::Variable *pPosTcpBcsZRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpBcsZ_RemDist, getTypeNamespace()));
    pPosTcpBcsZRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpBcsZRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpBcsZRemDist->setAccessLevel(1);
    pPosTcpBcsZRemDist->setUserAccessLevel(1);
    pPosTcpBcsZRemDist->setValueRank(-1);
    pPosTcpBcsZRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpBcsZRemDist->setValue(defaultValue);
    pPosTcpBcsZRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpBcsZ);
    reference.setTargetNode(pPosTcpBcsZRemDist);
    pPosTcpBcsZ->addFullReference(reference);
    pPosTcpBcsZRemDist->addFullReference(reference);
    pPosTcpBcsZRemDist->setParentNodeId(pPosTcpBcsZ->nodeId());

    // PosTcpWcsA
    UaBase::Variable *pPosTcpWcsA = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsA, getTypeNamespace()));
    pPosTcpWcsA->setBrowseName(UaQualifiedName("PosTcpWcsA", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsA->setDisplayName(UaLocalizedText("", "PosTcpWcsA"));
    pPosTcpWcsA->setAccessLevel(1);
    pPosTcpWcsA->setUserAccessLevel(1);
    pPosTcpWcsA->setValueRank(-1);
    pPosTcpWcsA->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpWcsA;
        valPosTcpWcsA.toVariant(defaultValue);
    }
    pPosTcpWcsA->setValue(defaultValue);
    pPosTcpWcsA->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpWcsA);
    pChannel1->addFullReference(reference);
    pPosTcpWcsA->addFullReference(reference);
    pPosTcpWcsA->setParentNodeId(pChannel1->nodeId());

    // PosTcpWcsA -> ActPos
    UaBase::Variable *pPosTcpWcsAActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsA_ActPos, getTypeNamespace()));
    pPosTcpWcsAActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsAActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpWcsAActPos->setAccessLevel(1);
    pPosTcpWcsAActPos->setUserAccessLevel(1);
    pPosTcpWcsAActPos->setValueRank(-1);
    pPosTcpWcsAActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsAActPos->setValue(defaultValue);
    pPosTcpWcsAActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsA);
    reference.setTargetNode(pPosTcpWcsAActPos);
    pPosTcpWcsA->addFullReference(reference);
    pPosTcpWcsAActPos->addFullReference(reference);
    pPosTcpWcsAActPos->setParentNodeId(pPosTcpWcsA->nodeId());

    // PosTcpWcsA -> CmdPos
    UaBase::Variable *pPosTcpWcsACmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsA_CmdPos, getTypeNamespace()));
    pPosTcpWcsACmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsACmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpWcsACmdPos->setAccessLevel(3);
    pPosTcpWcsACmdPos->setUserAccessLevel(3);
    pPosTcpWcsACmdPos->setValueRank(-1);
    pPosTcpWcsACmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsACmdPos->setValue(defaultValue);
    pPosTcpWcsACmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsA);
    reference.setTargetNode(pPosTcpWcsACmdPos);
    pPosTcpWcsA->addFullReference(reference);
    pPosTcpWcsACmdPos->addFullReference(reference);
    pPosTcpWcsACmdPos->setParentNodeId(pPosTcpWcsA->nodeId());

    // PosTcpWcsA -> EngineeringUnits
    UaBase::Variable *pPosTcpWcsAEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsA_EngineeringUnits, getTypeNamespace()));
    pPosTcpWcsAEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpWcsAEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpWcsAEngineeringUnits->setAccessLevel(1);
    pPosTcpWcsAEngineeringUnits->setUserAccessLevel(1);
    pPosTcpWcsAEngineeringUnits->setValueRank(-1);
    pPosTcpWcsAEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpWcsAEngineeringUnits->setValue(defaultValue);
    pPosTcpWcsAEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsA);
    reference.setTargetNode(pPosTcpWcsAEngineeringUnits);
    pPosTcpWcsA->addFullReference(reference);
    pPosTcpWcsAEngineeringUnits->addFullReference(reference);
    pPosTcpWcsAEngineeringUnits->setParentNodeId(pPosTcpWcsA->nodeId());

    // PosTcpWcsA -> EURange
    UaBase::Variable *pPosTcpWcsAEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsA_EURange, getTypeNamespace()));
    pPosTcpWcsAEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpWcsAEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpWcsAEURange->setAccessLevel(1);
    pPosTcpWcsAEURange->setUserAccessLevel(1);
    pPosTcpWcsAEURange->setValueRank(-1);
    pPosTcpWcsAEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpWcsAEURange->setValue(defaultValue);
    pPosTcpWcsAEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsA);
    reference.setTargetNode(pPosTcpWcsAEURange);
    pPosTcpWcsA->addFullReference(reference);
    pPosTcpWcsAEURange->addFullReference(reference);
    pPosTcpWcsAEURange->setParentNodeId(pPosTcpWcsA->nodeId());

    // PosTcpWcsA -> RemDist
    UaBase::Variable *pPosTcpWcsARemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsA_RemDist, getTypeNamespace()));
    pPosTcpWcsARemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsARemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpWcsARemDist->setAccessLevel(1);
    pPosTcpWcsARemDist->setUserAccessLevel(1);
    pPosTcpWcsARemDist->setValueRank(-1);
    pPosTcpWcsARemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsARemDist->setValue(defaultValue);
    pPosTcpWcsARemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsA);
    reference.setTargetNode(pPosTcpWcsARemDist);
    pPosTcpWcsA->addFullReference(reference);
    pPosTcpWcsARemDist->addFullReference(reference);
    pPosTcpWcsARemDist->setParentNodeId(pPosTcpWcsA->nodeId());

    // PosTcpWcsB
    UaBase::Variable *pPosTcpWcsB = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsB, getTypeNamespace()));
    pPosTcpWcsB->setBrowseName(UaQualifiedName("PosTcpWcsB", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsB->setDisplayName(UaLocalizedText("", "PosTcpWcsB"));
    pPosTcpWcsB->setAccessLevel(1);
    pPosTcpWcsB->setUserAccessLevel(1);
    pPosTcpWcsB->setValueRank(-1);
    pPosTcpWcsB->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpWcsB;
        valPosTcpWcsB.toVariant(defaultValue);
    }
    pPosTcpWcsB->setValue(defaultValue);
    pPosTcpWcsB->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpWcsB);
    pChannel1->addFullReference(reference);
    pPosTcpWcsB->addFullReference(reference);
    pPosTcpWcsB->setParentNodeId(pChannel1->nodeId());

    // PosTcpWcsB -> ActPos
    UaBase::Variable *pPosTcpWcsBActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsB_ActPos, getTypeNamespace()));
    pPosTcpWcsBActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsBActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpWcsBActPos->setAccessLevel(1);
    pPosTcpWcsBActPos->setUserAccessLevel(1);
    pPosTcpWcsBActPos->setValueRank(-1);
    pPosTcpWcsBActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsBActPos->setValue(defaultValue);
    pPosTcpWcsBActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsB);
    reference.setTargetNode(pPosTcpWcsBActPos);
    pPosTcpWcsB->addFullReference(reference);
    pPosTcpWcsBActPos->addFullReference(reference);
    pPosTcpWcsBActPos->setParentNodeId(pPosTcpWcsB->nodeId());

    // PosTcpWcsB -> CmdPos
    UaBase::Variable *pPosTcpWcsBCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsB_CmdPos, getTypeNamespace()));
    pPosTcpWcsBCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsBCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpWcsBCmdPos->setAccessLevel(3);
    pPosTcpWcsBCmdPos->setUserAccessLevel(3);
    pPosTcpWcsBCmdPos->setValueRank(-1);
    pPosTcpWcsBCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsBCmdPos->setValue(defaultValue);
    pPosTcpWcsBCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsB);
    reference.setTargetNode(pPosTcpWcsBCmdPos);
    pPosTcpWcsB->addFullReference(reference);
    pPosTcpWcsBCmdPos->addFullReference(reference);
    pPosTcpWcsBCmdPos->setParentNodeId(pPosTcpWcsB->nodeId());

    // PosTcpWcsB -> EngineeringUnits
    UaBase::Variable *pPosTcpWcsBEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsB_EngineeringUnits, getTypeNamespace()));
    pPosTcpWcsBEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpWcsBEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpWcsBEngineeringUnits->setAccessLevel(1);
    pPosTcpWcsBEngineeringUnits->setUserAccessLevel(1);
    pPosTcpWcsBEngineeringUnits->setValueRank(-1);
    pPosTcpWcsBEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpWcsBEngineeringUnits->setValue(defaultValue);
    pPosTcpWcsBEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsB);
    reference.setTargetNode(pPosTcpWcsBEngineeringUnits);
    pPosTcpWcsB->addFullReference(reference);
    pPosTcpWcsBEngineeringUnits->addFullReference(reference);
    pPosTcpWcsBEngineeringUnits->setParentNodeId(pPosTcpWcsB->nodeId());

    // PosTcpWcsB -> EURange
    UaBase::Variable *pPosTcpWcsBEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsB_EURange, getTypeNamespace()));
    pPosTcpWcsBEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpWcsBEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpWcsBEURange->setAccessLevel(1);
    pPosTcpWcsBEURange->setUserAccessLevel(1);
    pPosTcpWcsBEURange->setValueRank(-1);
    pPosTcpWcsBEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpWcsBEURange->setValue(defaultValue);
    pPosTcpWcsBEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsB);
    reference.setTargetNode(pPosTcpWcsBEURange);
    pPosTcpWcsB->addFullReference(reference);
    pPosTcpWcsBEURange->addFullReference(reference);
    pPosTcpWcsBEURange->setParentNodeId(pPosTcpWcsB->nodeId());

    // PosTcpWcsB -> RemDist
    UaBase::Variable *pPosTcpWcsBRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsB_RemDist, getTypeNamespace()));
    pPosTcpWcsBRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsBRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpWcsBRemDist->setAccessLevel(1);
    pPosTcpWcsBRemDist->setUserAccessLevel(1);
    pPosTcpWcsBRemDist->setValueRank(-1);
    pPosTcpWcsBRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsBRemDist->setValue(defaultValue);
    pPosTcpWcsBRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsB);
    reference.setTargetNode(pPosTcpWcsBRemDist);
    pPosTcpWcsB->addFullReference(reference);
    pPosTcpWcsBRemDist->addFullReference(reference);
    pPosTcpWcsBRemDist->setParentNodeId(pPosTcpWcsB->nodeId());

    // PosTcpWcsC
    UaBase::Variable *pPosTcpWcsC = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsC, getTypeNamespace()));
    pPosTcpWcsC->setBrowseName(UaQualifiedName("PosTcpWcsC", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsC->setDisplayName(UaLocalizedText("", "PosTcpWcsC"));
    pPosTcpWcsC->setAccessLevel(1);
    pPosTcpWcsC->setUserAccessLevel(1);
    pPosTcpWcsC->setValueRank(-1);
    pPosTcpWcsC->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpWcsC;
        valPosTcpWcsC.toVariant(defaultValue);
    }
    pPosTcpWcsC->setValue(defaultValue);
    pPosTcpWcsC->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpWcsC);
    pChannel1->addFullReference(reference);
    pPosTcpWcsC->addFullReference(reference);
    pPosTcpWcsC->setParentNodeId(pChannel1->nodeId());

    // PosTcpWcsC -> ActPos
    UaBase::Variable *pPosTcpWcsCActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsC_ActPos, getTypeNamespace()));
    pPosTcpWcsCActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsCActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpWcsCActPos->setAccessLevel(1);
    pPosTcpWcsCActPos->setUserAccessLevel(1);
    pPosTcpWcsCActPos->setValueRank(-1);
    pPosTcpWcsCActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsCActPos->setValue(defaultValue);
    pPosTcpWcsCActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsC);
    reference.setTargetNode(pPosTcpWcsCActPos);
    pPosTcpWcsC->addFullReference(reference);
    pPosTcpWcsCActPos->addFullReference(reference);
    pPosTcpWcsCActPos->setParentNodeId(pPosTcpWcsC->nodeId());

    // PosTcpWcsC -> CmdPos
    UaBase::Variable *pPosTcpWcsCCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsC_CmdPos, getTypeNamespace()));
    pPosTcpWcsCCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsCCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpWcsCCmdPos->setAccessLevel(3);
    pPosTcpWcsCCmdPos->setUserAccessLevel(3);
    pPosTcpWcsCCmdPos->setValueRank(-1);
    pPosTcpWcsCCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsCCmdPos->setValue(defaultValue);
    pPosTcpWcsCCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsC);
    reference.setTargetNode(pPosTcpWcsCCmdPos);
    pPosTcpWcsC->addFullReference(reference);
    pPosTcpWcsCCmdPos->addFullReference(reference);
    pPosTcpWcsCCmdPos->setParentNodeId(pPosTcpWcsC->nodeId());

    // PosTcpWcsC -> EngineeringUnits
    UaBase::Variable *pPosTcpWcsCEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsC_EngineeringUnits, getTypeNamespace()));
    pPosTcpWcsCEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpWcsCEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpWcsCEngineeringUnits->setAccessLevel(1);
    pPosTcpWcsCEngineeringUnits->setUserAccessLevel(1);
    pPosTcpWcsCEngineeringUnits->setValueRank(-1);
    pPosTcpWcsCEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpWcsCEngineeringUnits->setValue(defaultValue);
    pPosTcpWcsCEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsC);
    reference.setTargetNode(pPosTcpWcsCEngineeringUnits);
    pPosTcpWcsC->addFullReference(reference);
    pPosTcpWcsCEngineeringUnits->addFullReference(reference);
    pPosTcpWcsCEngineeringUnits->setParentNodeId(pPosTcpWcsC->nodeId());

    // PosTcpWcsC -> EURange
    UaBase::Variable *pPosTcpWcsCEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsC_EURange, getTypeNamespace()));
    pPosTcpWcsCEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpWcsCEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpWcsCEURange->setAccessLevel(1);
    pPosTcpWcsCEURange->setUserAccessLevel(1);
    pPosTcpWcsCEURange->setValueRank(-1);
    pPosTcpWcsCEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpWcsCEURange->setValue(defaultValue);
    pPosTcpWcsCEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsC);
    reference.setTargetNode(pPosTcpWcsCEURange);
    pPosTcpWcsC->addFullReference(reference);
    pPosTcpWcsCEURange->addFullReference(reference);
    pPosTcpWcsCEURange->setParentNodeId(pPosTcpWcsC->nodeId());

    // PosTcpWcsC -> RemDist
    UaBase::Variable *pPosTcpWcsCRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsC_RemDist, getTypeNamespace()));
    pPosTcpWcsCRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsCRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpWcsCRemDist->setAccessLevel(1);
    pPosTcpWcsCRemDist->setUserAccessLevel(1);
    pPosTcpWcsCRemDist->setValueRank(-1);
    pPosTcpWcsCRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsCRemDist->setValue(defaultValue);
    pPosTcpWcsCRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsC);
    reference.setTargetNode(pPosTcpWcsCRemDist);
    pPosTcpWcsC->addFullReference(reference);
    pPosTcpWcsCRemDist->addFullReference(reference);
    pPosTcpWcsCRemDist->setParentNodeId(pPosTcpWcsC->nodeId());

    // PosTcpWcsX
    UaBase::Variable *pPosTcpWcsX = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsX, getTypeNamespace()));
    pPosTcpWcsX->setBrowseName(UaQualifiedName("PosTcpWcsX", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsX->setDisplayName(UaLocalizedText("", "PosTcpWcsX"));
    pPosTcpWcsX->setAccessLevel(1);
    pPosTcpWcsX->setUserAccessLevel(1);
    pPosTcpWcsX->setValueRank(-1);
    pPosTcpWcsX->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpWcsX;
        valPosTcpWcsX.toVariant(defaultValue);
    }
    pPosTcpWcsX->setValue(defaultValue);
    pPosTcpWcsX->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpWcsX);
    pChannel1->addFullReference(reference);
    pPosTcpWcsX->addFullReference(reference);
    pPosTcpWcsX->setParentNodeId(pChannel1->nodeId());

    // PosTcpWcsX -> ActPos
    UaBase::Variable *pPosTcpWcsXActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsX_ActPos, getTypeNamespace()));
    pPosTcpWcsXActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsXActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpWcsXActPos->setAccessLevel(1);
    pPosTcpWcsXActPos->setUserAccessLevel(1);
    pPosTcpWcsXActPos->setValueRank(-1);
    pPosTcpWcsXActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsXActPos->setValue(defaultValue);
    pPosTcpWcsXActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsX);
    reference.setTargetNode(pPosTcpWcsXActPos);
    pPosTcpWcsX->addFullReference(reference);
    pPosTcpWcsXActPos->addFullReference(reference);
    pPosTcpWcsXActPos->setParentNodeId(pPosTcpWcsX->nodeId());

    // PosTcpWcsX -> CmdPos
    UaBase::Variable *pPosTcpWcsXCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsX_CmdPos, getTypeNamespace()));
    pPosTcpWcsXCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsXCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpWcsXCmdPos->setAccessLevel(3);
    pPosTcpWcsXCmdPos->setUserAccessLevel(3);
    pPosTcpWcsXCmdPos->setValueRank(-1);
    pPosTcpWcsXCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsXCmdPos->setValue(defaultValue);
    pPosTcpWcsXCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsX);
    reference.setTargetNode(pPosTcpWcsXCmdPos);
    pPosTcpWcsX->addFullReference(reference);
    pPosTcpWcsXCmdPos->addFullReference(reference);
    pPosTcpWcsXCmdPos->setParentNodeId(pPosTcpWcsX->nodeId());

    // PosTcpWcsX -> EngineeringUnits
    UaBase::Variable *pPosTcpWcsXEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsX_EngineeringUnits, getTypeNamespace()));
    pPosTcpWcsXEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpWcsXEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpWcsXEngineeringUnits->setAccessLevel(1);
    pPosTcpWcsXEngineeringUnits->setUserAccessLevel(1);
    pPosTcpWcsXEngineeringUnits->setValueRank(-1);
    pPosTcpWcsXEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpWcsXEngineeringUnits->setValue(defaultValue);
    pPosTcpWcsXEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsX);
    reference.setTargetNode(pPosTcpWcsXEngineeringUnits);
    pPosTcpWcsX->addFullReference(reference);
    pPosTcpWcsXEngineeringUnits->addFullReference(reference);
    pPosTcpWcsXEngineeringUnits->setParentNodeId(pPosTcpWcsX->nodeId());

    // PosTcpWcsX -> EURange
    UaBase::Variable *pPosTcpWcsXEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsX_EURange, getTypeNamespace()));
    pPosTcpWcsXEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpWcsXEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpWcsXEURange->setAccessLevel(1);
    pPosTcpWcsXEURange->setUserAccessLevel(1);
    pPosTcpWcsXEURange->setValueRank(-1);
    pPosTcpWcsXEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpWcsXEURange->setValue(defaultValue);
    pPosTcpWcsXEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsX);
    reference.setTargetNode(pPosTcpWcsXEURange);
    pPosTcpWcsX->addFullReference(reference);
    pPosTcpWcsXEURange->addFullReference(reference);
    pPosTcpWcsXEURange->setParentNodeId(pPosTcpWcsX->nodeId());

    // PosTcpWcsX -> RemDist
    UaBase::Variable *pPosTcpWcsXRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsX_RemDist, getTypeNamespace()));
    pPosTcpWcsXRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsXRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpWcsXRemDist->setAccessLevel(1);
    pPosTcpWcsXRemDist->setUserAccessLevel(1);
    pPosTcpWcsXRemDist->setValueRank(-1);
    pPosTcpWcsXRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsXRemDist->setValue(defaultValue);
    pPosTcpWcsXRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsX);
    reference.setTargetNode(pPosTcpWcsXRemDist);
    pPosTcpWcsX->addFullReference(reference);
    pPosTcpWcsXRemDist->addFullReference(reference);
    pPosTcpWcsXRemDist->setParentNodeId(pPosTcpWcsX->nodeId());

    // PosTcpWcsY
    UaBase::Variable *pPosTcpWcsY = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsY, getTypeNamespace()));
    pPosTcpWcsY->setBrowseName(UaQualifiedName("PosTcpWcsY", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsY->setDisplayName(UaLocalizedText("", "PosTcpWcsY"));
    pPosTcpWcsY->setAccessLevel(1);
    pPosTcpWcsY->setUserAccessLevel(1);
    pPosTcpWcsY->setValueRank(-1);
    pPosTcpWcsY->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpWcsY;
        valPosTcpWcsY.toVariant(defaultValue);
    }
    pPosTcpWcsY->setValue(defaultValue);
    pPosTcpWcsY->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpWcsY);
    pChannel1->addFullReference(reference);
    pPosTcpWcsY->addFullReference(reference);
    pPosTcpWcsY->setParentNodeId(pChannel1->nodeId());

    // PosTcpWcsY -> ActPos
    UaBase::Variable *pPosTcpWcsYActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsY_ActPos, getTypeNamespace()));
    pPosTcpWcsYActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsYActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpWcsYActPos->setAccessLevel(1);
    pPosTcpWcsYActPos->setUserAccessLevel(1);
    pPosTcpWcsYActPos->setValueRank(-1);
    pPosTcpWcsYActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsYActPos->setValue(defaultValue);
    pPosTcpWcsYActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsY);
    reference.setTargetNode(pPosTcpWcsYActPos);
    pPosTcpWcsY->addFullReference(reference);
    pPosTcpWcsYActPos->addFullReference(reference);
    pPosTcpWcsYActPos->setParentNodeId(pPosTcpWcsY->nodeId());

    // PosTcpWcsY -> CmdPos
    UaBase::Variable *pPosTcpWcsYCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsY_CmdPos, getTypeNamespace()));
    pPosTcpWcsYCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsYCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpWcsYCmdPos->setAccessLevel(3);
    pPosTcpWcsYCmdPos->setUserAccessLevel(3);
    pPosTcpWcsYCmdPos->setValueRank(-1);
    pPosTcpWcsYCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsYCmdPos->setValue(defaultValue);
    pPosTcpWcsYCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsY);
    reference.setTargetNode(pPosTcpWcsYCmdPos);
    pPosTcpWcsY->addFullReference(reference);
    pPosTcpWcsYCmdPos->addFullReference(reference);
    pPosTcpWcsYCmdPos->setParentNodeId(pPosTcpWcsY->nodeId());

    // PosTcpWcsY -> EngineeringUnits
    UaBase::Variable *pPosTcpWcsYEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsY_EngineeringUnits, getTypeNamespace()));
    pPosTcpWcsYEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpWcsYEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpWcsYEngineeringUnits->setAccessLevel(1);
    pPosTcpWcsYEngineeringUnits->setUserAccessLevel(1);
    pPosTcpWcsYEngineeringUnits->setValueRank(-1);
    pPosTcpWcsYEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpWcsYEngineeringUnits->setValue(defaultValue);
    pPosTcpWcsYEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsY);
    reference.setTargetNode(pPosTcpWcsYEngineeringUnits);
    pPosTcpWcsY->addFullReference(reference);
    pPosTcpWcsYEngineeringUnits->addFullReference(reference);
    pPosTcpWcsYEngineeringUnits->setParentNodeId(pPosTcpWcsY->nodeId());

    // PosTcpWcsY -> EURange
    UaBase::Variable *pPosTcpWcsYEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsY_EURange, getTypeNamespace()));
    pPosTcpWcsYEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpWcsYEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpWcsYEURange->setAccessLevel(1);
    pPosTcpWcsYEURange->setUserAccessLevel(1);
    pPosTcpWcsYEURange->setValueRank(-1);
    pPosTcpWcsYEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpWcsYEURange->setValue(defaultValue);
    pPosTcpWcsYEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsY);
    reference.setTargetNode(pPosTcpWcsYEURange);
    pPosTcpWcsY->addFullReference(reference);
    pPosTcpWcsYEURange->addFullReference(reference);
    pPosTcpWcsYEURange->setParentNodeId(pPosTcpWcsY->nodeId());

    // PosTcpWcsY -> RemDist
    UaBase::Variable *pPosTcpWcsYRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsY_RemDist, getTypeNamespace()));
    pPosTcpWcsYRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsYRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpWcsYRemDist->setAccessLevel(1);
    pPosTcpWcsYRemDist->setUserAccessLevel(1);
    pPosTcpWcsYRemDist->setValueRank(-1);
    pPosTcpWcsYRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsYRemDist->setValue(defaultValue);
    pPosTcpWcsYRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsY);
    reference.setTargetNode(pPosTcpWcsYRemDist);
    pPosTcpWcsY->addFullReference(reference);
    pPosTcpWcsYRemDist->addFullReference(reference);
    pPosTcpWcsYRemDist->setParentNodeId(pPosTcpWcsY->nodeId());

    // PosTcpWcsZ
    UaBase::Variable *pPosTcpWcsZ = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsZ, getTypeNamespace()));
    pPosTcpWcsZ->setBrowseName(UaQualifiedName("PosTcpWcsZ", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsZ->setDisplayName(UaLocalizedText("", "PosTcpWcsZ"));
    pPosTcpWcsZ->setAccessLevel(1);
    pPosTcpWcsZ->setUserAccessLevel(1);
    pPosTcpWcsZ->setValueRank(-1);
    pPosTcpWcsZ->setDataTypeId(UaNodeId(OpcUaCncId_CncPositionType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    {
        OpcUaCnc::CncPositionType valPosTcpWcsZ;
        valPosTcpWcsZ.toVariant(defaultValue);
    }
    pPosTcpWcsZ->setValue(defaultValue);
    pPosTcpWcsZ->setTypeDefinitionId(UaNodeId(OpcUaCncId_CncPositionVariableType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pPosTcpWcsZ);
    pChannel1->addFullReference(reference);
    pPosTcpWcsZ->addFullReference(reference);
    pPosTcpWcsZ->setParentNodeId(pChannel1->nodeId());

    // PosTcpWcsZ -> ActPos
    UaBase::Variable *pPosTcpWcsZActPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsZ_ActPos, getTypeNamespace()));
    pPosTcpWcsZActPos->setBrowseName(UaQualifiedName("ActPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsZActPos->setDisplayName(UaLocalizedText("", "ActPos"));
    pPosTcpWcsZActPos->setAccessLevel(1);
    pPosTcpWcsZActPos->setUserAccessLevel(1);
    pPosTcpWcsZActPos->setValueRank(-1);
    pPosTcpWcsZActPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsZActPos->setValue(defaultValue);
    pPosTcpWcsZActPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsZ);
    reference.setTargetNode(pPosTcpWcsZActPos);
    pPosTcpWcsZ->addFullReference(reference);
    pPosTcpWcsZActPos->addFullReference(reference);
    pPosTcpWcsZActPos->setParentNodeId(pPosTcpWcsZ->nodeId());

    // PosTcpWcsZ -> CmdPos
    UaBase::Variable *pPosTcpWcsZCmdPos = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsZ_CmdPos, getTypeNamespace()));
    pPosTcpWcsZCmdPos->setBrowseName(UaQualifiedName("CmdPos", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsZCmdPos->setDisplayName(UaLocalizedText("", "CmdPos"));
    pPosTcpWcsZCmdPos->setAccessLevel(3);
    pPosTcpWcsZCmdPos->setUserAccessLevel(3);
    pPosTcpWcsZCmdPos->setValueRank(-1);
    pPosTcpWcsZCmdPos->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsZCmdPos->setValue(defaultValue);
    pPosTcpWcsZCmdPos->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsZ);
    reference.setTargetNode(pPosTcpWcsZCmdPos);
    pPosTcpWcsZ->addFullReference(reference);
    pPosTcpWcsZCmdPos->addFullReference(reference);
    pPosTcpWcsZCmdPos->setParentNodeId(pPosTcpWcsZ->nodeId());

    // PosTcpWcsZ -> EngineeringUnits
    UaBase::Variable *pPosTcpWcsZEngineeringUnits = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsZ_EngineeringUnits, getTypeNamespace()));
    pPosTcpWcsZEngineeringUnits->setBrowseName(UaQualifiedName("EngineeringUnits", 0));
    pPosTcpWcsZEngineeringUnits->setDisplayName(UaLocalizedText("", "EngineeringUnits"));
    pPosTcpWcsZEngineeringUnits->setAccessLevel(1);
    pPosTcpWcsZEngineeringUnits->setUserAccessLevel(1);
    pPosTcpWcsZEngineeringUnits->setValueRank(-1);
    pPosTcpWcsZEngineeringUnits->setDataTypeId(OpcUaId_EUInformation);
    {
        UaEUInformation valEngineeringUnits = UaEUInformation();
        valEngineeringUnits.toVariant(defaultValue);
    }
    pPosTcpWcsZEngineeringUnits->setValue(defaultValue);
    pPosTcpWcsZEngineeringUnits->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsZ);
    reference.setTargetNode(pPosTcpWcsZEngineeringUnits);
    pPosTcpWcsZ->addFullReference(reference);
    pPosTcpWcsZEngineeringUnits->addFullReference(reference);
    pPosTcpWcsZEngineeringUnits->setParentNodeId(pPosTcpWcsZ->nodeId());

    // PosTcpWcsZ -> EURange
    UaBase::Variable *pPosTcpWcsZEURange = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsZ_EURange, getTypeNamespace()));
    pPosTcpWcsZEURange->setBrowseName(UaQualifiedName("EURange", 0));
    pPosTcpWcsZEURange->setDisplayName(UaLocalizedText("", "EURange"));
    pPosTcpWcsZEURange->setAccessLevel(1);
    pPosTcpWcsZEURange->setUserAccessLevel(1);
    pPosTcpWcsZEURange->setValueRank(-1);
    pPosTcpWcsZEURange->setDataTypeId(OpcUaId_Range);
    {
        UaRange valEURange = UaRange(0, 0);
        valEURange.toVariant(defaultValue);
    }
    pPosTcpWcsZEURange->setValue(defaultValue);
    pPosTcpWcsZEURange->setTypeDefinitionId(OpcUaId_PropertyType);
    reference.setReferenceTypeId(OpcUaId_HasProperty);
    reference.setSourceNode(pPosTcpWcsZ);
    reference.setTargetNode(pPosTcpWcsZEURange);
    pPosTcpWcsZ->addFullReference(reference);
    pPosTcpWcsZEURange->addFullReference(reference);
    pPosTcpWcsZEURange->setParentNodeId(pPosTcpWcsZ->nodeId());

    // PosTcpWcsZ -> RemDist
    UaBase::Variable *pPosTcpWcsZRemDist = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_PosTcpWcsZ_RemDist, getTypeNamespace()));
    pPosTcpWcsZRemDist->setBrowseName(UaQualifiedName("RemDist", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pPosTcpWcsZRemDist->setDisplayName(UaLocalizedText("", "RemDist"));
    pPosTcpWcsZRemDist->setAccessLevel(1);
    pPosTcpWcsZRemDist->setUserAccessLevel(1);
    pPosTcpWcsZRemDist->setValueRank(-1);
    pPosTcpWcsZRemDist->setDataTypeId(OpcUaId_Double);
    defaultValue.setDouble(0.0);
    pPosTcpWcsZRemDist->setValue(defaultValue);
    pPosTcpWcsZRemDist->setTypeDefinitionId(OpcUaId_BaseDataVariableType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pPosTcpWcsZ);
    reference.setTargetNode(pPosTcpWcsZRemDist);
    pPosTcpWcsZ->addFullReference(reference);
    pPosTcpWcsZRemDist->addFullReference(reference);
    pPosTcpWcsZRemDist->setParentNodeId(pPosTcpWcsZ->nodeId());

    // ToolId
    UaBase::Variable *pToolId = new UaBase::Variable(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1_ToolId, getTypeNamespace()));
    pToolId->setBrowseName(UaQualifiedName("ToolId", OpcUaCnc::NodeManagerCNC::getTypeNamespace()));
    pToolId->setDisplayName(UaLocalizedText("", "ToolId"));
    pToolId->setAccessLevel(1);
    pToolId->setUserAccessLevel(1);
    pToolId->setValueRank(-1);
    pToolId->setDataTypeId(OpcUaId_UInt32);
    defaultValue.setUInt32(0);
    pToolId->setValue(defaultValue);
    pToolId->setTypeDefinitionId(OpcUaId_DataItemType);
    reference.setReferenceTypeId(OpcUaId_HasComponent);
    reference.setSourceNode(pChannel1);
    reference.setTargetNode(pToolId);
    pChannel1->addFullReference(reference);
    pToolId->addFullReference(reference);
    pToolId->setParentNodeId(pChannel1->nodeId());

    OpcUaCnc::CncChannelType *pObjectType = new OpcUaCnc::CncChannelType(pChannel1, (XmlUaNodeFactoryManager*) &factory, this);
    pObjectType->useAccessInfoFromType();

    referenceTypeId = OpcUaId_HasComponent;
    ret = addNodeAndReference(UaNodeId(OpcUaCncId_CncInterface_CncChannelList, OpcUaCnc::NodeManagerCNC::getTypeNamespace()), pObjectType, referenceTypeId);
    UA_ASSERT(ret.isGood());
    ret = addUaReference(pObjectType->nodeId(), UaNodeId(OpcUaCncId_CncMessageType, OpcUaCnc::NodeManagerCNC::getTypeNamespace()), OpcUaId_GeneratesEvent);
    UA_ASSERT(ret.isGood());
    ret = addUaReference(pObjectType->nodeId(), OpcUaId_GeneralModelChangeEventType, OpcUaId_GeneratesEvent);
    UA_ASSERT(ret.isGood());
    delete pActFeedrate;
    delete pActFeedrateEURange;
    delete pActGFunctions;
    delete pActJogIncrement;
    delete pActJogIncrementEURange;
    delete pActMainProgramFile;
    delete pActMainProgramFileOffset;
    delete pActMainProgramLine;
    delete pActMainProgramName;
    delete pActMFunctions;
    delete pActModalOffsetFunction;
    delete pActOperationMode;
    delete pActOverride;
    delete pActOverrideEURange;
    delete pActProgramBlock;
    delete pActProgramFile;
    delete pActProgramFileOffset;
    delete pActProgramLine;
    delete pActProgramName;
    delete pActProgramStatus;
    delete pActStatus;
    delete pBlockMode;
    delete pCmdFeedrate;
    delete pCmdFeedrateEURange;
    delete pCmdOverride;
    delete pCmdOverrideEURange;
    delete pDryRunFeed;
    delete pDryRunFeedEURange;
    delete pFeedHold;
    delete pId;
    delete pPosTcpBcsA;
    delete pPosTcpBcsAActPos;
    delete pPosTcpBcsACmdPos;
    delete pPosTcpBcsAEngineeringUnits;
    delete pPosTcpBcsAEURange;
    delete pPosTcpBcsARemDist;
    delete pPosTcpBcsB;
    delete pPosTcpBcsBActPos;
    delete pPosTcpBcsBCmdPos;
    delete pPosTcpBcsBEngineeringUnits;
    delete pPosTcpBcsBEURange;
    delete pPosTcpBcsBRemDist;
    delete pPosTcpBcsC;
    delete pPosTcpBcsCActPos;
    delete pPosTcpBcsCCmdPos;
    delete pPosTcpBcsCEngineeringUnits;
    delete pPosTcpBcsCEURange;
    delete pPosTcpBcsCRemDist;
    delete pPosTcpBcsX;
    delete pPosTcpBcsXActPos;
    delete pPosTcpBcsXCmdPos;
    delete pPosTcpBcsXEngineeringUnits;
    delete pPosTcpBcsXEURange;
    delete pPosTcpBcsXRemDist;
    delete pPosTcpBcsY;
    delete pPosTcpBcsYActPos;
    delete pPosTcpBcsYCmdPos;
    delete pPosTcpBcsYEngineeringUnits;
    delete pPosTcpBcsYEURange;
    delete pPosTcpBcsYRemDist;
    delete pPosTcpBcsZ;
    delete pPosTcpBcsZActPos;
    delete pPosTcpBcsZCmdPos;
    delete pPosTcpBcsZEngineeringUnits;
    delete pPosTcpBcsZEURange;
    delete pPosTcpBcsZRemDist;
    delete pPosTcpWcsA;
    delete pPosTcpWcsAActPos;
    delete pPosTcpWcsACmdPos;
    delete pPosTcpWcsAEngineeringUnits;
    delete pPosTcpWcsAEURange;
    delete pPosTcpWcsARemDist;
    delete pPosTcpWcsB;
    delete pPosTcpWcsBActPos;
    delete pPosTcpWcsBCmdPos;
    delete pPosTcpWcsBEngineeringUnits;
    delete pPosTcpWcsBEURange;
    delete pPosTcpWcsBRemDist;
    delete pPosTcpWcsC;
    delete pPosTcpWcsCActPos;
    delete pPosTcpWcsCCmdPos;
    delete pPosTcpWcsCEngineeringUnits;
    delete pPosTcpWcsCEURange;
    delete pPosTcpWcsCRemDist;
    delete pPosTcpWcsX;
    delete pPosTcpWcsXActPos;
    delete pPosTcpWcsXCmdPos;
    delete pPosTcpWcsXEngineeringUnits;
    delete pPosTcpWcsXEURange;
    delete pPosTcpWcsXRemDist;
    delete pPosTcpWcsY;
    delete pPosTcpWcsYActPos;
    delete pPosTcpWcsYCmdPos;
    delete pPosTcpWcsYEngineeringUnits;
    delete pPosTcpWcsYEURange;
    delete pPosTcpWcsYRemDist;
    delete pPosTcpWcsZ;
    delete pPosTcpWcsZActPos;
    delete pPosTcpWcsZCmdPos;
    delete pPosTcpWcsZEngineeringUnits;
    delete pPosTcpWcsZEURange;
    delete pPosTcpWcsZRemDist;
    delete pToolId;
    delete pChannel1;
    return ret;
}


UaStatus NodeManagerDemoBase::addAdditionalHierarchicalReferences()
{
    UaStatus ret;
    ret = addUaReference(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1, getNameSpaceIndex()), UaNodeId(DemoId_CncInterface_CncAxisList_X, getNameSpaceIndex()), OpcUaId_Organizes);
    UA_ASSERT(ret.isGood());
    ret = addUaReference(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1, getNameSpaceIndex()), UaNodeId(DemoId_CncInterface_CncAxisList_Y, getNameSpaceIndex()), OpcUaId_Organizes);
    UA_ASSERT(ret.isGood());
    ret = addUaReference(UaNodeId(DemoId_CncInterface_CncChannelList_Channel1, getNameSpaceIndex()), UaNodeId(DemoId_CncInterface_CncAxisList_Z, getNameSpaceIndex()), OpcUaId_Organizes);
    UA_ASSERT(ret.isGood());

    return ret;
}


} // End namespace for the UA information model http://cs.hs-rm.de/mierswa_thesis/3AchsenEMCNCLaserSchneid/



