/******************************************************************************
** opcuacnc_datatypes.h
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#ifndef __OPCUACNC_DATATYPES_H__
#define __OPCUACNC_DATATYPES_H__

#include <opcua_proxystub.h>
#include <opcua_builtintypes.h>
#include <opcua_exclusions.h>
#include <opcua_types.h>

#include "opcuacnc_identifiers.h"

#define OPCUACNC_EXTENSIONOBJECT_GET_ENCODEABLE(xExpectedType, xExtensionObject) \
    (OpcUaCnc_##xExpectedType*)((((xExtensionObject)->Encoding == OpcUa_ExtensionObjectEncoding_EncodeableObject && \
    (xExtensionObject)->Body.EncodeableObject.Type != OpcUa_Null && \
    (xExtensionObject)->Body.EncodeableObject.Type->TypeId == OpcUaCncId_##xExpectedType && \
    OpcUa_StrCmpA((xExtensionObject)->Body.EncodeableObject.Type->NamespaceUri, "http://opcfoundation.org/UA/CNC/") == 0 && \
    (xExtensionObject)->Body.EncodeableObject.Object != OpcUa_Null))?((xExtensionObject)->Body.EncodeableObject.Object):OpcUa_Null)


// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

#ifndef OPCUA_EXCLUDE_CncAxisStatus
/*============================================================================
 * The CncAxisStatus enumeration.
 *===========================================================================*/
enum CncAxisStatus
{
    CncAxisStatus_InPosition = 0,
    CncAxisStatus_Moving = 1,
    CncAxisStatus_Parked = 2
#if OPCUA_FORCE_INT32_ENUMS
    ,_CncAxisStatus_MaxEnumerationValue = OpcUa_Int32_Max
#endif
};

UAMODELS_EXPORT inline void CncAxisStatus_Clear(CncAxisStatus *pValue) {*pValue = CncAxisStatus_InPosition;}

UAMODELS_EXPORT inline void CncAxisStatus_Initialize(CncAxisStatus *pValue) {*pValue = CncAxisStatus_InPosition;}

UAMODELS_EXPORT extern struct ::_OpcUa_EnumeratedType CncAxisStatus_EnumeratedType;

#endif /*OPCUA_EXCLUDE_CncAxisStatus*/
#ifndef OPCUA_EXCLUDE_CncChannelProgramStatus
/*============================================================================
 * The CncChannelProgramStatus enumeration.
 *===========================================================================*/
enum CncChannelProgramStatus
{
    CncChannelProgramStatus_Stopped = 0,
    CncChannelProgramStatus_Running = 1,
    CncChannelProgramStatus_Waiting = 2,
    CncChannelProgramStatus_Interrupted = 3,
    CncChannelProgramStatus_Canceled = 4
#if OPCUA_FORCE_INT32_ENUMS
    ,_CncChannelProgramStatus_MaxEnumerationValue = OpcUa_Int32_Max
#endif
};

UAMODELS_EXPORT inline void CncChannelProgramStatus_Clear(CncChannelProgramStatus *pValue) {*pValue = CncChannelProgramStatus_Stopped;}

UAMODELS_EXPORT inline void CncChannelProgramStatus_Initialize(CncChannelProgramStatus *pValue) {*pValue = CncChannelProgramStatus_Stopped;}

UAMODELS_EXPORT extern struct ::_OpcUa_EnumeratedType CncChannelProgramStatus_EnumeratedType;

#endif /*OPCUA_EXCLUDE_CncChannelProgramStatus*/
#ifndef OPCUA_EXCLUDE_CncChannelStatus
/*============================================================================
 * The CncChannelStatus enumeration.
 *===========================================================================*/
enum CncChannelStatus
{
    CncChannelStatus_Active = 0,
    CncChannelStatus_Interrupted = 1,
    CncChannelStatus_Reset = 2
#if OPCUA_FORCE_INT32_ENUMS
    ,_CncChannelStatus_MaxEnumerationValue = OpcUa_Int32_Max
#endif
};

UAMODELS_EXPORT inline void CncChannelStatus_Clear(CncChannelStatus *pValue) {*pValue = CncChannelStatus_Active;}

UAMODELS_EXPORT inline void CncChannelStatus_Initialize(CncChannelStatus *pValue) {*pValue = CncChannelStatus_Active;}

UAMODELS_EXPORT extern struct ::_OpcUa_EnumeratedType CncChannelStatus_EnumeratedType;

#endif /*OPCUA_EXCLUDE_CncChannelStatus*/
#ifndef OPCUA_EXCLUDE_CncOperationMode
/*============================================================================
 * The CncOperationMode enumeration.
 *===========================================================================*/
enum CncOperationMode
{
    CncOperationMode_Manual = 0,
    CncOperationMode_MDA = 1,
    CncOperationMode_Automatic = 2
#if OPCUA_FORCE_INT32_ENUMS
    ,_CncOperationMode_MaxEnumerationValue = OpcUa_Int32_Max
#endif
};

UAMODELS_EXPORT inline void CncOperationMode_Clear(CncOperationMode *pValue) {*pValue = CncOperationMode_Manual;}

UAMODELS_EXPORT inline void CncOperationMode_Initialize(CncOperationMode *pValue) {*pValue = CncOperationMode_Manual;}

UAMODELS_EXPORT extern struct ::_OpcUa_EnumeratedType CncOperationMode_EnumeratedType;

#endif /*OPCUA_EXCLUDE_CncOperationMode*/
#ifndef OPCUA_EXCLUDE_CncSpindleStatus
/*============================================================================
 * The CncSpindleStatus enumeration.
 *===========================================================================*/
enum CncSpindleStatus
{
    CncSpindleStatus_Stopped = 0,
    CncSpindleStatus_InTargetArea = 1,
    CncSpindleStatus_Accelerating = 2,
    CncSpindleStatus_Decelerating = 3,
    CncSpindleStatus_Parked = 4
#if OPCUA_FORCE_INT32_ENUMS
    ,_CncSpindleStatus_MaxEnumerationValue = OpcUa_Int32_Max
#endif
};

UAMODELS_EXPORT inline void CncSpindleStatus_Clear(CncSpindleStatus *pValue) {*pValue = CncSpindleStatus_Stopped;}

UAMODELS_EXPORT inline void CncSpindleStatus_Initialize(CncSpindleStatus *pValue) {*pValue = CncSpindleStatus_Stopped;}

UAMODELS_EXPORT extern struct ::_OpcUa_EnumeratedType CncSpindleStatus_EnumeratedType;

#endif /*OPCUA_EXCLUDE_CncSpindleStatus*/
#ifndef OPCUA_EXCLUDE_CncSpindleTurnDirection
/*============================================================================
 * The CncSpindleTurnDirection enumeration.
 *===========================================================================*/
enum CncSpindleTurnDirection
{
    CncSpindleTurnDirection_None = 0,
    CncSpindleTurnDirection_CW = 1,
    CncSpindleTurnDirection_CCW = 2
#if OPCUA_FORCE_INT32_ENUMS
    ,_CncSpindleTurnDirection_MaxEnumerationValue = OpcUa_Int32_Max
#endif
};

UAMODELS_EXPORT inline void CncSpindleTurnDirection_Clear(CncSpindleTurnDirection *pValue) {*pValue = CncSpindleTurnDirection_None;}

UAMODELS_EXPORT inline void CncSpindleTurnDirection_Initialize(CncSpindleTurnDirection *pValue) {*pValue = CncSpindleTurnDirection_None;}

UAMODELS_EXPORT extern struct ::_OpcUa_EnumeratedType CncSpindleTurnDirection_EnumeratedType;

#endif /*OPCUA_EXCLUDE_CncSpindleTurnDirection*/
}

#ifndef OPCUA_EXCLUDE_OpcUaCnc_CncPositionType
/*============================================================================
 * The OpcUaCnc_CncPositionType structure.
 *===========================================================================*/
typedef struct _OpcUaCnc_CncPositionType
{
    OpcUa_Double ActPos;
    OpcUa_Double CmdPos;
    OpcUa_Double RemDist;
} OpcUaCnc_CncPositionType;

UAMODELS_EXPORT OpcUa_Void OpcUaCnc_CncPositionType_Initialize(OpcUaCnc_CncPositionType* pValue);

UAMODELS_EXPORT OpcUa_Void OpcUaCnc_CncPositionType_Clear(OpcUaCnc_CncPositionType* pValue);

UAMODELS_EXPORT OpcUa_StatusCode OpcUaCnc_CncPositionType_GetSize(OpcUaCnc_CncPositionType* pValue, struct _OpcUa_Encoder* pEncoder, OpcUa_Int32* pSize);

UAMODELS_EXPORT OpcUa_StatusCode OpcUaCnc_CncPositionType_Encode(OpcUaCnc_CncPositionType* pValue, struct _OpcUa_Encoder* pEncoder);

UAMODELS_EXPORT OpcUa_StatusCode OpcUaCnc_CncPositionType_Decode(OpcUaCnc_CncPositionType* pValue, struct _OpcUa_Decoder* pDecoder);

#if OPCUA_ENCODEABLE_OBJECT_COMPARE_SUPPORTED
UAMODELS_EXPORT OpcUa_Int        OpcUaCnc_CncPositionType_Compare(const OpcUaCnc_CncPositionType* pValue1, const OpcUaCnc_CncPositionType* pValue2);
#endif /* OPCUA_ENCODEABLE_OBJECT_COMPARE_SUPPORTED */

#if OPCUA_ENCODEABLE_OBJECT_COPY_SUPPORTED
UAMODELS_EXPORT OpcUa_StatusCode OpcUaCnc_CncPositionType_Copy(const OpcUaCnc_CncPositionType* pSource, OpcUaCnc_CncPositionType** ppCopy);

UAMODELS_EXPORT OpcUa_StatusCode OpcUaCnc_CncPositionType_CopyTo(const OpcUaCnc_CncPositionType* pSource, OpcUaCnc_CncPositionType* pDestination);
#endif /* OPCUA_ENCODEABLE_OBJECT_COPY_SUPPORTED */

extern struct _OpcUa_EncodeableType OpcUaCnc_CncPositionType_EncodeableType;
#endif /*OPCUA_EXCLUDE_OpcUaCnc_CncPositionType*/


/*============================================================================
 * Table of known types.
 *===========================================================================*/
extern struct _OpcUa_EncodeableType** OpcUaCnc_KnownEncodeableTypes;

/*============================================================================
 * Register known types.
 *===========================================================================*/
namespace OpcUaCnc
{
    /** Class used to handle data type registration
    */
    class DataTypes
    {
    public:
        static void registerStructuredTypes();
    private:
        static bool s_dataTypesAdded;
    };
}

#endif // __OPCUACNC_DATATYPES_H__

