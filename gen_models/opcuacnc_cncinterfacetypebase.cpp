/******************************************************************************
** opcuacnc_cncinterfacetypebase.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#include "opcuacnc_cncinterfacetypebase.h"
#include "opcuacnc_cncinterfacetype.h"
#include "uagenericnodes.h"
#include "nodemanagerroot.h"
#include "methodhandleuanode.h"
#include "opcuacnc_nodemanagercnc.h"

#include "instancefactory.h"
#include "opcuacnc_cncaxislisttype.h"
#include "opcuacnc_cncchannellisttype.h"
#include "opcuacnc_cncspindlelisttype.h"
#include "opcuacnc_instancefactory_cnc.h"
// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

bool CncInterfaceTypeBase::s_typeNodesCreated = false;
OpcUaCnc::CncAxisListType* CncInterfaceTypeBase::s_pCncAxisList = NULL;
OpcUaCnc::CncChannelListType* CncInterfaceTypeBase::s_pCncChannelList = NULL;
OpcUaCnc::CncSpindleListType* CncInterfaceTypeBase::s_pCncSpindleList = NULL;
OpcUa::PropertyType* CncInterfaceTypeBase::s_pFix = NULL;
OpcUa::PropertyType* CncInterfaceTypeBase::s_pRevision = NULL;
OpcUa::PropertyType* CncInterfaceTypeBase::s_pVendorName = NULL;
OpcUa::PropertyType* CncInterfaceTypeBase::s_pVendorRevision = NULL;
OpcUa::PropertyType* CncInterfaceTypeBase::s_pVersion = NULL;

/** Constructs an CncInterfaceType object using an instance declaration node as base
*/
CncInterfaceTypeBase::CncInterfaceTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUa::BaseObjectType(nodeId, pInstanceDeclarationObject, pNodeConfig, pSharedMutex)
{
    initialize();
}

/** Constructs an CncInterfaceType object
*/
CncInterfaceTypeBase::CncInterfaceTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex)
: OpcUa::BaseObjectType(nodeId, name, browseNameNameSpaceIndex, pNodeConfig, pSharedMutex)
{
    initialize();
}

/**  Constructs an instance of the class CncInterfaceTypeBase with all components
*/
CncInterfaceTypeBase::CncInterfaceTypeBase(
    UaBase::Object*    pBaseNode,    //!< [in] The "tree" of nodes that specifies the attributes of the instance and its children
    XmlUaNodeFactoryManager* pFactory, //!< [in] The factory to create the children
    NodeManagerConfig* pNodeConfig,  //!< [in] Interface pointer to the NodeManagerConfig interface used to add and delete node and references in the address space
    UaMutexRefCounted* pSharedMutex) //!< [in] Shared mutex object used to synchronize access to the variable. Can be NULL if no shared mutex is provided
: OpcUa::BaseObjectType(pBaseNode, pFactory, pNodeConfig, pSharedMutex)
{
    UaStatus      addStatus;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }

    m_pCncAxisList = NULL;
    m_pCncChannelList = NULL;
    m_pCncSpindleList = NULL;
    m_pFix = NULL;
    m_pRevision = NULL;
    m_pVendorName = NULL;
    m_pVendorRevision = NULL;
    m_pVersion = NULL;

    std::list<UaBase::BaseNode*> lstReferencedNodes = pBaseNode->hierarchicallyReferencedNodes();
    for (std::list<UaBase::BaseNode*>::const_iterator it = lstReferencedNodes.begin(); it != lstReferencedNodes.end(); it++)
    {
        UaBase::BaseNode *pChild = *it;
        if (pChild->browseName() == UaQualifiedName("Fix", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pFix)
            {
                m_pFix = (OpcUa::PropertyType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pFix, OpcUaId_HasProperty);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pFix->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("Revision", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pRevision)
            {
                m_pRevision = (OpcUa::PropertyType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pRevision, OpcUaId_HasProperty);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pRevision->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("VendorName", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pVendorName)
            {
                m_pVendorName = (OpcUa::PropertyType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pVendorName, OpcUaId_HasProperty);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pVendorName->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("VendorRevision", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pVendorRevision)
            {
                m_pVendorRevision = (OpcUa::PropertyType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pVendorRevision, OpcUaId_HasProperty);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pVendorRevision->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("Version", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pVersion)
            {
                m_pVersion = (OpcUa::PropertyType*) pFactory->createVariable((UaBase::Variable*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pVersion, OpcUaId_HasProperty);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Variable*)pChild)->modellingRuleId().isNull())
                {
                    m_pVersion->setModellingRuleId(((UaBase::Variable*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CncAxisList", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCncAxisList)
            {
                m_pCncAxisList = (OpcUaCnc::CncAxisListType*) pFactory->createObject((UaBase::Object*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCncAxisList, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Object*)pChild)->modellingRuleId().isNull())
                {
                    m_pCncAxisList->setModellingRuleId(((UaBase::Object*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CncChannelList", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCncChannelList)
            {
                m_pCncChannelList = (OpcUaCnc::CncChannelListType*) pFactory->createObject((UaBase::Object*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCncChannelList, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Object*)pChild)->modellingRuleId().isNull())
                {
                    m_pCncChannelList->setModellingRuleId(((UaBase::Object*)pChild)->modellingRuleId());
                }
            }
        }
        else if (pChild->browseName() == UaQualifiedName("CncSpindleList", OpcUaCnc::NodeManagerCNC::getTypeNamespace()))
        {
            if (!m_pCncSpindleList)
            {
                m_pCncSpindleList = (OpcUaCnc::CncSpindleListType*) pFactory->createObject((UaBase::Object*)pChild, pNodeConfig, pSharedMutex);
                addStatus = pNodeConfig->addNodeAndReference(this, m_pCncSpindleList, OpcUaId_HasComponent);
                UA_ASSERT(addStatus.isGood());
                if (!((UaBase::Object*)pChild)->modellingRuleId().isNull())
                {
                    m_pCncSpindleList->setModellingRuleId(((UaBase::Object*)pChild)->modellingRuleId());
                }
            }
        }
    }
    UA_ASSERT(m_pCncAxisList);
    UA_ASSERT(m_pCncChannelList);
    UA_ASSERT(m_pCncSpindleList);
    UA_ASSERT(m_pRevision);
    UA_ASSERT(m_pVendorName);
    UA_ASSERT(m_pVendorRevision);
    UA_ASSERT(m_pVersion);
}

/** Initialize the object with all member nodes
*/
void CncInterfaceTypeBase::initialize()
{
    OpcUa_Int16 nsIdx = m_pNodeConfig->getNameSpaceIndex();
    UaStatus      addStatus;
    UaVariant     defaultValue;

    if ( s_typeNodesCreated == false )
    {
        createTypes();
    }
    // Object CncAxisList
    m_pCncAxisList = new OpcUaCnc::CncAxisListType(UaNodeId(UaString("%1.CncAxisList").arg(nodeId().toString()), nsIdx), s_pCncAxisList, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCncAxisList, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    // Object CncChannelList
    m_pCncChannelList = new OpcUaCnc::CncChannelListType(UaNodeId(UaString("%1.CncChannelList").arg(nodeId().toString()), nsIdx), s_pCncChannelList, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCncChannelList, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    // Object CncSpindleList
    m_pCncSpindleList = new OpcUaCnc::CncSpindleListType(UaNodeId(UaString("%1.CncSpindleList").arg(nodeId().toString()), nsIdx), s_pCncSpindleList, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pCncSpindleList, OpcUaId_HasComponent);
    UA_ASSERT(addStatus.isGood());
    // Optional variable Fix
    m_pFix = NULL;
    // Mandatory variable Revision
    m_pRevision = new OpcUa::PropertyType(this, s_pRevision, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pRevision, OpcUaId_HasProperty);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable VendorName
    m_pVendorName = new OpcUa::PropertyType(this, s_pVendorName, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pVendorName, OpcUaId_HasProperty);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable VendorRevision
    m_pVendorRevision = new OpcUa::PropertyType(this, s_pVendorRevision, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pVendorRevision, OpcUaId_HasProperty);
    UA_ASSERT(addStatus.isGood());

    // Mandatory variable Version
    m_pVersion = new OpcUa::PropertyType(this, s_pVersion, m_pNodeConfig, m_pSharedMutex);
    addStatus = m_pNodeConfig->addNodeAndReference(this, m_pVersion, OpcUaId_HasProperty);
    UA_ASSERT(addStatus.isGood());


    addStatus = m_pNodeConfig->addUaReference(this->nodeId(), UaNodeId(OpcUaCncId_CncAlarmType, nsIdx), OpcUaId_GeneratesEvent);
    UA_ASSERT(addStatus.isGood());
    addStatus = m_pNodeConfig->addUaReference(this->nodeId(), UaNodeId(OpcUaCncId_CncMessageType, nsIdx), OpcUaId_GeneratesEvent);
    UA_ASSERT(addStatus.isGood());
}

/** Destruction
*/
CncInterfaceTypeBase::~CncInterfaceTypeBase()
{
}

/** Create the related type nodes
*/
void CncInterfaceTypeBase::createTypes()
{
    if ( s_typeNodesCreated == false )
    {
        s_typeNodesCreated = true;

        UaStatus      addStatus;
        UaVariant     defaultValue;
        NodeManagerRoot* pNodeManagerRoot = NodeManagerRoot::CreateRootNodeManager();
        OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
        OpcUa_Int16 nsSuperTypeIdx = NodeManagerRoot::getTypeNamespace();
        NodeManagerConfig* pTypeNodeConfig = pNodeManagerRoot->getNodeManagerByNamespace(nsTypeIdx)->getNodeManagerConfig();

        OpcUa::GenericObjectType* pObjectType;
        pObjectType = new OpcUa::GenericObjectType(
            UaNodeId(OpcUaCncId_CncInterfaceType, nsTypeIdx),
            UaQualifiedName("CncInterfaceType", nsTypeIdx),
            UaLocalizedText("", "CncInterfaceType"),
            UaLocalizedText("", ""),
            OpcUa_False,
            &CncInterfaceType::clearStaticMembers);
        pTypeNodeConfig->addNodeAndReference(UaNodeId(OpcUaId_BaseObjectType, nsSuperTypeIdx), pObjectType, OpcUaId_HasSubtype);
        // Object CncAxisList
        s_pCncAxisList = new OpcUaCnc::CncAxisListType(UaNodeId(OpcUaCncId_CncInterfaceType_CncAxisList, nsTypeIdx), "CncAxisList", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), pTypeNodeConfig);
        s_pCncAxisList->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCncAxisList, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());
        // Object CncChannelList
        s_pCncChannelList = new OpcUaCnc::CncChannelListType(UaNodeId(OpcUaCncId_CncInterfaceType_CncChannelList, nsTypeIdx), "CncChannelList", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), pTypeNodeConfig);
        s_pCncChannelList->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCncChannelList, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());
        // Object CncSpindleList
        s_pCncSpindleList = new OpcUaCnc::CncSpindleListType(UaNodeId(OpcUaCncId_CncInterfaceType_CncSpindleList, nsTypeIdx), "CncSpindleList", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), pTypeNodeConfig);
        s_pCncSpindleList->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pCncSpindleList, OpcUaId_HasComponent);
        UA_ASSERT(addStatus.isGood());

        // Optional variable Fix
        defaultValue.setString("");
        s_pFix = new OpcUa::PropertyType(UaNodeId(OpcUaCncId_CncInterfaceType_Fix, nsTypeIdx), "Fix", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pFix->setModellingRuleId(OpcUaId_ModellingRule_Optional);
        s_pFix->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pFix, OpcUaId_HasProperty);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable Revision
        defaultValue.setString("");
        s_pRevision = new OpcUa::PropertyType(UaNodeId(OpcUaCncId_CncInterfaceType_Revision, nsTypeIdx), "Revision", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pRevision->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pRevision->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pRevision, OpcUaId_HasProperty);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable VendorName
        defaultValue.setString("");
        s_pVendorName = new OpcUa::PropertyType(UaNodeId(OpcUaCncId_CncInterfaceType_VendorName, nsTypeIdx), "VendorName", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pVendorName->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pVendorName->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pVendorName, OpcUaId_HasProperty);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable VendorRevision
        defaultValue.setString("");
        s_pVendorRevision = new OpcUa::PropertyType(UaNodeId(OpcUaCncId_CncInterfaceType_VendorRevision, nsTypeIdx), "VendorRevision", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pVendorRevision->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pVendorRevision->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pVendorRevision, OpcUaId_HasProperty);
        UA_ASSERT(addStatus.isGood());

        // Mandatory variable Version
        defaultValue.setString("");
        s_pVersion = new OpcUa::PropertyType(UaNodeId(OpcUaCncId_CncInterfaceType_Version, nsTypeIdx), "Version", OpcUaCnc::NodeManagerCNC::getTypeNamespace(), defaultValue, 1, pTypeNodeConfig);
        s_pVersion->setModellingRuleId(OpcUaId_ModellingRule_Mandatory);
        s_pVersion->setValueRank(-1);
        addStatus = pTypeNodeConfig->addNodeAndReference(pObjectType, s_pVersion, OpcUaId_HasProperty);
        UA_ASSERT(addStatus.isGood());

        pTypeNodeConfig->addUaReference(pObjectType->nodeId(), UaNodeId(OpcUaCncId_CncAlarmType, nsTypeIdx), OpcUaId_GeneratesEvent);
        pTypeNodeConfig->addUaReference(pObjectType->nodeId(), UaNodeId(OpcUaCncId_CncMessageType, nsTypeIdx), OpcUaId_GeneratesEvent);
    }
}

/** Clear the static members of the class
*/
void CncInterfaceTypeBase::clearStaticMembers()
{
    s_typeNodesCreated = false;

    s_pCncAxisList = NULL;
    s_pCncChannelList = NULL;
    s_pCncSpindleList = NULL;
    s_pFix = NULL;
    s_pRevision = NULL;
    s_pVendorName = NULL;
    s_pVendorRevision = NULL;
    s_pVersion = NULL;
}

/** Returns the type definition NodeId for the CncInterfaceType
*/
UaNodeId CncInterfaceTypeBase::typeDefinitionId() const
{
    UaNodeId ret(OpcUaCncId_CncInterfaceType, NodeManagerCNC::getTypeNamespace());
    return ret;
}

/**
 *  Sets the Fix value
 *
 *  If the optional Fix node has not been created, this method adds it to the address space.
 */
void CncInterfaceTypeBase::setFix(const UaString& Fix)
{
    if ( m_pFix == NULL )
    {
        UaStatus addStatus;
        m_pFix = new OpcUa::PropertyType(this, s_pFix, m_pNodeConfig, getSharedMutex());
        addStatus = m_pNodeConfig->addNodeAndReference(this, m_pFix, OpcUaId_HasProperty);
        UA_ASSERT(addStatus.isGood());
    }
    UaVariant value;
    value.setString(Fix);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pFix->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of Fix
 *
 *  If the optional Fix node has not been created, the value
 *  of the InstanceDeclaration node of the ObjectType is returned.
 */
UaString CncInterfaceTypeBase::getFix() const
{
    UaVariant defaultValue;
    UaString ret;
    if ( m_pFix == NULL )
    {
        UaDataValue dataValue(s_pFix->value(NULL));
        defaultValue = *dataValue.value();
    }
    else
    {
        UaDataValue dataValue(m_pFix->value(NULL));
        defaultValue = *dataValue.value();
    }
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the Revision value
 */
void CncInterfaceTypeBase::setRevision(const UaString& Revision)
{
    UaVariant value;
    value.setString(Revision);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pRevision->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of Revision
 */
UaString CncInterfaceTypeBase::getRevision() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pRevision->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the VendorName value
 */
void CncInterfaceTypeBase::setVendorName(const UaString& VendorName)
{
    UaVariant value;
    value.setString(VendorName);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pVendorName->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of VendorName
 */
UaString CncInterfaceTypeBase::getVendorName() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pVendorName->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the VendorRevision value
 */
void CncInterfaceTypeBase::setVendorRevision(const UaString& VendorRevision)
{
    UaVariant value;
    value.setString(VendorRevision);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pVendorRevision->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of VendorRevision
 */
UaString CncInterfaceTypeBase::getVendorRevision() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pVendorRevision->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/**
 *  Sets the Version value
 */
void CncInterfaceTypeBase::setVersion(const UaString& Version)
{
    UaVariant value;
    value.setString(Version);
    UaDataValue dataValue;
    dataValue.setValue(value, OpcUa_True, OpcUa_True);
    m_pVersion->setValue(NULL, dataValue, OpcUa_False);
}

/**
 *  Returns the value of Version
 */
UaString CncInterfaceTypeBase::getVersion() const
{
    UaVariant defaultValue;
    UaString ret;
    UaDataValue dataValue(m_pVersion->value(NULL));
    defaultValue = *dataValue.value();
    ret = defaultValue.toString();
    return ret;
}

/** Returns the CncAxisList node.
 */
OpcUaCnc::CncAxisListType* CncInterfaceTypeBase::getCncAxisList()
{
    return m_pCncAxisList;
}

/** Returns the CncAxisList node.
 */
const OpcUaCnc::CncAxisListType* CncInterfaceTypeBase::getCncAxisList() const
{
    return m_pCncAxisList;
}

/** Returns the CncChannelList node.
 */
OpcUaCnc::CncChannelListType* CncInterfaceTypeBase::getCncChannelList()
{
    return m_pCncChannelList;
}

/** Returns the CncChannelList node.
 */
const OpcUaCnc::CncChannelListType* CncInterfaceTypeBase::getCncChannelList() const
{
    return m_pCncChannelList;
}

/** Returns the CncSpindleList node.
 */
OpcUaCnc::CncSpindleListType* CncInterfaceTypeBase::getCncSpindleList()
{
    return m_pCncSpindleList;
}

/** Returns the CncSpindleList node.
 */
const OpcUaCnc::CncSpindleListType* CncInterfaceTypeBase::getCncSpindleList() const
{
    return m_pCncSpindleList;
}

/** Returns the Fix node.
 *
 * If the Variable has not been created yet, this method returns NULL.
 */
OpcUa::PropertyType* CncInterfaceTypeBase::getFixNode()
{
    return m_pFix;
}

/** Returns the Fix node.
 *
 * If the Variable has not been created yet, this method returns NULL.
 */
const OpcUa::PropertyType* CncInterfaceTypeBase::getFixNode() const
{
    return m_pFix;
}

/** Returns the Revision node.
 */
OpcUa::PropertyType* CncInterfaceTypeBase::getRevisionNode()
{
    return m_pRevision;
}

/** Returns the Revision node.
 */
const OpcUa::PropertyType* CncInterfaceTypeBase::getRevisionNode() const
{
    return m_pRevision;
}

/** Returns the VendorName node.
 */
OpcUa::PropertyType* CncInterfaceTypeBase::getVendorNameNode()
{
    return m_pVendorName;
}

/** Returns the VendorName node.
 */
const OpcUa::PropertyType* CncInterfaceTypeBase::getVendorNameNode() const
{
    return m_pVendorName;
}

/** Returns the VendorRevision node.
 */
OpcUa::PropertyType* CncInterfaceTypeBase::getVendorRevisionNode()
{
    return m_pVendorRevision;
}

/** Returns the VendorRevision node.
 */
const OpcUa::PropertyType* CncInterfaceTypeBase::getVendorRevisionNode() const
{
    return m_pVendorRevision;
}

/** Returns the Version node.
 */
OpcUa::PropertyType* CncInterfaceTypeBase::getVersionNode()
{
    return m_pVersion;
}

/** Returns the Version node.
 */
const OpcUa::PropertyType* CncInterfaceTypeBase::getVersionNode() const
{
    return m_pVersion;
}


/** Applies the NodeAccessInfo set at the CncInterfaceTypeBase and its children. */
void CncInterfaceTypeBase::useAccessInfoFromType()
{
    OpcUa::BaseObjectType::useAccessInfoFromType();

    // instance node
    OpcUa_Int16 nsTypeIdx = NodeManagerCNC::getTypeNamespace();
    UaNode *pTypeNode = NodeManagerRoot::CreateRootNodeManager()->getNode(UaNodeId(OpcUaCncId_CncInterfaceType, nsTypeIdx));
    if (pTypeNode)
    {
        useAccessInfoFrom(pTypeNode);
        pTypeNode->releaseReference();
    }

    // children
    m_pCncAxisList->useAccessInfoFromInstance(s_pCncAxisList);
    m_pCncChannelList->useAccessInfoFromInstance(s_pCncChannelList);
    m_pCncSpindleList->useAccessInfoFromInstance(s_pCncSpindleList);
    if (m_pFix)
    {
        m_pFix->useAccessInfoFromInstance(s_pFix);
    }
    m_pRevision->useAccessInfoFromInstance(s_pRevision);
    m_pVendorName->useAccessInfoFromInstance(s_pVendorName);
    m_pVendorRevision->useAccessInfoFromInstance(s_pVendorRevision);
    m_pVersion->useAccessInfoFromInstance(s_pVersion);
}

/** Uses the NodeAccessInfo of pOther and its children. */
void CncInterfaceTypeBase::useAccessInfoFromInstance(CncInterfaceTypeBase *pOther)
{
    OpcUa::BaseObjectType::useAccessInfoFromInstance(pOther);

    // children
    m_pCncAxisList->useAccessInfoFromInstance(pOther->m_pCncAxisList);
    m_pCncChannelList->useAccessInfoFromInstance(pOther->m_pCncChannelList);
    m_pCncSpindleList->useAccessInfoFromInstance(pOther->m_pCncSpindleList);
    if (m_pFix && pOther->m_pFix)
    {
        m_pFix->useAccessInfoFromInstance(pOther->m_pFix);
    }
    m_pRevision->useAccessInfoFromInstance(pOther->m_pRevision);
    m_pVendorName->useAccessInfoFromInstance(pOther->m_pVendorName);
    m_pVendorRevision->useAccessInfoFromInstance(pOther->m_pVendorRevision);
    m_pVersion->useAccessInfoFromInstance(pOther->m_pVersion);
}

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/


