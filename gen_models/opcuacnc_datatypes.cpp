/******************************************************************************
** opcuacnc_datatypes.cpp
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#include "opcuacnc_datatypes.h"

/* base */
#include <opcua_platformdefs.h>
#include <opcua_statuscodes.h>
#include <opcua_errorhandling.h>

/* core */
#include <opcua_memory.h>
#include <opcua_string.h>
#include <opcua_guid.h>

/* stack */
#include <opcua_encoder.h>
#include <opcua_decoder.h>

/* types */
#include <opcua_identifiers.h>
#include "opcuacnc_identifiers.h"

// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

#ifndef OPCUA_EXCLUDE_CncAxisStatus
/*============================================================================
 * OpcUa_IdType_EnumeratedType
 *===========================================================================*/
static struct ::_OpcUa_EnumeratedValue g_CncAxisStatus_EnumeratedValues[] =
{
    {(char*) "CncAxisStatus_InPosition", 0},
    {(char*) "CncAxisStatus_Moving", 1},
    {(char*) "CncAxisStatus_Parked", 2},
    { OpcUa_Null, 0 }
};

struct ::_OpcUa_EnumeratedType CncAxisStatus_EnumeratedType =
{
    (char*) "CncAxisStatus",
    g_CncAxisStatus_EnumeratedValues
};
#endif /*OPCUA_EXCLUDE_CncAxisStatus*/
#ifndef OPCUA_EXCLUDE_CncChannelProgramStatus
/*============================================================================
 * OpcUa_IdType_EnumeratedType
 *===========================================================================*/
static struct ::_OpcUa_EnumeratedValue g_CncChannelProgramStatus_EnumeratedValues[] =
{
    {(char*) "CncChannelProgramStatus_Stopped", 0},
    {(char*) "CncChannelProgramStatus_Running", 1},
    {(char*) "CncChannelProgramStatus_Waiting", 2},
    {(char*) "CncChannelProgramStatus_Interrupted", 3},
    {(char*) "CncChannelProgramStatus_Canceled", 4},
    { OpcUa_Null, 0 }
};

struct ::_OpcUa_EnumeratedType CncChannelProgramStatus_EnumeratedType =
{
    (char*) "CncChannelProgramStatus",
    g_CncChannelProgramStatus_EnumeratedValues
};
#endif /*OPCUA_EXCLUDE_CncChannelProgramStatus*/
#ifndef OPCUA_EXCLUDE_CncChannelStatus
/*============================================================================
 * OpcUa_IdType_EnumeratedType
 *===========================================================================*/
static struct ::_OpcUa_EnumeratedValue g_CncChannelStatus_EnumeratedValues[] =
{
    {(char*) "CncChannelStatus_Active", 0},
    {(char*) "CncChannelStatus_Interrupted", 1},
    {(char*) "CncChannelStatus_Reset", 2},
    { OpcUa_Null, 0 }
};

struct ::_OpcUa_EnumeratedType CncChannelStatus_EnumeratedType =
{
    (char*) "CncChannelStatus",
    g_CncChannelStatus_EnumeratedValues
};
#endif /*OPCUA_EXCLUDE_CncChannelStatus*/
#ifndef OPCUA_EXCLUDE_CncOperationMode
/*============================================================================
 * OpcUa_IdType_EnumeratedType
 *===========================================================================*/
static struct ::_OpcUa_EnumeratedValue g_CncOperationMode_EnumeratedValues[] =
{
    {(char*) "CncOperationMode_Manual", 0},
    {(char*) "CncOperationMode_MDA", 1},
    {(char*) "CncOperationMode_Automatic", 2},
    { OpcUa_Null, 0 }
};

struct ::_OpcUa_EnumeratedType CncOperationMode_EnumeratedType =
{
    (char*) "CncOperationMode",
    g_CncOperationMode_EnumeratedValues
};
#endif /*OPCUA_EXCLUDE_CncOperationMode*/
#ifndef OPCUA_EXCLUDE_CncSpindleStatus
/*============================================================================
 * OpcUa_IdType_EnumeratedType
 *===========================================================================*/
static struct ::_OpcUa_EnumeratedValue g_CncSpindleStatus_EnumeratedValues[] =
{
    {(char*) "CncSpindleStatus_Stopped", 0},
    {(char*) "CncSpindleStatus_InTargetArea", 1},
    {(char*) "CncSpindleStatus_Accelerating", 2},
    {(char*) "CncSpindleStatus_Decelerating", 3},
    {(char*) "CncSpindleStatus_Parked", 4},
    { OpcUa_Null, 0 }
};

struct ::_OpcUa_EnumeratedType CncSpindleStatus_EnumeratedType =
{
    (char*) "CncSpindleStatus",
    g_CncSpindleStatus_EnumeratedValues
};
#endif /*OPCUA_EXCLUDE_CncSpindleStatus*/
#ifndef OPCUA_EXCLUDE_CncSpindleTurnDirection
/*============================================================================
 * OpcUa_IdType_EnumeratedType
 *===========================================================================*/
static struct ::_OpcUa_EnumeratedValue g_CncSpindleTurnDirection_EnumeratedValues[] =
{
    {(char*) "CncSpindleTurnDirection_None", 0},
    {(char*) "CncSpindleTurnDirection_CW", 1},
    {(char*) "CncSpindleTurnDirection_CCW", 2},
    { OpcUa_Null, 0 }
};

struct ::_OpcUa_EnumeratedType CncSpindleTurnDirection_EnumeratedType =
{
    (char*) "CncSpindleTurnDirection",
    g_CncSpindleTurnDirection_EnumeratedValues
};
#endif /*OPCUA_EXCLUDE_CncSpindleTurnDirection*/
}

#ifndef OPCUA_EXCLUDE_OpcUaCnc_CncPositionType
/*============================================================================
 * OpcUaCnc_CncPositionType_Initialize
 *===========================================================================*/
OpcUa_Void OpcUaCnc_CncPositionType_Initialize(OpcUaCnc_CncPositionType* a_pValue)
{
    if (a_pValue != OpcUa_Null)
    {
        OpcUa_Field_Initialize(Double, ActPos);
        OpcUa_Field_Initialize(Double, CmdPos);
        OpcUa_Field_Initialize(Double, RemDist);
    }
}

/*============================================================================
 * OpcUaCnc_CncPositionType_Clear
 *===========================================================================*/
OpcUa_Void OpcUaCnc_CncPositionType_Clear(OpcUaCnc_CncPositionType* a_pValue)
{
    if (a_pValue != OpcUa_Null)
    {
        OpcUa_Field_Clear(Double, ActPos);
        OpcUa_Field_Clear(Double, CmdPos);
        OpcUa_Field_Clear(Double, RemDist);
    }
}

/*============================================================================
 * OpcUaCnc_CncPositionType_GetSize
 *===========================================================================*/
OpcUa_StatusCode OpcUaCnc_CncPositionType_GetSize(OpcUaCnc_CncPositionType* a_pValue, struct _OpcUa_Encoder* a_pEncoder, OpcUa_Int32* a_pSize)
{
    OpcUa_Int32 iSize = 0;

OpcUa_InitializeStatus(OpcUa_Module_Serializer, (char*) "OpcUaCnc_CncPositionType_GetSize");

    OpcUa_ReturnErrorIfArgumentNull(a_pValue);
    OpcUa_ReturnErrorIfArgumentNull(a_pEncoder);
    OpcUa_ReturnErrorIfArgumentNull(a_pSize);

    *a_pSize = -1;

    OpcUa_Field_GetSize(Double, ActPos);
    OpcUa_Field_GetSize(Double, CmdPos);
    OpcUa_Field_GetSize(Double, RemDist);

    *a_pSize = iSize;

OpcUa_ReturnStatusCode;
OpcUa_BeginErrorHandling;

    *a_pSize = -1;

OpcUa_FinishErrorHandling;
}

/*============================================================================
 * OpcUaCnc_CncPositionType_Encode
 *===========================================================================*/
OpcUa_StatusCode OpcUaCnc_CncPositionType_Encode(OpcUaCnc_CncPositionType* a_pValue, struct _OpcUa_Encoder* a_pEncoder)
{
OpcUa_InitializeStatus(OpcUa_Module_Serializer, (char*) "OpcUaCnc_CncPositionType_Encode");

    OpcUa_ReturnErrorIfArgumentNull(a_pValue);
    OpcUa_ReturnErrorIfArgumentNull(a_pEncoder);

    OpcUa_Field_Write(Double, ActPos);
    OpcUa_Field_Write(Double, CmdPos);
    OpcUa_Field_Write(Double, RemDist);

OpcUa_ReturnStatusCode;
OpcUa_BeginErrorHandling;

    /* nothing to do */

OpcUa_FinishErrorHandling;
}

/*============================================================================
 * OpcUaCnc_CncPositionType_Decode
 *===========================================================================*/
OpcUa_StatusCode OpcUaCnc_CncPositionType_Decode(OpcUaCnc_CncPositionType* a_pValue, struct _OpcUa_Decoder* a_pDecoder)
{
OpcUa_InitializeStatus(OpcUa_Module_Serializer, (char*) "OpcUaCnc_CncPositionType_Decode");

    OpcUa_ReturnErrorIfArgumentNull(a_pValue);
    OpcUa_ReturnErrorIfArgumentNull(a_pDecoder);

    OpcUaCnc_CncPositionType_Initialize(a_pValue);

    OpcUa_Field_Read(Double, ActPos);
    OpcUa_Field_Read(Double, CmdPos);
    OpcUa_Field_Read(Double, RemDist);

OpcUa_ReturnStatusCode;
OpcUa_BeginErrorHandling;

    OpcUaCnc_CncPositionType_Clear(a_pValue);

OpcUa_FinishErrorHandling;
}

#if OPCUA_ENCODEABLE_OBJECT_COMPARE_SUPPORTED
/*============================================================================
 * OpcUaCnc_CncPositionType_Compare
 *===========================================================================*/
OpcUa_Int OpcUaCnc_CncPositionType_Compare(const OpcUaCnc_CncPositionType* a_pValue1, const OpcUaCnc_CncPositionType* a_pValue2)
{
    if (a_pValue1 == a_pValue2)
    {
        return 0;
    }
    if (a_pValue1 == OpcUa_Null)
    {
        return -1;
    }
    if (a_pValue2 == OpcUa_Null)
    {
        return 1;
    }

    OpcUa_Field_Compare(Double, ActPos);
    OpcUa_Field_Compare(Double, CmdPos);
    OpcUa_Field_Compare(Double, RemDist);

    return 0;
}
#endif /* OPCUA_ENCODEABLE_OBJECT_COMPARE_SUPPORTED */

#if OPCUA_ENCODEABLE_OBJECT_COPY_SUPPORTED
/*============================================================================
 * OpcUaCnc_CncPositionType_Copy
 *===========================================================================*/
OpcUa_StatusCode OpcUaCnc_CncPositionType_Copy(const OpcUaCnc_CncPositionType* a_pSource, OpcUaCnc_CncPositionType** a_ppCopy)
{
OpcUa_InitializeStatus(OpcUa_Module_ProxyStub, (char*) "OpcUaCnc_CncPositionType_Copy");

    OpcUa_ReturnErrorIfArgumentNull(a_pSource);
    OpcUa_ReturnErrorIfArgumentNull(a_ppCopy);

    *a_ppCopy = (OpcUaCnc_CncPositionType*)OpcUa_Alloc(sizeof( OpcUaCnc_CncPositionType ));
    OpcUa_GotoErrorIfAllocFailed((*a_ppCopy));

    uStatus = OpcUaCnc_CncPositionType_CopyTo(a_pSource, *a_ppCopy);
    OpcUa_GotoErrorIfBad(uStatus);

OpcUa_ReturnStatusCode;
OpcUa_BeginErrorHandling;

    if (*a_ppCopy != OpcUa_Null)
    {
        OpcUa_Free(*a_ppCopy);
        *a_ppCopy = OpcUa_Null;
    }

OpcUa_FinishErrorHandling;
}

/*============================================================================
 * OpcUaCnc_CncPositionType_CopyTo
 *===========================================================================*/
OpcUa_StatusCode OpcUaCnc_CncPositionType_CopyTo(const OpcUaCnc_CncPositionType* a_pSource, OpcUaCnc_CncPositionType* a_pDestination)
{
OpcUa_InitializeStatus(OpcUa_Module_ProxyStub, (char*) "OpcUaCnc_CncPositionType_CopyTo");

    OpcUa_ReturnErrorIfArgumentNull(a_pSource);
    OpcUa_ReturnErrorIfArgumentNull(a_pDestination);

    OpcUaCnc_CncPositionType_Initialize(a_pDestination);

    OpcUa_Field_CopyToScalar(Double, ActPos);
    OpcUa_Field_CopyToScalar(Double, CmdPos);
    OpcUa_Field_CopyToScalar(Double, RemDist);

OpcUa_ReturnStatusCode;
OpcUa_BeginErrorHandling;

    OpcUaCnc_CncPositionType_Clear(a_pDestination);

OpcUa_FinishErrorHandling;
}
#endif /* OPCUA_ENCODEABLE_OBJECT_COPY_SUPPORTED */

/*============================================================================
 * OpcUaCnc_CncPositionType_EncodeableType
 *===========================================================================*/
struct _OpcUa_EncodeableType OpcUaCnc_CncPositionType_EncodeableType =
{
#if !OPCUA_ENCODEABLE_OBJECT_OMIT_TYPE_NAME
    (char*) "OpcUaCnc_CncPositionType",
#endif /* !OPCUA_ENCODEABLE_OBJECT_OMIT_TYPE_NAME */
    OpcUaCncId_CncPositionType,
    OpcUaCncId_CncPositionType_Encoding_DefaultBinary,
    OpcUaCncId_CncPositionType_Encoding_DefaultXml,
    OpcUaCnc_NameSpaceUri,
    sizeof(OpcUaCnc_CncPositionType),
    (OpcUa_EncodeableObject_PfnInitialize*)OpcUaCnc_CncPositionType_Initialize,
    (OpcUa_EncodeableObject_PfnClear*)OpcUaCnc_CncPositionType_Clear,
    (OpcUa_EncodeableObject_PfnGetSize*)OpcUaCnc_CncPositionType_GetSize,
    (OpcUa_EncodeableObject_PfnEncode*)OpcUaCnc_CncPositionType_Encode,
    (OpcUa_EncodeableObject_PfnDecode*)OpcUaCnc_CncPositionType_Decode
#if OPCUA_ENCODEABLE_OBJECT_COMPARE_SUPPORTED
    ,(OpcUa_EncodeableObject_PfnCompare*)OpcUaCnc_CncPositionType_Compare
#endif /* OPCUA_ENCODEABLE_OBJECT_COMPARE_SUPPORTED */
#if OPCUA_ENCODEABLE_OBJECT_COPY_SUPPORTED
    ,(OpcUa_EncodeableObject_PfnCopy*)OpcUaCnc_CncPositionType_Copy,
    (OpcUa_EncodeableObject_PfnCopyTo*)OpcUaCnc_CncPositionType_CopyTo
#endif /* OPCUA_ENCODEABLE_OBJECT_COPY_SUPPORTED */
};
#endif /*OPCUA_EXCLUDE_OpcUaCnc_CncPositionType*/

/*============================================================================
 * Table of known types.
 *===========================================================================*/
static OpcUa_EncodeableType* g_OpcUaCnc_KnownEncodeableTypes[] =
{
#ifndef OPCUA_EXCLUDE_OpcUaCnc_CncPositionType
    &OpcUaCnc_CncPositionType_EncodeableType,
#endif /*OPCUA_EXCLUDE_OpcUaCnc_CncPositionType*/
    OpcUa_Null
};
OpcUa_EncodeableType** OpcUaCnc_KnownEncodeableTypes = g_OpcUaCnc_KnownEncodeableTypes;

namespace OpcUaCnc
{

bool DataTypes::s_dataTypesAdded = false;

/** Static method used to register structure data types with the OPC UA stack
 *
 *  This method can be called multiple times and makes sure the data type is registered only once.
 */
void DataTypes::registerStructuredTypes()
{
    if (!s_dataTypesAdded)
    {
        OpcUa_ProxyStub_AddTypes(OpcUaCnc_KnownEncodeableTypes);
        s_dataTypesAdded = true;
    }
}

}

