/******************************************************************************
** opcuacnc_cncpositiontype.h
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/


#ifndef __OPCUACNC_CNCPOSITIONTYPE_H__
#define __OPCUACNC_CNCPOSITIONTYPE_H__

#include <opcua_proxystub.h>

#include "uabase.h"
#include "uaarraytemplates.h"
#include "opcuacnc_identifiers.h"
#include "opcuacnc_datatypes.h"

class UaExtensionObject;
class UaVariant;
class UaDataValue;

// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

class UAMODELS_EXPORT CncPositionTypePrivate;

/**
 *  @brief Wrapper class for the UA stack structure OpcUaCnc_CncPositionType.
 *
 *  This class encapsulates the native OpcUaCnc_CncPositionType structure
 *  and handles memory allocation and cleanup for you.
 *  CncPositionType uses implicit sharing to avoid needless copying and to boost the performance.
 *  Only if you modify a shared CncPositionType it creates a copy for that (copy-on-write).
 *  So assigning another CncPositionType or passing it as parameter needs constant time and is nearly as fast as assigning a pointer.
 */
class UAMODELS_EXPORT CncPositionType
{
    OPCUACNC_DECLARE_PRIVATE(CncPositionType)
public:
    CncPositionType();
    CncPositionType(const CncPositionType &other);
    CncPositionType(const OpcUaCnc_CncPositionType &other);
    CncPositionType(
        OpcUa_Double ActPos,
        OpcUa_Double CmdPos,
        OpcUa_Double RemDist
        );
    CncPositionType(const UaExtensionObject &extensionObject);
    CncPositionType(const OpcUa_ExtensionObject &extensionObject);
    CncPositionType(UaExtensionObject &extensionObject, OpcUa_Boolean bDetach);
    CncPositionType(OpcUa_ExtensionObject &extensionObject, OpcUa_Boolean bDetach);
    ~CncPositionType();

    void clear();

    bool operator==(const CncPositionType &other) const;
    bool operator!=(const CncPositionType &other) const;

    CncPositionType& operator=(const CncPositionType &other);

    OpcUaCnc_CncPositionType* copy() const;
    void copyTo(OpcUaCnc_CncPositionType *pDst) const;

    static OpcUaCnc_CncPositionType* clone(const OpcUaCnc_CncPositionType& source);
    static void cloneTo(const OpcUaCnc_CncPositionType& source, OpcUaCnc_CncPositionType& copy);

    void attach(const OpcUaCnc_CncPositionType *pValue);
    OpcUaCnc_CncPositionType* detach(OpcUaCnc_CncPositionType* pDst);

    void toVariant(UaVariant &variant) const;
    void toVariant(OpcUa_Variant &variant) const;
    void toVariant(UaVariant &variant, OpcUa_Boolean bDetach);
    void toVariant(OpcUa_Variant &variant, OpcUa_Boolean bDetach);

    void toDataValue(UaDataValue &dataValue, OpcUa_Boolean updateTimeStamps) const;
    void toDataValue(OpcUa_DataValue &dataValue, OpcUa_Boolean updateTimeStamps) const;
    void toDataValue(UaDataValue &dataValue, OpcUa_Boolean bDetach, OpcUa_Boolean updateTimeStamps);
    void toDataValue(OpcUa_DataValue &dataValue, OpcUa_Boolean bDetach, OpcUa_Boolean updateTimeStamps);

    void toExtensionObject(UaExtensionObject &extensionObject) const;
    void toExtensionObject(OpcUa_ExtensionObject &extensionObject) const;
    void toExtensionObject(UaExtensionObject &extensionObject, OpcUa_Boolean bDetach);
    void toExtensionObject(OpcUa_ExtensionObject &extensionObject, OpcUa_Boolean bDetach);

    OpcUa_StatusCode setCncPositionType(const UaExtensionObject &extensionObject);
    OpcUa_StatusCode setCncPositionType(const OpcUa_ExtensionObject &extensionObject);
    OpcUa_StatusCode setCncPositionType(UaExtensionObject &extensionObject, OpcUa_Boolean bDetach);
    OpcUa_StatusCode setCncPositionType(OpcUa_ExtensionObject &extensionObject, OpcUa_Boolean bDetach);

    void setCncPositionType(
        OpcUa_Double ActPos,
        OpcUa_Double CmdPos,
        OpcUa_Double RemDist
        );

    OpcUa_Double getActPos() const;
    OpcUa_Double getCmdPos() const;
    OpcUa_Double getRemDist() const;

    void setActPos(OpcUa_Double ActPos);
    void setCmdPos(OpcUa_Double CmdPos);
    void setRemDist(OpcUa_Double RemDist);
};

class CncPositionTypes
{
public:
    CncPositionTypes();
    CncPositionTypes(const CncPositionTypes &other);
    CncPositionTypes(OpcUa_Int32 length, OpcUaCnc_CncPositionType* data);
    virtual ~CncPositionTypes();

    CncPositionTypes& operator=(const CncPositionTypes &other);
    OpcUaCnc_CncPositionType& operator[](OpcUa_UInt32 index);
    const OpcUaCnc_CncPositionType& operator[](OpcUa_UInt32 index) const;

    void attach(OpcUa_UInt32 length, OpcUaCnc_CncPositionType* data);
    void attach(OpcUa_Int32 length, OpcUaCnc_CncPositionType* data);
    OpcUaCnc_CncPositionType* detach();

    bool operator==(const CncPositionTypes &other) const;
    bool operator!=(const CncPositionTypes &other) const;

    void create(OpcUa_UInt32 length);
    void resize(OpcUa_UInt32 length);
    void clear();

    inline OpcUa_UInt32 length() const {return m_noOfElements;}
    inline const OpcUaCnc_CncPositionType* rawData() const {return m_data;}
    inline OpcUaCnc_CncPositionType* rawData() {return m_data;}
    void toVariant(UaVariant &variant) const;
    void toVariant(OpcUa_Variant &variant) const;
    void toVariant(UaVariant &variant, OpcUa_Boolean bDetach);
    void toVariant(OpcUa_Variant &variant, OpcUa_Boolean bDetach);

    void toDataValue(UaDataValue &dataValue, OpcUa_Boolean updateTimeStamps) const;
    void toDataValue(OpcUa_DataValue &dataValue, OpcUa_Boolean updateTimeStamps) const;
    void toDataValue(UaDataValue &dataValue, OpcUa_Boolean bDetach, OpcUa_Boolean updateTimeStamps);
    void toDataValue(OpcUa_DataValue &dataValue, OpcUa_Boolean bDetach, OpcUa_Boolean updateTimeStamps);

    OpcUa_StatusCode setCncPositionTypes(const UaVariant &variant);
    OpcUa_StatusCode setCncPositionTypes(const OpcUa_Variant &variant);
    OpcUa_StatusCode setCncPositionTypes(UaVariant &variant, OpcUa_Boolean bDetach);
    OpcUa_StatusCode setCncPositionTypes(OpcUa_Variant &variant, OpcUa_Boolean bDetach);
    OpcUa_StatusCode setCncPositionTypes(OpcUa_Int32 length, OpcUaCnc_CncPositionType* data);

    static CncPositionTypes empty;
private:
    OpcUa_UInt32 m_noOfElements;
    OpcUaCnc_CncPositionType* m_data;
};

} // namespace OpcUaCnc

#endif // __OPCUACNC_CNCPOSITIONTYPE_H__

