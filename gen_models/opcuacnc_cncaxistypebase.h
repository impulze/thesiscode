/******************************************************************************
** opcuacnc_cncaxistypebase.h
**
**   **************************** auto-generated ****************************
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.5.0, using C++ OPC UA SDK 1.5.0 template (version 4)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**   **************************** auto-generated ****************************
**
** Copyright (c) 2006-2016 Unified Automation GmbH. All rights reserved.
**
** Software License Agreement ("SLA") Version 2.5
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.5, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.5/
**
** Project: C++ OPC Server SDK information model for namespace http://opcfoundation.org/UA/CNC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** Created: 19.08.2016
**
******************************************************************************/

#ifndef __OPCUACNC_CNCAXISTYPEBASE_H__
#define __OPCUACNC_CNCAXISTYPEBASE_H__

#include "opcuacnc_cncdrivetype.h"
#include "opcuacnc_datatypes.h"
#include "basenodes.h"
#include "opcua_analogitemtype.h"
#include "opcua_basedatavariabletype.h"
#include "opcua_dataitemtype.h"
#include "opcua_propertytype.h"
#include "opcuacnc_cncpositiontype.h"
#include "opcuacnc_identifiers.h"
#include "opcuacnc_instancefactory_cnc.h"
#include "uaeuinformation.h"
#include "uarange.h"

// Namespace for the UA information model http://opcfoundation.org/UA/CNC/
namespace OpcUaCnc {

class CncPositionVariableType;

/** Generated base class for a CncAxisType.
 *
 *  This class contains the generated base code for the object type CncAxisType
 *  representing an OPC UA ObjectType. This class is used to create the object type and to
 *  create and represent instances of the object type in the server address space.
 *
 *  **Variable members of the CncAxisType:**
 *
 *  Browse Name  | DataType        | TypeDefinition          | Modelling Rule | See Also
 *  -------------|-----------------|-------------------------|----------------|-------------------------------------------
 *  ActStatus    | CncAxisStatus   | DataItemType            | Mandatory      | \ref getActStatus, \ref setActStatus
 *  IsReferenced | Boolean         | DataItemType            | Mandatory      | \ref getIsReferenced, \ref setIsReferenced
 *  IsRotational | Boolean         | DataItemType            | Mandatory      | \ref getIsRotational, \ref setIsRotational
 *  PosDirect    | CncPositionType | CncPositionVariableType | Mandatory      | \ref getPosDirect, \ref setPosDirect
 *  PosIndirect  | CncPositionType | CncPositionVariableType | Mandatory      | \ref getPosIndirect, \ref setPosIndirect
 *  ZeroOffset   | Boolean         | AnalogItemType          | Mandatory      | \ref getZeroOffset, \ref setZeroOffset
 *
 */
class UAMODELS_EXPORT CncAxisTypeBase:
    public OpcUaCnc::CncDriveType
{
    UA_DISABLE_COPY(CncAxisTypeBase);
protected:
    virtual ~CncAxisTypeBase();
public:
    // construction / destruction
    CncAxisTypeBase(const UaNodeId& nodeId, UaObject* pInstanceDeclarationObject, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex = NULL);
    CncAxisTypeBase(const UaNodeId& nodeId, const UaString& name, OpcUa_UInt16 browseNameNameSpaceIndex, NodeManagerConfig* pNodeConfig, UaMutexRefCounted* pSharedMutex = NULL);
    CncAxisTypeBase(
        UaBase::Object*    pBaseNode,
        XmlUaNodeFactoryManager*   pFactory,
        NodeManagerConfig* pNodeConfig,
        UaMutexRefCounted* pSharedMutex = NULL);
    static void createTypes();
    static void clearStaticMembers();

    virtual UaNodeId       typeDefinitionId() const;


    virtual void setActStatus(OpcUaCnc::CncAxisStatus ActStatus);
    virtual OpcUaCnc::CncAxisStatus getActStatus() const;

    virtual void setIsReferenced(OpcUa_Boolean IsReferenced);
    virtual OpcUa_Boolean getIsReferenced() const;

    virtual void setIsRotational(OpcUa_Boolean IsRotational);
    virtual OpcUa_Boolean getIsRotational() const;

    virtual void setPosDirect(const OpcUaCnc::CncPositionType& PosDirect);
    virtual OpcUaCnc::CncPositionType getPosDirect() const;

    virtual void setPosIndirect(const OpcUaCnc::CncPositionType& PosIndirect);
    virtual OpcUaCnc::CncPositionType getPosIndirect() const;

    virtual void setZeroOffset(OpcUa_Boolean ZeroOffset);
    virtual OpcUa_Boolean getZeroOffset() const;

    virtual OpcUa::DataItemType* getActStatusNode();
    virtual const OpcUa::DataItemType* getActStatusNode() const;
    virtual OpcUa::DataItemType* getIsReferencedNode();
    virtual const OpcUa::DataItemType* getIsReferencedNode() const;
    virtual OpcUa::DataItemType* getIsRotationalNode();
    virtual const OpcUa::DataItemType* getIsRotationalNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosDirectNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosDirectNode() const;
    virtual OpcUaCnc::CncPositionVariableType* getPosIndirectNode();
    virtual const OpcUaCnc::CncPositionVariableType* getPosIndirectNode() const;
    virtual OpcUa::AnalogItemType* getZeroOffsetNode();
    virtual const OpcUa::AnalogItemType* getZeroOffsetNode() const;

    // NodeAccessInfo management
    virtual void useAccessInfoFromType();
    void useAccessInfoFromInstance(CncAxisTypeBase *pInstance);

protected:
    // Variable nodes
    // Variable ActStatus
    static OpcUa::DataItemType*  s_pActStatus;
    OpcUa::DataItemType*  m_pActStatus;
    // Variable IsReferenced
    static OpcUa::DataItemType*  s_pIsReferenced;
    OpcUa::DataItemType*  m_pIsReferenced;
    // Variable IsRotational
    static OpcUa::DataItemType*  s_pIsRotational;
    OpcUa::DataItemType*  m_pIsRotational;
    // Variable PosDirect
    static OpcUaCnc::CncPositionVariableType*  s_pPosDirect;
    OpcUaCnc::CncPositionVariableType*  m_pPosDirect;
    // Variable PosIndirect
    static OpcUaCnc::CncPositionVariableType*  s_pPosIndirect;
    OpcUaCnc::CncPositionVariableType*  m_pPosIndirect;
    // Variable ZeroOffset
    static OpcUa::AnalogItemType*  s_pZeroOffset;
    OpcUa::AnalogItemType*  m_pZeroOffset;



private:
    void initialize();

private:
    static bool s_typeNodesCreated;
};

} // End namespace for the UA information model http://opcfoundation.org/UA/CNC/

#endif // #ifndef __OPCUACNCCNCAXISTYPEBASE_H__


